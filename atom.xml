<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Born in poverty, died of numbness</title>
  
  
  <link href="http://asuhe.fun/atom.xml" rel="self"/>
  
  <link href="http://asuhe.fun/"/>
  <updated>2021-11-30T06:23:39.574Z</updated>
  <id>http://asuhe.fun/</id>
  
  <author>
    <name>Asuhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mockjs基本使用</title>
    <link href="http://asuhe.fun/2021/11/30/2021-11-30-Mockjs%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://asuhe.fun/2021/11/30/2021-11-30-Mockjs%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-11-30T06:04:59.000Z</published>
    <updated>2021-11-30T06:23:39.574Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="node"><a class="anchor" href="#node">#</a> node</h2><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># npm 安装</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> mockjs</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># yarn 安装 推荐</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">yarn</span> <span class="token function">add</span> mockjs</pre></td></tr></table></figure><h3 id="使用"><a class="anchor" href="#使用">#</a> 使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 使用 Mock</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mockjs'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">var</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">'list|1-10'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token string">'id|+1'</span><span class="token operator">:</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 输出结果</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="vue"><a class="anchor" href="#vue">#</a> vue</h2><p>使用步骤</p><ul><li>定义数据结构</li><li>设置 mock 服务器</li><li>封装 axios</li><li>使用</li></ul><h3 id="定义数据结构"><a class="anchor" href="#定义数据结构">#</a> 定义数据结构</h3><p>定义好要模拟数据的基本 <code>json</code>  结构，结构中可以使用 mock 提供的<span class="exturl" data-url="aHR0cDovL21vY2tqcy5jb20vZXhhbXBsZXMuaHRtbA==">语法</span>随机输出数据</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre># banners.json</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token property">"imgUrl"</span><span class="token operator">:</span><span class="token string">"/images/banner1.jpg"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token property">"imgUrl"</span><span class="token operator">:</span><span class="token string">"/images/banner2.jpg"</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token property">"imgUrl"</span><span class="token operator">:</span><span class="token string">"/images/banner3.jpg"</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"4"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token property">"imgUrl"</span><span class="token operator">:</span><span class="token string">"/images/banner4.jpg"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><h3 id="设置mock服务器"><a class="anchor" href="#设置mock服务器">#</a> 设置 mock 服务器</h3><p>让 mock 模拟出接口，axios 请求往模拟出的接口里发</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// mockServer</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> banners <span class="token keyword">from</span>  <span class="token string">'./banners.json'</span><span class="token punctuation">;</span> <span class="token comment">// 接口返回的数据</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 设置接口请求路径</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/mock/banners'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="7"></td><td><pre>    code<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    data<span class="token operator">:</span>banners</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="封装-axios"><a class="anchor" href="#封装-axios">#</a> 封装 axios</h3><p>封装好发往 mock 服务器的请求拦截器和响应拦截器</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// mockAjax.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> NProgress <span class="token keyword">from</span> <span class="token string">"nprogress"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token string">"nprogress/nprogress.css"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 配置进度条</span></pre></td></tr><tr><td data-num="7"></td><td><pre>NProgress<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> showSpinner<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 创建一个 Axios 实例</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  baseURL<span class="token operator">:</span> <span class="token string">'/mock'</span><span class="token punctuation">,</span> <span class="token comment">// 设置基础 url</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  timeout<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 设置请求拦截器，添加基础路径</span></pre></td></tr><tr><td data-num="16"></td><td><pre>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 请求进度条</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  NProgress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">return</span> config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 设置响应拦截器，处理返回数据</span></pre></td></tr><tr><td data-num="22"></td><td><pre>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 隐藏进度条</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">// console.log(error);</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">请求出错</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">||</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">未知错误</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// 将实例暴露出去</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> service<span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="使用-2"><a class="anchor" href="#使用-2">#</a> 使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> mockAjax <span class="token keyword">from</span> <span class="token string">'./mockAjax'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reqBanners</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">mockAjax</span><span class="token punctuation">(</span><span class="token string">'/banners'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">requBannners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> value<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token parameter">error</span> <span class="token operator">=></span> error</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="tools" scheme="http://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Swiper基本使用</title>
    <link href="http://asuhe.fun/2021/11/30/2021-11-30-Swiper%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://asuhe.fun/2021/11/30/2021-11-30-Swiper%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-11-30T06:04:59.000Z</published>
    <updated>2021-11-30T06:47:25.386Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue"><a class="anchor" href="#vue">#</a> Vue</h2><h3 id="旧版"><a class="anchor" href="#旧版">#</a> 旧版</h3><h4 id="下载依赖包"><a class="anchor" href="#下载依赖包">#</a> 下载依赖包</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> swiper</pre></td></tr></table></figure><h4 id="在轮播组件中引入swiper和其css"><a class="anchor" href="#在轮播组件中引入swiper和其css">#</a> 在轮播组件中引入 swiper 和其 css</h4><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Swiper <span class="token keyword">from</span> <span class="token string">"swiper"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token string">'swiper/css/swiper.css'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="设置轮播的位置以及容器"><a class="anchor" href="#设置轮播的位置以及容器">#</a> 设置轮播的位置以及容器</h4><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-container<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySwiper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-slide<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in banners<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.imageUrl<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 435px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">&lt;!-- 如果需要分页器 --></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">&lt;!-- 如果需要导航按钮 --></span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h4 id="创建swiper实例"><a class="anchor" href="#创建swiper实例">#</a> 创建 Swiper 实例</h4><p>原则上一个 Swiper 实例只控制一个轮播图，<strong>而且 Swiper 实例一定要在界面显示后再创建，不然无法控制图片轮播</strong></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 数据更新后，先同步调用 watch 的回调，最后异步更新界面</span></pre></td></tr><tr><td data-num="2"></td><td><pre>watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//watch 监视轮播图片数据是否异步请求回来了</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">banners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">//nextTick 会在界面完成更新之后才执行指定的回调</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">var</span> mySwiper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>swiper<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 用 vue 的 ref 来隔离各个轮播图，防止一个 swiper 实例控制多个轮播图</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token comment">//direction: "vertical", // 垂直切换选项</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 循环模式选项</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>                autoplay<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    delay<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                    disableOnInteraction<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token comment">// 如果需要分页器</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                pagination<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                    el<span class="token operator">:</span> <span class="token string">".swiper-pagination"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token comment">// 如果需要前进后退按钮</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                navigation<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    nextEl<span class="token operator">:</span> <span class="token string">".swiper-button-next"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    prevEl<span class="token operator">:</span> <span class="token string">".swiper-button-prev"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token comment">// 如果需要滚动条</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                scrollbar<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    el<span class="token operator">:</span> <span class="token string">".swiper-scrollbar"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><h3 id="新版"><a class="anchor" href="#新版">#</a> 新版</h3><p>使用 <code>vue-awesome-swiper</code>  制作轮播图。</p><h4 id="安装"><a class="anchor" href="#安装">#</a> 安装</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> swiper</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> vue-awesome-swiper</pre></td></tr></table></figure><h4 id="定义swiperjs文件并注册该组件"><a class="anchor" href="#定义swiperjs文件并注册该组件">#</a> 定义 swiper.js 文件并注册该组件</h4><p>定义好 <code>swiper.js</code>  文件方便模块化管理插件</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// swiper.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> VueAwesomeSwiper <span class="token keyword">from</span> <span class="token string">'vue-awesome-swiper'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token string">'swiper/css/swiper.css'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueAwesomeSwiper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="在vue工程的mainjs中引入"><a class="anchor" href="#在vue工程的mainjs中引入">#</a> 在 vue 工程的 main.js 中引入</h4><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// main.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token string">'./swiper.js'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="使用"><a class="anchor" href="#使用">#</a> 使用</h4><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>// 轮播组件 tempalte部分</pre></td></tr><tr><td data-num="2"></td><td><pre>&lt;swiper :options="&#123;</pre></td></tr><tr><td data-num="3"></td><td><pre>          loop: true, // 循环模式选项</pre></td></tr><tr><td data-num="4"></td><td><pre>          autoplay: &#123;</pre></td></tr><tr><td data-num="5"></td><td><pre>            delay: 2000,</pre></td></tr><tr><td data-num="6"></td><td><pre>            disableOnInteraction: false,</pre></td></tr><tr><td data-num="7"></td><td><pre>          &#125;,</pre></td></tr><tr><td data-num="8"></td><td><pre>          // 如果需要分页器</pre></td></tr><tr><td data-num="9"></td><td><pre>          pagination: &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>            el: ".swiper-pagination",</pre></td></tr><tr><td data-num="11"></td><td><pre>            clickable:true</pre></td></tr><tr><td data-num="12"></td><td><pre>          &#125;,</pre></td></tr><tr><td data-num="13"></td><td><pre>          // 如果需要前进后退按钮</pre></td></tr><tr><td data-num="14"></td><td><pre>          navigation: &#123;</pre></td></tr><tr><td data-num="15"></td><td><pre>            nextEl: ".swiper-button-next",</pre></td></tr><tr><td data-num="16"></td><td><pre>            prevEl: ".swiper-button-prev",</pre></td></tr><tr><td data-num="17"></td><td><pre>          &#125;,</pre></td></tr><tr><td data-num="18"></td><td><pre>      &#125;" </pre></td></tr><tr><td data-num="19"></td><td><pre>       class="swiper"</pre></td></tr><tr><td data-num="20"></td><td><pre>       ref="swiper"</pre></td></tr><tr><td data-num="21"></td><td><pre>       id="mySwiper"></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-slide</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in banners<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.imageUrl<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">heigth</span><span class="token punctuation">:</span>435px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-slide</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-prev<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-next<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">calss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-pagination<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="tools" scheme="http://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>给hexo添加b站视频</title>
    <link href="http://asuhe.fun/2021/11/26/2021-11-26-%E7%BB%99hexo%E6%96%B0%E5%A2%9Eb%E7%AB%99%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE/"/>
    <id>http://asuhe.fun/2021/11/26/2021-11-26-%E7%BB%99hexo%E6%96%B0%E5%A2%9Eb%E7%AB%99%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE/</id>
    <published>2021-11-26T14:05:21.000Z</published>
    <updated>2021-11-26T14:44:12.879Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="添加bili插件"><a class="anchor" href="#添加bili插件">#</a> 添加 bili 插件</h2><p>本插件是由 hexo 原生 <code>youtube</code>  标签插件更改而来的，用相同的方法可以添加各大视频网站的标签。</p><h3 id="具体步骤"><a class="anchor" href="#具体步骤">#</a> 具体步骤：</h3><ul><li>找到 hexo 安装目录下的标签插件存放位置</li><li>创建一个 <code>bili.js</code>  文件，将代码写入</li><li>注册该标签插件</li><li>使用</li></ul><h3 id="bilijs-文件内容"><a class="anchor" href="#bilijs-文件内容">#</a> bili.js 文件内容</h3><pre><code>'use strict';const &#123; htmlTag &#125; = require('hexo-util');/*** bili tag** Syntax:*   &#123;% bili video_url %&#125;*/function bibiTag([video_url]) &#123;  const src = video_url;  const iframeTag = htmlTag('iframe', &#123;    src,    frameborder: '0',    loading: 'lazy',    allowfullscreen: true  &#125;, '');  return htmlTag('div', &#123; class: 'video-container' &#125;, iframeTag, false);&#125;module.exports = bibiTag;</code></pre><p>前三步图示</p><p><img data-src="https://i0.hdslb.com/bfs/album/06c7d28b90cf3ed20111875af6b96c07a64a0be9.png" alt="存放文件的标签插件的位置" /></p><h3 id="使用"><a class="anchor" href="#使用">#</a> 使用</h3><p>直接根据语法使用即可，建议使用 b 站官方的分享链接，不然打开文章时可能会直接跳转到 b 站，复制 src 里的内容</p><p><img data-src="https://i0.hdslb.com/bfs/album/c26e0772dc5d995867ad512b9cf53b9edafc1687.png" alt="复制src中的内容" /></p><p>效果</p><pre><code>&#123;% bili //player.bilibili.com/player.html?aid=549265071&bvid=BV11q4y1u7Dv&cid=445263431&page=1 %&#125;</code></pre><p><div class="video-container"><iframe src="//player.bilibili.com/player.html?aid=549265071&bvid=BV11q4y1u7Dv&cid=445263431&page=1" frameborder="0" loading="lazy" allowfullscreen></iframe></div></p><h3 id="缺点"><a class="anchor" href="#缺点">#</a> 缺点</h3><p>只能以默认 360p 的分辨率播放视频，若想切换分辨率则会自动跳转到 b 站。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://asuhe.fun/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由</title>
    <link href="http://asuhe.fun/2021/11/22/2021-11-22-Vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://asuhe.fun/2021/11/22/2021-11-22-Vue%E8%B7%AF%E7%94%B1/</id>
    <published>2021-11-22T13:49:01.000Z</published>
    <updated>2021-11-26T14:04:20.876Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本使用"><a class="anchor" href="#基本使用">#</a> 基本使用</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// ../router/index.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">'routes'</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 注册路由</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    mode<span class="token operator">:</span><span class="token string">'history'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    routes</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//routes.js 路由表文件</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../pages/Home'</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        component<span class="token operator">:</span>Home</pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        redirect<span class="token operator">:</span>Home <span class="token comment">// 默认选中 Home 路由组件</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">//main.js 在全局文件中使用路由器</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'../Router'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    name<span class="token operator">:</span><span class="token string">'app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    eq<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    components<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        router</pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>当我们在 <code>main.js</code>  中注册了 <code>router</code> ，我们就可以在任何一个组件（包括非路由组件）中使用 <code>$route</code>  和 <code>$router</code>  对象了。</p><p><code>$route</code>  对象是局部路由信息对象，它包含了当前路由组件里的信息，包括 <code>params</code> 、 <code>query</code>  参数等等</p><p><code>$router</code>  对象是全局的路由器对象，全局就一个。它包含了很多属性和方法（push、replace、go 等等），可以让整个应用都可以拥有路由功能。编程式导航就利用了这个对象来实现动态跳转。</p><h3 id="组件显示位置"><a class="anchor" href="#组件显示位置">#</a> 组件显示位置</h3><h3 id="声明式导航"><a class="anchor" href="#声明式导航">#</a> 声明式导航</h3><h3 id="编程式导航"><a class="anchor" href="#编程式导航">#</a> 编程式导航</h3><h2 id="路由间通信"><a class="anchor" href="#路由间通信">#</a> 路由间通信</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>手撸bind、apply、call</title>
    <link href="http://asuhe.fun/2021/11/21/2021-11-21-%E6%89%8B%E6%92%B8bind%E3%80%81apply%E3%80%81call/"/>
    <id>http://asuhe.fun/2021/11/21/2021-11-21-%E6%89%8B%E6%92%B8bind%E3%80%81apply%E3%80%81call/</id>
    <published>2021-11-21T11:55:16.000Z</published>
    <updated>2021-11-21T14:11:06.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="call"><a class="anchor" href="#call">#</a> call</h2><ul><li>功能：将函数 this 指向更改为第一个传入的形参对象，并调用函数本身</li><li>参数：<ul><li><strong>thisArg</strong>：可选的。在 <em> <code>function</code> </em> 函数运行时使用的  <code>this</code>  值。请注意， <code>this</code>  可能不是该方法看到的实际值：如果这个函数处于<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RyaWN0X21vZGU=">非严格模式</span>下，则指定为  <code>null</code>  或  <code>undefined</code>  时会自动替换为指向全局对象，原始值会被包装。</li><li><strong>arg1, arg2, ...</strong>：可选的。指定的参数列表。</li></ul></li><li>返回值：使用调用者提供的  <code>this</code>  值和参数调用该函数的返回值。若该方法没有返回值，则返回  <code>undefined</code> 。</li></ul><h3 id="es5写法"><a class="anchor" href="#es5写法">#</a> ES5 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 拿到传入的第一个参数</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">var</span> thisArg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 转换 arguments 为数组</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token string">'Symbol'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">var</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="es6写法"><a class="anchor" href="#es6写法">#</a> ES6 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 将方法定义在 Fuction 的 prototype 上，这样任何一个函数对象都可以使用该方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 判断第一个传入的形参是否为空</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>thisArg <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> thisArg <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> window<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 保存调用该方法的 this，该 this 指向的也就是调用 myCall 方法的那个函数对象本身</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用 Symbol 做唯一标识符，防止与源函数对象上的属性名冲突而产生覆盖</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 调用源函数</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 清理属性名，使原来传入的对象其恢复原样</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 返回改变 this 后源函数调用结果</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="apply"><a class="anchor" href="#apply">#</a> apply</h2><ul><li><p>功能：同 call，将函数 this 指向更改为第一个传入的形参对象，并调用函数本身</p></li><li><p>参数：</p><ul><li><strong>thisArg</strong>：可选的。在 <em> <code>func</code> </em> 函数运行时使用的  <code>this</code>  值。</li><li><strong>argsArray</strong>：可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给  <code>func</code>  函数。如果该参数的值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"> <code>null</code> </a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"> <code>undefined</code> </a>，则表示不需要传入任何参数。</li></ul></li><li><p>返回值：使用调用者提供的  <code>this</code>  值和参数调用该函数的返回值。若该方法没有返回值，则返回  <code>undefined</code> 。</p></li></ul><h3 id="es5写法-2"><a class="anchor" href="#es5写法-2">#</a> ES5 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 拿到传入的第一个参数</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">var</span> thisArg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 转换 arguments 为数组</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token string">'Symbol'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">var</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="es6写法-2"><a class="anchor" href="#es6写法-2">#</a> ES6 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 步骤基本和 call 一样，唯一的区别就是第二个参数是给源函数使用的参数数组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span>argsArray</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>thisArg <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> thisArg <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> window<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 调用源函数，将参数组数展开</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>argsArray<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="bind"><a class="anchor" href="#bind">#</a> bind</h2><ul><li>功能：将函数 this 指向更改为第一个传入的形参对象，而其余参数将作为返回的新函数的参数，供调用时使用。</li><li>参数：<ul><li><strong>thisArg</strong>：调用绑定函数时作为  <code>this</code>  参数传递给目标函数的值。</li><li><strong>arg1, arg2, ...</strong>：当目标函数被调用时，被预置入绑定函数的参数列表中的参数。</li></ul></li><li>返回值：返回一个原函数的拷贝，并拥有指定的  <code>this</code>  值和初始参数。</li></ul><h3 id="es5写法-3"><a class="anchor" href="#es5写法-3">#</a> ES5 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 拿到传入的第一个参数</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">var</span> thisArg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 转换 arguments 为数组</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token string">'Symbol'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> that<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">var</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="es6写法-3"><a class="anchor" href="#es6写法-3">#</a> ES6 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span><span class="token operator">...</span>args1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>thisArg <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> thisArg <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> window<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="http://asuhe.fun/tags/javascript/"/>
    
    <category term="手撸源码" scheme="http://asuhe.fun/tags/%E6%89%8B%E6%92%B8%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>手撸一个Promise</title>
    <link href="http://asuhe.fun/2021/11/19/2021-11-19-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AAPromise/"/>
    <id>http://asuhe.fun/2021/11/19/2021-11-19-%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AAPromise/</id>
    <published>2021-11-19T00:21:45.000Z</published>
    <updated>2021-11-21T11:54:42.409Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="promise构造函数"><a class="anchor" href="#promise构造函数">#</a> Promise 构造函数</h2><p>Promise 构造函数需要传的参数就是一个 executor 构造器函数。executor 里需要传 resolve 和 reject 函数，用于改变 Promise 实例的状态</p><ul><li>功能：立即执行 executor 代码，并且传递出两个函数用于改变 Promise 实例状态</li><li>参数：resolve 函数和 reject 函数</li><li>返回值：无</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 定义状态</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 保证 this 指向实例</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span> <span class="token comment">// 初始化状态</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 保存成功或失败回调的值</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 保存回调队列，用 &#123;onResolve,onReject&#125; 对象存储指定的回调函数队列</span></pre></td></tr><tr><td data-num="11"></td><td><pre> <span class="token comment">// 更改实例状态为成功的函数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">// 判定当前状态是否为 pending，若不是则不允许第二次更改状态</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">// 将实例状态更改为 fulfilled 并保存传入的 value</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        that<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">FULFILLED</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        that<span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">// 检查回调队列有没有回调函数需要调用</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token comment">// 将成功回调推入微队列异步执行</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> cb<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre> <span class="token comment">// 更改实例状态为失败的函数</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">// 判定当前状态是否为 pending，若不是则不允许第二次更改状态</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">// 将实例状态更改为 rejected 并保存传入的 reason</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        that<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        that<span class="token punctuation">.</span>data <span class="token operator">=</span> reason<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// 检查回调队列有没有回调函数需要调用</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token comment">// 将失败回调推入微队列异步执行</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> cb<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">// 同步执行 executor，并向外传递出改变实例状态的函数</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="promiseprototypethen"><a class="anchor" href="#promiseprototypethen">#</a> Promise.prototype.then()</h2><ul><li>功能：给实例对象指定成功和失败的回调</li><li>参数：成功的回调函数和失败的回调函数</li><li>返回值：return 一个新的 Promise 实例</li><li>特性：return 的 Promise 实例状态根据传入回调函数的执行结果决定</li><li>return 的 Promise 状态影响因素<ol><li>回调函数执行抛出异常，return 的新 Promise 状态为 rejected，reason 为该异常</li><li>回调函数返回非 Promise 值，return 的新 Promise 状态为 fulfilled，value 为回调函数的返回值</li><li>回调函数返回 Promise 值，return 的新 Promise 状态和值都跟随返回的 Promise</li></ol></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onResolve<span class="token punctuation">,</span>onReject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 判定传入的成功回调是否为函数，若不是则强制改为函数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    onResolve <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolve <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onResolve</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 判定传入的失败回调是否为函数，若不是则原样抛出异常，实现异常穿透</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    onReject <span class="token operator">=</span> <span class="token keyword">typeof</span> onReject <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onReject</span> <span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> reason<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 定义 handle 函数处理所有能影响 return 的 Promise 状态的情况</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token comment">//1. 若回调函数执行抛出异常则捕获异常</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 接收成功回调的返回值</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    <span class="token comment">// 判断返回值类型并处理</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                        <span class="token comment">//3. 根据 res 的状态决定 return 的 Promise 状态</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                        res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//2. 非 Promise 返回值直接返回</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token comment">// 若此时是先指定了回调函数，后面改变的状态则将回调放入回调队列</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                    <span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                        <span class="token function">handle</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                    <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token function">handle</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 若先改变了状态，则直接将回调函数推入微队列执行</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token function">handle</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span><span class="token punctuation">;</span>   </pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token function">handle</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token punctuation">&#125;</span>  </pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="promiseprototypecatch"><a class="anchor" href="#promiseprototypecatch">#</a> Promise.prototype.catch()</h2><ul><li>功能：给实例对象指定失败的回调</li><li>参数：失败的回调函数</li><li>返回值：return 一个新的 Promise 实例</li><li>特性：return 的 Promise 实例状态根据传入回调函数的执行结果决定</li><li>return 的 Promise 状态影响因素<ol><li>回调函数执行抛出异常，return 的新 Promise 状态为 rejected，reason 为该异常</li><li>回调函数返回非 Promise 值，return 的新 Promise 状态为 fulfilled，value 为回调函数的返回值</li><li>回调函数返回 Promise 值，return 的新 Promise 状态和值都跟随返回的 Promise</li></ol></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onReject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="promiseresolve"><a class="anchor" href="#promiseresolve">#</a> Promise.resolve()</h2><ul><li>功能：根据传入的 value 返回一个已经改变了状态的 Promise</li><li>参数：value</li><li>返回值：return 一个新的 Promise 实例</li><li>特性：return 的 Promise 实例状态根据传入 value 决定</li><li>return 的 Promise 状态影响因素<ol><li>value 为一个抛出的异常，return 的新 Promise 状态为 rejected，reason 为该异常</li><li>value 是一个非 Promise，return 的新 Promise 状态为 fulfilled，value 为回调函数的返回值</li><li>value 是一个 Promise，return 的新 Promise 状态和值都跟随返回的 Promise</li></ol></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 仅需根据 then 中 handle 函数的逻辑重写一遍即可</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="promisereject"><a class="anchor" href="#promisereject">#</a> Promise.reject()</h2><ul><li>功能：根据传入的 value 返回一个已经改变了状态的 Promise</li><li>参数：value</li><li>返回值：return 一个新的 rejected 状态的 Promise 实例</li><li>特性：return 的 Promise 实例状态一定是 rejected</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>reason <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>reason <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>           <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="promiseall"><a class="anchor" href="#promiseall">#</a> Promise.all()</h2><ul><li>功能：根据传入的 Promise 数组，若该数组的 Promise 最后全都成功则返回一个 fulfilled 的 Promise，否则返回一个 rejected 的 Promise</li><li>参数：Promise 数组</li><li>返回值：return 一个 Promise 实例</li><li>特性：return 的 Promise 实例状态根据传入的 Promise 数组决定</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 定义一个 values 保存成功 Promise 的 value 的值</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录有几个 Promise 成功</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token comment">// 遍历数组所有元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>           Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token comment">// 用 Promise.resolve 包裹，处理数组中有非 Promise 值的情况</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    <span class="token operator">++</span>count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="promiserace"><a class="anchor" href="#promiserace">#</a> Promise.race()</h2><ul><li>功能：根据传入的 Promise 数组，return 的 Promise 状态跟随第一个完成的 Promise</li><li>参数：Promise 数组</li><li>返回值：return 一个 Promise 实例</li><li>特性：return 的 Promise 实例状态跟随第一个完成的 Promise</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function-variable function">race</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token comment">// 用 Promise.resolve 包裹，处理数组中有非 Promise 值的情况</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="完整代码"><a class="anchor" href="#完整代码">#</a> 完整代码</h2><h3 id="es5版"><a class="anchor" href="#es5版">#</a> ES5 版</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        that<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        that<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        that<span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            that<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">FULFILLED</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            that<span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> cb<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            that<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            that<span class="token punctuation">.</span>data <span class="token operator">=</span> reason<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> cb<span class="token punctuation">.</span><span class="token function">onReject</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onResolve<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        onResolve <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolve <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onResolve</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=></span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        onReject <span class="token operator">=</span> <span class="token keyword">typeof</span> onReject <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onReject</span> <span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> reason <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                        res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="44"></td><td><pre>                        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                        <span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                            <span class="token function">handle</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                        <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                            <span class="token function">handle</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>                    <span class="token function">handle</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                    <span class="token function">handle</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onReject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> onReject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>    Promise<span class="token punctuation">.</span><span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>                <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>                <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre>    Promise<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>                <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>                <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>                <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre></pre></td></tr><tr><td data-num="101"></td><td><pre>    Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>            promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>                Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="107"></td><td><pre>                    <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>                        <span class="token operator">++</span>count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>                        values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="112"></td><td><pre>                    <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre></pre></td></tr><tr><td data-num="117"></td><td><pre>    Promise<span class="token punctuation">.</span><span class="token function-variable function">race</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>            promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>                Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="121"></td><td><pre>                    <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="122"></td><td><pre>                    <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="123"></td><td><pre>                <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="124"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="126"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre></pre></td></tr><tr><td data-num="128"></td><td><pre>    w<span class="token punctuation">.</span>Promise <span class="token operator">=</span> Promise<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="129"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="es6版"><a class="anchor" href="#es6版">#</a> ES6 版</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            that<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            that<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            that<span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                that<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">FULFILLED</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                that<span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                        that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> cb<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                that<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                that<span class="token punctuation">.</span>data <span class="token operator">=</span> reason<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                        that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> cb<span class="token punctuation">.</span><span class="token function">onReject</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onResolve<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            onResolve <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolve <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onResolve</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=></span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            onReject <span class="token operator">=</span> <span class="token keyword">typeof</span> onReject <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onReject</span> <span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> reason <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                            res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                    that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                            <span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                                <span class="token function">handle</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                            <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                                <span class="token function">handle</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                    <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>                        <span class="token function">handle</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                    <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>                        <span class="token function">handle</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token function">catch</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> onReject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                    value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                    <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>                    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>                    <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>                    <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>                    <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>            <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>            <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>                promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>                    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="103"></td><td><pre>                        <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>                            <span class="token operator">++</span>count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>                            values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="108"></td><td><pre>                        <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="109"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>                promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>                    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="116"></td><td><pre>                        <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="117"></td><td><pre>                        <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre>                    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="119"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="120"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="121"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>    w<span class="token punctuation">.</span>Promise <span class="token operator">=</span> Promise<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="http://asuhe.fun/tags/javascript/"/>
    
    <category term="手撸源码" scheme="http://asuhe.fun/tags/%E6%89%8B%E6%92%B8%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Diff算法运行原理</title>
    <link href="http://asuhe.fun/2021/11/15/2021-11-15-%E5%AF%B9key%E5%80%BC%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://asuhe.fun/2021/11/15/2021-11-15-%E5%AF%B9key%E5%80%BC%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2021-11-15T01:00:52.000Z</published>
    <updated>2021-11-21T03:14:30.520Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="虚拟dom和diff算法"><a class="anchor" href="#虚拟dom和diff算法">#</a> 虚拟 DOM 和 Diff 算法</h2><p>虚拟 DOM 产生是因为真实 DOM 的体积通常非常大，当需要进行页面更新时若使用真实 DOM 进行比较会消耗大量时间和内存，效率十分低下。而如果使用虚拟 DOM，仅需要保留必要的属性，进行比较时速度会快上很多而且所占资源也非常少。</p><h3 id="diff算法运行原理"><a class="anchor" href="#diff算法运行原理">#</a> Diff 算法运行原理</h3><p>Diff 算法进行比较时最小的比较粒度是一个标签，当一个标签发生变化时 Diff 就会运行进行新旧虚拟 DOM 的比较。</p><h3 id="key的作用"><a class="anchor" href="#key的作用">#</a> key 的作用</h3><p>key 值是作为虚拟 DOM 对象的标识，在更新显示时 key 值作为索引去拿去和旧 DOM 对象比较。</p><p>当状态中的数据发生变化时，vue 会根据新数据的生成新的 DOM，随后会拿新 DOM 和旧 DOM 进行 Diff 比较。</p><ul><li>虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：<ul><li>若虚拟 DOM 中内容没有变化，直接使用之前的真实 DOM</li><li>若虚拟 DOM 中的内容发生变化，则生成新的真实 DOM</li></ul></li><li>旧虚拟 DOM 中没有找到与新虚拟 DOM 相同的 key，直接根据数据创建新的真实 DOM 渲染到页面。只会创建新 key 值虚拟 DOM 的真实 DOM</li></ul><h3 id="用index做key可能引发的问题"><a class="anchor" href="#用index做key可能引发的问题">#</a> 用 index 做 key 可能引发的问题</h3><ul><li>若对数据进行逆序添加、逆序删除等会破坏数据顺序的操作，会产生不必要的真实 DOM 更新，虽然界面显示没有问题，但是效率会很低</li><li>如果结构中还包含输入类的 DOM 则会产生错误的 DOM 更新，最常见的就是导致了页面输入 DOM 中的数据错乱</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>一文搞定闭包</title>
    <link href="http://asuhe.fun/2021/11/12/2021-11-12-%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E9%97%AD%E5%8C%85/"/>
    <id>http://asuhe.fun/2021/11/12/2021-11-12-%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E9%97%AD%E5%8C%85/</id>
    <published>2021-11-12T14:40:08.000Z</published>
    <updated>2021-11-16T11:27:57.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是闭包"><a class="anchor" href="#什么是闭包">#</a> 什么是闭包</h2><p>闭包就是在一个变量对象里持有另一个变量对象里内容的引用时，就会产生闭包。常见的表现形式就是，内部函数持有外部函数的变量，我们可以通过返回内部函数去让更外层的作用域能够访问到内部函数的父函数里的变量。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//fn 持有外层作用域 foo 函数里的变量 a</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> fn<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 最外层作用域获得 fn 的引用</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/11/13/CEaLXeArRsUD5nh.png" alt="调用fn后产生的闭包" /></p><p>原本执行完 foo ()，Stack 里 foo 的执行上下文的变量对象就要销毁。但是由于全局作用域的变量 f 持有其内部函数 fn 的引用而 fn 又持有变量 a 的引用。所以 foo 的执行上下文的变量对象一直不能释放回收，当我们调用 f () 时依然可以访问到变量 a。</p><p><img data-src="https://i.loli.net/2021/11/13/Smqr31wDnj9QzVa.png" alt="闭包内存示意图" /></p><p><strong>本质上所谓的闭包是一个引用关系，该引用关系存在于内部函数中，内部引用的是外部函数 (外部作用域) 的变量的对象</strong></p><h2 id="为什么会形成闭包"><a class="anchor" href="#为什么会形成闭包">#</a> 为什么会形成闭包</h2><p>闭包的形成需要三个条件：</p><ul><li>函数嵌套，本质上就是函数作用域的嵌套</li><li>内部函数持有外部函数的局部变量</li><li>外部函数被使用</li></ul><p>函数嵌套我们很好理解，因为函数的作用域在函数声明的时候就已经确定，所以函数要嵌套声明。内部函数要持有外部函数变量是因为如果内部函数没有持有外部函数变量，则内部函数在形成变量对象的时候并不会把外部函数的变量对象加入作用域链中，会直接越过它。这一点我们在 <a href="/2021/11/12/2021-11-12-js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/" title="js执行上下文机制">js执行上下文机制</a> 一文中已经详细说明。上面两条我们只是声明了函数并没有调用它，所以第三条外部函数被调用也就很好理解。</p><p>当出现了符合上述三个条件的情况时，就会产生闭包。但在实际运行环境中，内部函数也要调用或者引用才会产生 Closure。这是因为部分浏览器会对内部函数做优化，当内部函数不使用或者不引用时我们去调试它并不会产生一个 Closure 对象。因为我们不去使用内部函数就相当于在代码执行过程中没有具体地体现出这种引用关系，尽管我们在定义的时候形成了这种引用关系，所以为了节省内存开销浏览器就不会生成 Closure。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//fn 持有外层作用域 foo 函数里的变量 a</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span></pre></td></tr></table></figure><p>上面代码中同样会产生闭包，和第一个例子的代码相比只是我们不能多次访问而已。每调用一次外部函数就会产生一个 Closure</p><p><img data-src="https://i.loli.net/2021/11/13/CU8XPdmNkKxH1aF.png" alt="调用foo依然产生闭包" /></p><h2 id="闭包的生命周期"><a class="anchor" href="#闭包的生命周期">#</a> 闭包的生命周期</h2><p>产生：在嵌套内部函数定义完时就产生了 (不是在调用)，因为本质上闭包就是一种引用关系。当外部函数调用的时候，浏览器就会具体产生一个 Closure</p><p>死亡：在嵌套的内部函数成为垃圾对象时，也就是引用关系断裂的时候闭包就会死亡</p><h2 id="闭包的作用"><a class="anchor" href="#闭包的作用">#</a> 闭包的作用</h2><p>闭包可以延长外部函数变量对象的生命周期，而且它也让函数外部也可以间接操作到函数内部的变量。虽然闭包可以将外部函数的变量对象保留下来，但是浏览器为了性能后期将外部函数中不被内部函数使用的变量清除了。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 只使用变量 a</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> fn<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/11/13/ORX4QSE72Zultqx.png" alt="不被内部函数引用的变量被清除" /></p><h2 id="闭包的缺点"><a class="anchor" href="#闭包的缺点">#</a> 闭包的缺点</h2><p>因为闭包的关系，外部函数的变量对象不会在执行完后就马上被销毁。这就导致了内存泄漏的问题，如果我们不去手动释放那么这个变量对象就会一直存在于内存中。当内存泄漏过多就会让页面越来越卡，最后导致内存溢出，程序崩溃。但是要解决这个问题的方式也很简单，那就是让持有引用的变量置为 null，把引用关系断了就可以让 GC 去正常回收内存。</p><h2 id="应用闭包"><a class="anchor" href="#应用闭包">#</a> 应用闭包</h2><p>js 的模块化就用到了闭包，使用它可以防止全局变量污染。多个模块引入的同时不会产生因为变量重名而覆盖的问题。</p><p>此外还有一种经典用法就是让闭包去保存索引号</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">&lt;!-- 使让点击每个 li 都会输出其数组下标的位置 --></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>输出0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>输出1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>输出2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>输出3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 利用闭包保存外部传入的 index 值</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>对于上面的例题还有另外一种解法，就是利用 <code>let</code>  关键字绑定块级作用域也可以达到闭包的效果</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 只需将 for 循环里的 var index 改成 let index</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    btns<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/11/13/DTpyBPHVohqCNmj.png" alt="Block" /></p><p>Block 会保存下 index 的值，当点击事件触发时就会输出当时保存下 index 值</p><h2 id="自测题"><a class="anchor" href="#自测题">#</a> 自测题</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 代码片段一</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function-variable function">getNameFunc</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 代码片段二</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">var</span> name2 <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    name2<span class="token operator">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function-variable function">getNameFunc</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">return</span> that<span class="token punctuation">.</span>name2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 代码片段三</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="37"></td><td><pre>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="38"></td><td><pre>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="39"></td><td><pre>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="http://asuhe.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js执行上下文</title>
    <link href="http://asuhe.fun/2021/11/12/2021-11-12-js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://asuhe.fun/2021/11/12/2021-11-12-js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2021-11-12T09:24:27.000Z</published>
    <updated>2021-11-12T12:52:03.205Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="执行上下文"><a class="anchor" href="#执行上下文">#</a> 执行上下文</h2><p>在了解什么叫执行上下文之前我们需要区分一个小概念那就是程序执行和代码执行。我们的代码在执行之前是需要有一个环境的，就像我们做饭一样，做饭之前需要有做饭的环境就是厨房。代码执行就相当于做饭，做饭需要各种烹饪工具，而程序执行就是给代码执行创建一个可以让代码执行环境，相当于给一个厨房。程序执行的时候会在内存里面开辟空间存放各种代码执行需要的东西。<strong>而程序在解析和运行的时候也需要依赖一些环境，这些程序执行所依赖和使用的环境就叫做执行上下文。</strong></p><p>执行上下文根据范围的不同分为全局执行上下文和函数执行上下文。它是根据 js 的作用域来区分的，因为一般来说 js 就分为两种作用域，一种是全局作用域也就是最外层的作用域，另一种就是函数作用域。而上面两种执行上下文就是和这些作用域一一对应的。</p><p>程序执行时主要做三件事：</p><ul><li>收集变量，生成<strong>变量对象</strong>（预解析是其中的一个步骤）</li><li>确定 this 指向</li><li>确定作用域链</li></ul><p>有了这三步以后，我们的代码才能执行。其中第一步的生成变量对象实际上就是把我们声明的那些 var 变量 和函数都打包装进一个对象里面。在全局执行上下文运行的时候那些在全局作用域下的 var 变量和声明的函数都会收集进 global 对象里，<strong>global 就是一个全局变量对象</strong>。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/11/12/JgDQXyECYvZdj7w.png" alt="var a在全局作用域内" /></p><h2 id="执行上下文调用栈"><a class="anchor" href="#执行上下文调用栈">#</a> 执行上下文调用栈</h2><p>程序为了管理执行上下文（确保程序的执行顺序）所创建的一个栈数据结构，被称作执行上下文栈。本质上为了确保程序按预定的调用顺序执行，就使用栈这种结构来保存管理执行上下文。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/11/12/ntSeWVB36G7DRm1.png" alt="调用foo函数时的执行上下文调用栈" /></p><p>程序开始执行：（全局环境和函数环境）</p><p>全局执行上下文（分为创建阶段和执行阶段）代码开始执行之前和之后</p><p>​1、全局执行上下文压入执行上下文栈）<br />​创建上下文阶段：<br />​1、收集变量形成变量对象 （函数 var 的变量会收集）<br />​预解析（其实在创建变量对象的时候已经做了预解析）<br />​2、确定 this 指向（可以认为确定执行者）<br />​3、创建自身执行上下文的作用域链<br />​注意：同时确定函数在调用时候的上级作用域链。（根据 ECMA 词法去确定，看内部是否引用外部变量确定）</p><p>​2、执行全局执行上下文<br />​执行全局上下文阶段<br />​为变量真正赋值<br />​顺着作用域链查找要使用的变量或者函数执行</p><p>函数执行上下文<br /> 1、函数执行上下文压栈<br /> 1、收集变量  （var 形参  arguments  函数）<br />2、确定 this 指向（可以认为确定执行者）<br />3、创建自身执行上下文的作用域链<br />注意：同时确定函数在调用时候的上级作用域链。（根据 ECMA 词法去确定，看内部是否引用外部变量确定）<br />函数的作用域链：  自己定义的时候已经确定了函数在调用时候的上级作用域链，因此，在函数调用的时候，只需要将自己的变量对象添加到上级作用域链的顶端；就形成自己的作用域链</p><pre><code>2、执行函数执行上下文为变量真正赋值顺着作用域链查找要使用的变量或者函数执行</code></pre><h2 id="预解析"><a class="anchor" href="#预解析">#</a> 预解析</h2><p>预解析就是我们平常所说的变量提升。它会先解析函数，在解析变量。如果有函数重名，则函数覆盖。如果有变量重名则忽略。</p><h3 id="两个函数重名"><a class="anchor" href="#两个函数重名">#</a> 两个函数重名</h3><p>函数重名，函数覆盖</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// sphinx</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sphinx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="变量与变量重名"><a class="anchor" href="#变量与变量重名">#</a> 变量与变量重名</h3><p>重名变量的值被覆盖</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span></pre></td></tr></table></figure><h3 id="函数与变量重名"><a class="anchor" href="#函数与变量重名">#</a> 函数与变量重名</h3><p>函数和变量重名，则忽略变量</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">var</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// asuhe</span></pre></td></tr></table></figure><p>但是如果同名的变量在函数调用之前被赋值了，则会覆盖原来的函数</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// asuhe</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError 此时 a 已经不是函数了，被覆盖成了 10</span></pre></td></tr></table></figure><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//TypeError</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 浏览器执行时，上述代码被翻译为</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">var</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">var</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 变形 1</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// 变形 2</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// 变形 3</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// SyntaxError</span></pre></td></tr></table></figure><h4 id="小测验"><a class="anchor" href="#小测验">#</a> 小测验</h4><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// function</span></pre></td></tr></table></figure><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//fn 函数体</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//fn 函数体</span></pre></td></tr></table></figure><h2 id="作用域"><a class="anchor" href="#作用域">#</a> 作用域</h2><p>作用域就是用来确定确定变量起作用的范围的。** 作用域在代码定义的时候确定死了，而不是在执行的时候确定。** 作用域的主要作用就是隔离变量，防止变量命名污染。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></pre></td></tr></table></figure><p>而且在 js 中只有全局作用域和函数作用域这两种作用域。像对象和循环等等带有 { } 的都不存在作用域，不能限定变量范围</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function-variable function">fn</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sphinx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// asuhe</span></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined fn 会被当做变量提升，但是不会获得定义</span></pre></td></tr></table></figure><h2 id="作用域链"><a class="anchor" href="#作用域链">#</a> 作用域链</h2><p>作用域链是使用执行上下文当中变量对象所组成的链条结构（数组结构）是真实存在的，查找的时候其实真正是先去自身的变量对象当中查找，如果没有，去上级执行上下文的变量对象当中去查找，直到找到全局执行上下文的变量对象；  函数调用的时候上一级的变量对象其实是在函数定义的时候都已经确定好的。</p><p>当一个内部作用域引用外部作用域的变量时，外部作用域会被加入内部作用域变量对象的作用域链数组中，否则不加入。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 20 30</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 此时因为 fn1 内引用了 fn 内的变量，fn 的变量对象会被加入 fn1 的作用域链以便查找变量</span></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/11/12/2HTfuOckJGvqobn.png" alt="fn变量对象被加入fn1的作用域链数组" /></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20 30</span></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2021/11/12/pOb7qZ4CwWiex8n.png" alt="fn变量对象被跳过" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="http://asuhe.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>数组花式遍历</title>
    <link href="http://asuhe.fun/2021/11/11/2021-11-11-%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://asuhe.fun/2021/11/11/2021-11-11-%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86/</id>
    <published>2021-11-11T13:07:47.000Z</published>
    <updated>2021-11-13T07:19:21.431Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="for遍历"><a class="anchor" href="#for遍历">#</a> for 遍历</h2><p>for 遍历是最基础最简单的一种遍历数组的方式，在 js 中的数组其实并不是其它语言通常意义上的数组。它实际上只是一个带有 length 属性的对象，当我们使用 for 循环加上 index 去遍历数组时，本质上是使用 <code>obj[属性名]</code>  的方式去遍历的，数组里它的属性名默认是从 0 开始增长的</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>当我我们使用 <code>Object.keys()</code>  方法去获取一个数组的值时，实际上它只会返回从 0 开始的属性名组成的新数组。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>arr<span class="token punctuation">[</span><span class="token string">'5'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 6</span></pre></td></tr><tr><td data-num="4"></td><td><pre>arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 8 </span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3, 4, 5, 6, &lt;1 empty item>, 20 ]</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">let</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['0', '1', '2', '3', '4', '5', '7']</span></pre></td></tr></table></figure><p>当我们使用 [] 去获取对象属性的值时，实际上 [] 上的内容都会被强制转换成字符串的形式。也就是说 [ 7 ] 等价于 [ '7' ]。</p><h2 id="for-in-遍历"><a class="anchor" href="#for-in-遍历">#</a> for in 遍历</h2><p>使用 for in 适合用于遍历一个对象，但它效率极低。因为它不仅会遍历对象里的属性，而且还会延着原型链一直遍历所有原型的属性。但是由于原型上属性一般都是不可枚举的，所以通常不会被它枚举出来。但是若你给原型对象配置了一个可以枚举的属性，它就会将它枚举出来。遍历对象的属性都是随机的，根据引擎的不同其输出的顺序也不同</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    age<span class="token operator">:</span><span class="token number">18</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">// name age</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 给原型对象添加一个可枚举属性</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token comment">//name age sex   它将 sex 也遍历出来了</span></pre></td></tr></table></figure><h2 id="for-of"><a class="anchor" href="#for-of">#</a> for of</h2><p>for of 用于遍历一个带有<strong>迭代器</strong>的对象。而通常内置的对象都会有一个迭代器供其使用。而我们自定的对象除非我们给它手动添加迭代器，否则是无法使用 for of 遍历的。</p><p><img data-src="https://i.loli.net/2021/11/11/hYeG67q84KaZWAr.png" alt="数组的迭代器" /></p><h2 id="foreach"><a class="anchor" href="#foreach">#</a> forEach</h2><p><code>forEach</code>  是数组内置的一个遍历方法，它的是个高效的数组内置的遍历方法。 <code>forEach</code>  不会直接改变调用它的对象，但是那个对象可能会被  <code>callback</code>  函数改变</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="http://asuhe.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础(三)</title>
    <link href="http://asuhe.fun/2021/11/11/2021-11-11-VUE%E5%9F%BA%E7%A1%80(%E4%B8%89)/"/>
    <id>http://asuhe.fun/2021/11/11/2021-11-11-VUE%E5%9F%BA%E7%A1%80(%E4%B8%89)/</id>
    <published>2021-11-11T12:45:49.000Z</published>
    <updated>2021-11-18T13:04:41.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="组件间通信"><a class="anchor" href="#组件间通信">#</a> 组件间通信</h2><h3 id="props"><a class="anchor" href="#props">#</a> props</h3><p>props 组件是组件通信最常用最简单的方式。它<strong>适用于父子组件之间进行通信</strong>。父组件可以给子组件传递函数数据和非函数数据，当我们给子组件传递一个<strong>非函数数据通常给子组件传递的是一个父组件配置对象里的一个属性，而不是具体的属性值</strong>。子组件拿到了这个属性就是拿到了它的引用，从而可以开始操作属性值。当我们传递非函数数据时，本质上就是父组件给子组件传递数据，以供子组件使用。</p><p>当我们给子组件传递的是一个函数数据而时，本质上就是父组件想要得到子组件中收集来的数据，子组件通过给父组件传递过来的函数传递实参的方式，将收集到的数据给父组件。</p><p>使用 props 方法通信主要是运用在父子（嵌套）关系里，若想给兄弟组件传递数据就必须经过组件的共同祖先来中转再传递给兄弟组件，十分麻烦。它能够让父组件数据传递给子组件的原因是因为，站在父组件这个层级，父组件能够看到子组件，而子组件看上层组件是看不见的。从我们拆分的语法也可以很容易理解，当我们引入一个文件时，使用 <code>import </code> 引入文件的那个文件能够清楚地知道自己引用了哪些文件，而对于被引用的文件它其实并不知道自己被谁引用了。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 子组件配置对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 第一种写法</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'传递过来的属性名'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 第二种写法</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    props<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        传递过来的属性名<span class="token operator">:</span>Function  <span class="token comment">// 可以指定传递过来的数据类型，这里指定为 Function</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 第三种写法</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    props<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        传递过来的属性名<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        type<span class="token operator">:</span>Function <span class="token comment">// 指定数据类型</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            required<span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// 指定必须传递</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            defaulte<span class="token operator">:</span>value <span class="token comment">// 指定如果没传数据，默认数据的 value</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        </pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="自定义事件"><a class="anchor" href="#自定义事件">#</a> 自定义事件</h3><p>自定义事件通信类似于 <code>props</code>  中父组件给子组件传递函数数据。自己定义事件和自定义回调函数，和系统事件触发相比。我们自己可以定义无数个事件类型，而系统事件类型是固定的；在系统事件的回调函数中，回调函数是由系统调用的，在自定义事件中回调函数是我们自己使用 <code>$emit</code>  函数触发的。</p><p>自定义事件<strong>专门用于子组件向父组件通信，但不能用于父组件向子组件通信</strong>。在组件的层级结构中，父组件是最顶层的可以看见下层的子组件，所以可以用 <code>$on</code>  来给子组件绑定事件，而子组件位于下层无法使用 <code>$on</code>  来给父组件绑定事件。这就导致了自定义事件这种通信类型无法用于父组件向子组件通信传递数据。总结起来就是：</p><ul><li>接受数据的组件必须能看到预绑定事件的组件对象，才能绑定</li><li>发送数据的组件必须能看到绑定了事件的组件对象，才能触发事件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 父组件 App.vue</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>Add ref<span class="token operator">=</span><span class="token string">"add"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Add<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 挂载后才给子组件绑定事件</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">monted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>add<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'addUser'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">/*....*/</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 给子组件绑定 addUser 事件</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 绑定事件简便写法</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">&lt;</span>Add @addUser<span class="token operator">=</span><span class="token string">"functionName"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Add<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 子组件 Add.vue</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addSome"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token function">addSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        name<span class="token operator">:</span><span class="token string">'Asuhe'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        age<span class="token operator">:</span><span class="token number">18</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'addUser'</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发 addUser 事件</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解绑事件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'EventName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 绑定只能触发一次的事件</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">$once</span><span class="token punctuation">(</span><span class="token string">'EventName'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>子组件和父组件能够使用 <code>$on</code> 、 <code>$emit</code>  等函数是因为，子组件的实例化对象的 <code>__proto__</code> 会顺着原型链往上找到 <code>Vue</code>  方法的 <code>prototype</code> ，在 <code>Vue</code>  这个函数对象的 <code>prototype</code>  中有 <code>$on</code>  这些方法。</p><p><img data-src="https://i.loli.net/2021/11/13/bWnaiXxmFSDBozg.png" alt="原型链查找$on" /></p><h3 id="全局事件总线通信"><a class="anchor" href="#全局事件总线通信">#</a> 全局事件总线通信</h3><p>全局总线通信就是自定义事件通信的升级版，它也是利用原型链查找的特性来构建通信，它可以<strong>适用任何通信场合</strong>。使用全局事件总线通信首先我们要定义一个总线，这个总线是全部组件都可以通过原型链去查找到它，其次这个总线也要有能够使用 <code>$on</code>  和 <code>$emit</code>  函数的权利。只有符合上述两点的对象才能当作总线。根据上述自定义事件原型链，我们可以找到对象 <code>vm</code>  来充当总线。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 在 main.js 中给 vm 的 prototype 添加一个 $bus 属性让其指向 vm 自身</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vm<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 数据代理前就挂载总线</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//App 组件中让 $bus 绑定事件</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'Event_name'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 子组件中触发 $bus 上的事件</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'Event_name'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>通过原型链的查找， <code>$bus</code>  →  <code>vm</code>  和  <code>vm.__proto__</code>  →  <code>Vue.prototype</code>  的环形查找，就可以使全局事件总线达到所有的组件对象都能找到它和可以调用 <code>$on</code>  和 <code>$emit</code>  的条件。</p><p><img data-src="https://i.loli.net/2021/11/15/sCBtA2KWqNIYGy1.png" alt="全局事件总线" /></p><p>完成全局事件总线的设置后，我们只需要将自定义事件绑定在全局事件总线中。在接收数据的组件中，获取到总线然后绑定事件，传入自己定义的回调函数。在发送数据的组件中，获取到总线然后触发事件，传入需要发送的数据。</p><p><img data-src="https://i.loli.net/2021/11/15/kfdGEg4oN5ev7Cc.png" alt="兄弟组件通信" /></p><h3 id="消息订阅和发布"><a class="anchor" href="#消息订阅和发布">#</a> 消息订阅和发布</h3><p>这种通信方式是通过使用第三方插件<a href="https://github.com/mroderick/PubSubJS"> <code>PubSubJS</code> </a> 的方式来达到通信目的。其使用方法类似于全局事件总线。适用于任何组件之间进行通信，但是互相通信的组件之间都需要分别引入该插件</p><p><strong>接收数据的组件订阅事件源 (类似 <code>$emit</code> )，发送数据的组件绑定事件源 (类似 <code>$on</code> )。</strong></p><h3 id="slot插槽"><a class="anchor" href="#slot插槽">#</a> slot 插槽</h3><p>当一个组件会被多次使用，且里面大部分内容不变仅有非常少部分的结构改变时，可以使用 slot 插槽，将其理解为占位符。该种通信方式适用于父组件给子组件传递数据，但它与其它通信不同的是，它可以传递结构给子组件，子组件中的 <code>slot</code>  标签本质上就是一个占位符。若父组件给其传递 <code>template</code>  则使用父组件传递过来的 <code>template</code> ，否则使用默认定义的 <code>template</code> 。插槽又分为默认插槽、具名插槽和作用域插槽。</p><p>默认插槽约定成俗只能有一个，具名插槽就是在默认插槽的基础上加上 <code>name</code>  属性唯一标识这个插槽，这样父组件在传递数据的时候可以精准传递到指定的插槽中。</p><p>作用域插槽中子组件的 slot 可以通过 属性传递值给父组件，然后父组件可以根据不同需求改变这个 slot 内部的显示结构，把子组件的值，传给父组件固定的区域进行操作。父组件的数据是给子组件展示的。子组件展示过程当中，数据的结构由父组件决定的。</p><p>默认插槽和具名插槽</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 子组件放置插槽</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"asu"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 父组件传递数据</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">&lt;</span>button<span class="token operator">></span>点击<span class="token operator">&lt;</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"asu"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://asuhe.fun"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr></table></figure><p>作用域插槽</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 父组件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"&#123;todo,index&#125;"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"todo.isOver"</span> style<span class="token operator">=</span><span class="token string">"color:hotpink"</span><span class="token operator">></span>√ <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">0</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token comment">// 父组件控制子组件的样式</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 子组件</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>slot <span class="token operator">:</span>todo<span class="token operator">=</span><span class="token string">"todo"</span> <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">1</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr></table></figure><h3 id="vuex通信"><a class="anchor" href="#vuex通信">#</a> Vuex 通信</h3><p>vuex 是一个 vue 官方推出的状态管理插件。它采用集中式存储管理应用中所有组件的状态，并以相应的规则保证状态可以以一种可预测的方式发生变化。我们可以将它认为是一种组件间通信的方式，** 它适用于任何组件间通信。** 它能够对应用中多个给组件共享的状态（数据）进行集中式的管理（读写）。</p><p>在以往当有多个视图（组件）依赖统一个状态时，或者说来自不同视图的行为需要变更同一状态，从前我们都是将数据以及操作定义在父组件，将数据以及操作数据的行为传递给各个需要使用这些数据和行为的子组件（有时可能需要多级传递）。这种方式去管理状态，当应用比较复杂时传递逻辑就会逐渐变得复杂，且代码后期维护也会变得更加困难，为了解决这个问题所以就出现了 Vuex。Vuex 就类似于一个数据管理的仓库，它存储着数据所有关于数据的操作都定义在它内部，当需要使用数据时仅需调用它提供的接口即可，这就是集中式管理状态。</p><h4 id="vuex的五个核心概念"><a class="anchor" href="#vuex的五个核心概念">#</a> Vuex 的五个核心概念</h4><ul><li>state：代表数据的初始状态，本质上就是包含多个属性的对象，属性的值只能是数据，不能是函数这样的东西</li><li>getters：代表计算属性数据，是一个包含 n 个计算属性方法的对象</li><li>actions：代表用户行为，是一个包含多个方法的对象，方法里面可以进行 for、if 等等判断操作。<strong>作为对用户提供操作数据的接口</strong></li><li>mutations：代表数据操作，是一个包含多个方法的对象，方法里面只能进行纯粹的数据操作不能进行 if 等判断操作，<strong>作为 actions 操作数据的接口</strong></li><li>Modules：代表事件处理，用于处理事件。</li></ul><h4 id="基本使用步骤"><a class="anchor" href="#基本使用步骤">#</a> 基本使用步骤</h4><ul><li>引入 vuex 并声明</li><li>向外暴露一个 Store 对象</li><li>将暴露出去的 Store 对象引入到实例化 Vue 的配置对象当中使用，Vue.use 全局注册</li><li>在 store 对象中定义好五个核心概念</li></ul><p><img data-src="https://i.loli.net/2021/11/18/hzjoT9EBHpgZ2V4.png" alt="Vuex作用原理" /></p><p><strong>所有从 state 里取出的数据都应该放在 computed 中，根据 state 中的数据变化而变化。若放在 data 中则会导致只能拿到初始的数据。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础(二)</title>
    <link href="http://asuhe.fun/2021/11/09/2021-11-09-VUE%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
    <id>http://asuhe.fun/2021/11/09/2021-11-09-VUE%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</id>
    <published>2021-11-09T14:53:35.000Z</published>
    <updated>2021-11-13T07:16:25.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue的生命周期"><a class="anchor" href="#vue的生命周期">#</a> Vue 的生命周期</h2><p>Vue 总共有 11 个生命周期，下文只介绍 8 个生命周期</p><p>根据官网给的图可以大致将 Vue 的生命周期分为四个阶段：初始化阶段、挂载阶段、更新阶段、销毁阶段。而每个阶段又可以分为前、后两个阶段。</p><p><img data-src="https://i.loli.net/2021/11/09/VJlqy2KYobWscwC.png" alt="vue生命周期" /></p><h3 id="初始化阶段"><a class="anchor" href="#初始化阶段">#</a> 初始化阶段</h3><p>beforeCreate () 钩子可以让我们在初始化之前进行一些操作。在这个阶段，<strong>数据还没有被代理到我们创建的实例中</strong>，所以此时我们无法获取 data 里的数据。</p><p>created () 钩子可以让我们在初始化完成时进行一些操作。在这个阶段，<strong>数据完成了代理</strong>，此时我们可以获取 data 中的数据。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            msg<span class="token operator">:</span><span class="token string">'asuhe'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时数据还未被代理无法获取 msg 属性的值，输出 undefined</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据已经被代理，输出 asuhe</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="挂载阶段"><a class="anchor" href="#挂载阶段">#</a> 挂载阶段</h3><p>beforeMount () 钩子可以让我们在 DOM 实际渲染到页面前进行一些操作，<strong>这时挂载点的数据已经被渲染好了，但还没有实际插入页面，我们无法获取到 DOM 节点。</strong></p><p>mounted () 钩子可以让我们的在 DOM 实际渲染到页面后进行一些操作，** 此时 DOM 节点已经挂载，我们可以获取到 DOM 节点。** 通常这时我们会向服务器发送请求获得数据、挂载事件等等</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">"pp"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">beforMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pp<span class="token punctuation">)</span> <span class="token comment">//undefined</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pp<span class="token punctuation">)</span> <span class="token comment">//&lt;p ref="pp">&lt;/p></span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="更新阶段"><a class="anchor" href="#更新阶段">#</a> 更新阶段</h3><p>当数据更新的时候，data 配置项里的数据是马上更新的，但页面上的数据并不是能马上更新。所以有 beforeUpdate () 和 updated () 这两个钩子供我们在页面数据更新前后进行操作。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            isOk<span class="token operator">:</span><span class="token boolean">true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">beforUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pp<span class="token punctuation">)</span> <span class="token comment">// 输出空</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pp<span class="token punctuation">)</span> <span class="token comment">//&lt;p ref="pp">&lt;/p></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="销毁阶段"><a class="anchor" href="#销毁阶段">#</a> 销毁阶段</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">"pp"</span> v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">0</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"destroy"</span><span class="token operator">></span>点击销毁实例<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            isShow<span class="token operator">:</span><span class="token boolean">true</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里触发两个销毁阶段的钩子，同步回调</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token comment">// 最后执行</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'正在清理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            </pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 销毁阶段的两个钩子</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token comment">// 销毁阶段进行清理工作</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'销毁了定时器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'销毁完毕'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// 点击销毁按钮后输出顺序是：销毁了定时器 销毁完毕 正在清理</span></pre></td></tr></table></figure><h2 id="自定义指令"><a class="anchor" href="#自定义指令">#</a> 自定义指令</h2><p>自定义指令分为定义全局指令和局部指令，全局自定义指令在任何一个 Vue 实例中都可以使用，而局部自定义指令只能在特定的 Vue 实例中使用</p><h3 id="全局自定义指令"><a class="anchor" href="#全局自定义指令">#</a> 全局自定义指令</h3><p>定义全局指令</p><p>参数： 1、指令名称（不包含 v- 只能是全小写） 2、回调函数</p><p>（参数 1 使用这个指令的那个节点，2 这个指令使用的表达式的值以及表达式的集合）</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'upper'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span>bindings</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// console.log(node,bindings)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> bindings<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="局部自定义指令"><a class="anchor" href="#局部自定义指令">#</a> 局部自定义指令</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    directives<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">upper</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span>bindings</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            </pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="自定义过滤器"><a class="anchor" href="#自定义过滤器">#</a> 自定义过滤器</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'timeFormat'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>format<span class="token operator">=</span><span class="token string">'YYYY-MM-DD hh:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">moment</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            timeNow<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>const 和 Object.freeze()</title>
    <link href="http://asuhe.fun/2021/11/08/2021-11-08-const-%E5%92%8C-Object.freeze()/"/>
    <id>http://asuhe.fun/2021/11/08/2021-11-08-const-%E5%92%8C-Object.freeze()/</id>
    <published>2021-11-08T12:12:48.000Z</published>
    <updated>2021-11-08T12:26:29.306Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>const 关键字是用来声明一个常量的，它可以使一个<strong>变量引用</strong>不能被改变，而且在定义之初就要赋予初值，不然会报语法错误。这个变量如果是数组或者对象，则它里面的内容其实是可以修改的。</p><p>而 Object.freeze () 方法是冻结了一个对象里面<strong>属性的引用</strong>，对象的属性值不能改变，但如果对象的属性值是另一个数组或对象，则这个属性值的内部依然可以修改。所以 Object.freeze () 实际上是一个<strong>浅冻结</strong></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    address<span class="token operator">:</span><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">'asuhe'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token string">'asuka'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18</span></pre></td></tr><tr><td data-num="10"></td><td><pre>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span></pre></td></tr><tr><td data-num="12"></td><td><pre>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20</span></pre></td></tr><tr><td data-num="18"></td><td><pre>obj<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 修改失败，但不报错</span></pre></td></tr><tr><td data-num="19"></td><td><pre>obj<span class="token punctuation">.</span>address<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'sphinx'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'sphinx' 'asuhka'</span></pre></td></tr></table></figure><p>参考资料：</p><p>[<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzMxMjQwNTgvb2JqZWN0LWZyZWV6ZS12cy1jb25zdA==">Object.freeze() vs const</span>](<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzMxMjQwNTgvb2JqZWN0LWZyZWV6ZS12cy1jb25zdA==">https://stackoverflow.com/questions/33124058/object-freeze-vs-const</span>)</p><p><span class="exturl" data-url="aHR0cHM6Ly9hbGxpZ2F0b3IuaW8vanMvY29uc3QtdnMtb2JqLWZyZWV6ZS8=">const vs Object.freeze() in JavaScript</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="http://asuhe.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础(一)</title>
    <link href="http://asuhe.fun/2021/11/08/2021-11-08-VUE%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>http://asuhe.fun/2021/11/08/2021-11-08-VUE%E5%9F%BA%E7%A1%80(%E4%B8%80)/</id>
    <published>2021-11-07T23:54:23.000Z</published>
    <updated>2021-11-13T07:11:44.611Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue的数据代理原理"><a class="anchor" href="#vue的数据代理原理">#</a> VUE 的数据代理原理</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">0</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 最简单的 Vue 对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    data<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        msg<span class="token operator">:</span><span class="token string">'I love you，asuka'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>我们都知道当我们使用模板语法去输出 msg 时并不是直接输出 data 的 msg，而是经过 vm 这层代理输出的。</p><p>我们在模板中输出的所有数据、方法都是经过 vm 代理的，而不是直接使用配置对象中东西。同样地，当我们修改 msg 或者方法时，我们修改的也是 data 、methods 中的东西。而不是 vm 上挂载的，修改结果将直接影响到配置对象中的值。</p><p>那么这种数据代理是如何做到的呢，答案就是 Object.defineProperty () 方法。</p><h3 id="objectdefineproperty"><a class="anchor" href="#objectdefineproperty">#</a> Object.defineProperty()</h3><p>这个方法可以添加或修改一个属性，将其变为<strong>响应式属性</strong>。什么叫响应式属性呢，就是随着你源属性值的变化。它的属性值也跟随着变化。举个简单的例子</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    firstName<span class="token operator">:</span><span class="token string">'zhang'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    lastName<span class="token operator">:</span><span class="token string">'san'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    fullName<span class="token operator">:</span><span class="token string">'zhang-san'</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token comment">//zhang-san</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>obj<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">'li'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token comment">//zhang-san</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 我们改变 firstName, 合理的是输出是 li-san。但是输出的依然是 zhang-san，也就是说 fullName 没有自动跟随 firstName 变化</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 如果我们将 fullName 变成响应式属性，那么上述需求就额能实现</span></pre></td></tr><tr><td data-num="13"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'fullName'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 每次输出 fullName 属性时，get 函数就会被调用</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 每次修改 fullName 属性时，set 函数就会传入修改后的新值，然后被调用</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">let</span> arr <span class="token operator">=</span> newVal<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//zhang-san</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>obj<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">'li'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//li-san</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>obj<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'xiao-xiangxiang'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//xiao</span></pre></td></tr><tr><td data-num="30"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//xiangxiang</span></pre></td></tr></table></figure><p>实际上我们可以 set 和 get 函数上做任何我们想做的事情。根据这个特性我们可以想到 vm 是如何做数据代理的</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 模拟数据代理</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">'asuka'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>msg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        data<span class="token punctuation">.</span>msg <span class="token operator">=</span> newVal<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>我们可以看到 vm 原本就是个空对象，但是我们使用了 Object.defineProperty () 方法后，它就增添了一个属性 <code>msg</code> ，每当这个 <code>msg</code>  被输出时就会自动调用 <code>get</code>  函数，被修改时就会自动调用 <code>set</code>  函数</p><p>当我们只设置 get 函数进行操作时在 vue 中实际上就是单向数据绑定基础，而我们同时设置好 get 和 set 函数时在 vue 中就变成了双向数据绑定的基础</p><h2 id="computed和watch"><a class="anchor" href="#computed和watch">#</a> computed 和 watch</h2><h3 id="computed"><a class="anchor" href="#computed">#</a> computed</h3><p>我们把上例中 <code>obj</code>  变量拿过来，在这个变量中我们定义了 <code>fullName</code>  属性。实际上这个属性是由 <code>firstName</code>  和 <code>lastName</code>  这两个源头属性组合而成的。既然它是由其它属性组合而成的，那么我们就可以在配置对象的 data 中省略它的定义，直接在 vue 的模板中动态生成。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">&lt;!-- 第一种方法 直接使用字符串拼接它 --></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token comment"></span> + '-' + <span class="token comment"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">&lt;!-- 第二种方法 用函数调用拼接，本质上和拼接字符串是一样的 --></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>getFullName()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            firstName<span class="token operator">:</span><span class="token string">'zhang'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            lastName<span class="token operator">:</span><span class="token string">'san'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    methods<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firsName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName</pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>当我们使用字符串拼接它有一个很大的缺点就是，一旦数据多了起来。拼接字符串这种方法维护起来十分麻烦。而在 vue 它提供了一种计算属性的方式让我们可以更加高效地得到这个由其它属性组合而来的属性。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">&lt;!-- 第三种方法 计算属性 --></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token comment"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            firstName<span class="token operator">:</span><span class="token string">'zhang'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            lastName<span class="token operator">:</span><span class="token string">'san'</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 计算出 fullName，这个 fullName 可以不预先定义，会被动态创建</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    computed<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        fullName<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 类似 Object.defineProperty ()</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token comment">/* code */</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 当 computed 只使用 get 函数时，可以使用简写形式</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>表面上看起来使用<strong> computed</strong> 去计算一个属性和第一种、第二种方法比起来貌似并没有什么区别，但是实际上用计算属性的方式去获取一个全新的响应式属性效率更高，因为它会被缓存起来。当 <code>fullName</code>  被多次使用时，它将会直接从缓存中拿出来使用不会多次使用 <code>this.firstName + '-' + this.lastName</code>  去拼接字符串。</p><p>由上我们可以总结出 computed 的特性：</p><ul><li>可以动态创建出一个属性，不用预先定义属性</li><li>创建出来的这个属性会被缓存，当属性的值不改变时使用该属性将会直接从缓存中拿出，提高效率</li></ul><h3 id="watch"><a class="anchor" href="#watch">#</a> watch</h3><p>除了上面三种方法来获得 <code>fullName</code>  属性我还有第四种方法得到 <code>fullName</code> 。那就是使用 <code>watch</code>  监视属性。使用监视的前提是这个属性必须预先存在，也就是说我们必须在 data 里预先就有需要监视的属性，然后才能去对它使用 <code>watch</code>  监视。这是和<strong> computed</strong> 的一个重要区别。继续使用上面的例子，我们只需要在 data 后面在跟一个 watch 属性</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        firstName<span class="token operator">:</span><span class="token string">'zhang'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        lastName<span class="token operator">:</span><span class="token string">'san'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        fullName<span class="token operator">:</span><span class="token string">''</span> <span class="token comment">// 使用 watch 时 fullName 必须预先存在</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>watch<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">// 对象内放置被监视的属性</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    firstName<span class="token operator">:</span><span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 这里我们使用 handler 函数回调，handler 是固定写法不可更改，hander 会传入被监视属性的新值和旧值两个参数</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token comment">// 只有当 firstName 这个属性发生变化时，handler 回调才会执行</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> newVal <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        immediat<span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// 配置了 immediate 无论被监视属性是否变化都强制执行一次 handler 回调</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 第二种 watch 写法  在 Vue () 的外部使用 $watch 方法监视 lastName 属性</span></pre></td></tr><tr><td data-num="19"></td><td><pre>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'lastName'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> newVal<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>通过上面例子我们可以体会到 watch 的特点：</p><ul><li>被监视的属性必须预先存在</li><li>当被监视的属性不发生变化时，handler 函数其实不会被调用</li><li>可以使用 immediat:true 强制执行 handler 回调</li></ul><h3 id="computed-和-watch-最重要的区别"><a class="anchor" href="#computed-和-watch-最重要的区别">#</a> computed 和 watch 最重要的区别</h3><p>实际上 computed 和 watch 有一个最重要的区别就是，<strong>computed 里面只能获取到同步的数据，而不能获取到异步的数据。而 watch 里面同步异步的数据都可以获取到。</strong></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">4</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token comment">// 1s 后这个 fullName 可以被渲染出来 输出：嘿嘿</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>watch<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    firstName<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token comment">// 这个对象是一个配置对象</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 当数据发生改变的时候会自动调用 handler 回调</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            </pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token comment">// 异步修改数据</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'嘿嘿'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">5</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token comment">// 1s 后这个 fullName 不能被渲染出来 fullName 的值为 null, 无法得到字符串 哈哈</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>computed<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 计算属性的完整写法</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    fullName<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token comment">// 异步修改数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                n <span class="token operator">=</span> <span class="token string">'哈哈'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">return</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>         <span class="token comment">// 当计算属性的数据能被修改时候使用（表单类元素在双向绑定计算属性值）</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">/* code */</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="深度监视"><a class="anchor" href="#深度监视">#</a> 深度监视</h3><p>当我们使用 watch 的时候如果不指定为深度监视那么它就为一般监视。</p><p>一般监视可以用 <code>const</code>  理解，它只监视本身这个变量的引用，并不关心引用内部如何变化。如果我们使用一般监视去监视一个对象，那么它就会像浅拷贝一样，只关键浅层键值的变化，如果浅层键值又是一个对象，那么这个对象里面如何变化它是不会监视到的。</p><p>当我们使用深度监视的时候，就类似于深拷贝。它里面再套一层对象，它也能监测到。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        comment<span class="token operator">:</span><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'asuhe'</span><span class="token punctuation">,</span>content<span class="token operator">:</span><span class="token string">'666'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'asuka'</span><span class="token punctuation">,</span>content<span class="token operator">:</span><span class="token string">'2333'</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>watch<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    comment<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 不开启深度监视时，只有 comment 数组里面的对象整个改变才能被监视到</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        deep<span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// 开启深度监视，comment 里面的对象内的数据 (id、) 改变也能监视到</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token comment">/*....*/</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>TypeError:this.getOptions is not a function</title>
    <link href="http://asuhe.fun/2021/11/07/2021-11-07-webpack%E4%B8%AD%E6%89%93%E5%8C%85css%E7%9A%84%E5%9D%91/"/>
    <id>http://asuhe.fun/2021/11/07/2021-11-07-webpack%E4%B8%AD%E6%89%93%E5%8C%85css%E7%9A%84%E5%9D%91/</id>
    <published>2021-11-07T03:29:37.000Z</published>
    <updated>2021-11-07T14:19:39.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="webpack-中打包-css-less-sass文件的坑"><a class="anchor" href="#webpack-中打包-css-less-sass文件的坑">#</a> webpack 中打包 css、less、sass 文件的坑</h2><p>vscode 用 import 语法引入 css 文件不显示 css 路径：安装一个路径显示插件即可，推荐使用<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWlvbnV0dm1pLnBhdGgtYXV0b2NvbXBsZXRl"> Path Autocomplete</span> 即可解决</p><p>原本安装好 css-loader 准备用 webpack 打包 css 文件时出现一堆底层报错说 <code>TypeError: this.getOptions is not a function</code></p><pre><code class="language-sh">ERROR in ./src/css/index.cssModule build failed (from ./node_modules/style-loader/dist/cjs.js):TypeError: this.getOptions is not a function    at Object.loader (C:\Users\12071\Desktop\练习\webpack-test\node_modules\style-loader\dist\index.js:19:24) @ ./src/js/app.js 8:0-25</code></pre><p>原因：loader 版本不匹配</p><p>解决方案：安装配套版本的 style-loader 和 css-loader</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>//安装2.0版本的style-loader</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> i style-loader@2.0.0</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>//安装5.2.7版本的css-loader</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">npm</span> i css-loader@5.2.7</pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjg1ODAyNzMvdHlwZS1lcnJvci10aGlzLWdldG9wdGlvbnMtaXMtbm90LWEtZnVuY3Rpb24tZm9yLXN0eWxlLWxvYWRlcg==">stackoverflow YYDS</span></p><p>less 文件无法打包</p><p>原因：less-loader 版本过高</p><p>解决方案：安装低于 5.0 版本的 less-loader</p><pre><code class="language-sh">npm install less-loader@5.0 -D</code></pre><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjY3OTIzNjgvbGVzcy1maWxlcy1ub3QtZ2V0dGluZy1waWNrZWQtdXAtYnktbGVzcy1sb2FkZXIvNjY3OTMwMTgjNjY3OTMwMTg=">stackoverflow YYDS</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="报错处理" scheme="http://asuhe.fun/categories/%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    
    
    <category term="tools" scheme="http://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出Promise</title>
    <link href="http://asuhe.fun/2021/11/05/2021-11-05-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPromise/"/>
    <id>http://asuhe.fun/2021/11/05/2021-11-05-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPromise/</id>
    <published>2021-11-05T00:26:46.000Z</published>
    <updated>2021-11-09T00:36:57.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="同步与异步"><a class="anchor" href="#同步与异步">#</a> 同步与异步</h2><p>在学习 Promise 之前我们需要先明白一些基础知识，首先我们要知道什么叫实例对象，什么叫函数对象。所谓实例对象就是我们使用 new 关键字创建出来的对象，称为实例对象，一般简称对象。而函数对象是指当我们把一个函数当作对象使用时，此时我们称这个函数为函数对象</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 函数的两种身份：函数、函数对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//ok 当我们用 () 调用函数时，此时函数称为一个函数</span></pre></td></tr><tr><td data-num="7"></td><td><pre>foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// 当我们像这样给函数添加属性或者方法时，此时函数称为一个函数对象</span></pre></td></tr></table></figure><p>按函数的调用者分类我们可以将某些函数称为回调函数，<strong>回调函数就是我们定义的，我们没调用，最终执行了。<strong>最典型的例子就是定时器里我们传入的函数。根据回调函数执行时机的不同，我们又可以将回调函数分为</strong>同步回调函数和异步回调函数</strong>。</p><p>同步回调函数的特点就是<strong>立即执行</strong>，完全执行完了才结束，不会放入回调队列中。<strong>换言之就是它是在主线程上执行的</strong>。例如数组遍历相关的回调函数、Promise 的 excutor 函数</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 输出顺序为: 10 20 30 主线程</span></pre></td></tr></table></figure><p>上述例子中可以明显看到，数组 forEach 方法里的回调函数先于主线程上的 console.log 输出，这表明这个回调函数就是一个同步回调</p><p>与同步回调函数相反，异步回调函数的特点就是<strong>延迟执行</strong>，它会被放入回调队列里，等主线程上的函数都执行完以后将来再根据条件执行。例如定时器上的回调函数、ajax 回调、Promise 的成功 | 失败回调</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 输出顺序为：主线程 hello!</span></pre></td></tr></table></figure><p>即便定时器的延迟设为 0 ，它里面的回调函数依然要等待主线程执行完毕才能执行。这就是一个典型的异步回调</p><p>通过理解同步回调和异步回调的例子，我们可以明白。所谓同步就是绝对的串行执行，只有上一步执行完了下一步才能继续执行。想象这样的一个场景，我们去做饭，电饭煲在煮饭的同时我们可以继续处理我们的菜，我们不必等饭完全煮好了才开始做菜，这样太浪费时间了。这种就是异步执行。如果我们必须等到饭煮好了才开始炒菜之类的，那这种就是同步执行。</p><h2 id="promise"><a class="anchor" href="#promise">#</a> Promise</h2><p>有了上面同步异步的概念以后，接下来我们就可以开始学习 Promise 了。我们先来看看它是什么，官方给的定义是啥。</p><ul><li><p>抽象表达:</p><ul><li>Promise 是 JS 中进行<strong>异步编程</strong>的<strong>新方案</strong> (旧的是谁？--- 纯回调)</li></ul></li><li><p>具体表达:</p></li><li><p>从语法上来说: Promise 是一个构造函数</p></li><li><p>从功能上来说: promise 对象用来封装一个异步操作并可以获取其结果</p></li></ul><p>其实看了上面的表达我们还是不懂什么是 Promise。从异步这个词入手，我们都知道 ajax 就是一个典型的异步操作。那么我们就可以用 Promise 来封装 ajax 请求。那我们为什么非要用 Promise 来封装异步操作，我们用普通的回调函数形式不一样可以吗？这就涉及到回调地狱这个问题，关于 [Promise 的优越性](# 回调地狱 ) 我们后面再谈。首先来明确一些基础的 Promise 知识</p><ul><li>Promise 不是回调，是一个内置的构造函数，是程序员自己 new 调用的。</li><li>new Promise 的时候，要传入一个回调函数，它是同步的回调，会立即在主线程上执行，它被称为 executor 函数</li><li>每一个 Promise 实例都有 3 种状态：初始化 (pending)、成功 (fulfilled)、失败 (rejected)</li><li>每一个 Promise 实例在刚被 new 出来的那一刻，状态都是初始化 (pending)</li><li>executor 函数会接收到 2 个参数，它们都是函数，分别用形参：resolve、reject 接收<ul><li>调用 resolve 函数会：<ul><li>让 Promise 实例状态变为成功 (fulfilled)</li><li>可以指定成功的 value。</li></ul></li><li>调用 reject 函数会：<ul><li>让 Promise 实例状态变为失败 (rejected)</li><li>可以指定失败的 reason。</li></ul></li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//new 一个实例</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> p  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 根据上面描述这个 Promise 必须传入一个 excutor 函数，而这个 excutor 函数又两个形参也是函数，我们不必定义该两个形参函数，可以直接调用</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//excutor</span></pre></td></tr></table></figure><p>当我们使用一个 Promise 管理异步操作的时候，我们要在 excutor 函数内启动异步任务然后再用它的 then 方法来指定异步任务结束后根据 Promise 实例的状态来调用相应的回调函数。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 用 Promise 封装一个自己的 get 请求 ajax</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">myAjax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>datas</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XHLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatuschange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span> <span class="token comment">// 请求成功将 Promise 状态置为 fulfilled</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'falure'</span><span class="token punctuation">)</span>  <span class="token comment">// 请求失败将 Promise 状态置为 rejected</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            xhr<span class="token punctuation">.</span><span class="token function">opne</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">myAjax</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1/get'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>test<span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token comment">// 为 Promise 实例指定成功与失败的回调函数</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//fulfilled 状态调用</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败1'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//rejected 状态调用</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 一个 promise 指定多个成功 / 失败回调函数，则会依次调用并不会覆盖</span></pre></td></tr><tr><td data-num="26"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token comment">// 为 Promise 实例指定成功与失败的回调函数</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//fulfilled 状态调用</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败2'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//rejected 状态调用</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// 若该次请求失败则依次输出：请求失败 1 请求失败 2</span></pre></td></tr></table></figure><ul><li>关于状态的注意点：<ul><li>三个状态:<ul><li>pending: 未确定的 ------ 初始状态</li><li>fulfilled: 成功的 ------ 调用 resolve () 后的状态</li><li>rejected: 失败的 ------- 调用 reject () 后的状态</li></ul></li><li>两种状态改变<ul><li>pending ==&gt; fulfilled</li><li>pending ==&gt; rejected</li></ul></li><li>状态只能改变一次！</li></ul></li></ul><h2 id="promise基本方法"><a class="anchor" href="#promise基本方法">#</a> Promise 基本方法</h2><h3 id="promise构造函数-new-promise-executor"><a class="anchor" href="#promise构造函数-new-promise-executor">#</a> Promise 构造函数: new Promise (executor) {}</h3><ul><li>executor 函数：是同步执行的，(resolve, reject) =&gt; {}</li><li>resolve 函数：调用 resolve 将 Promise 实例内部状态改为成功 (fulfilled)。</li><li>reject 函数：调用 reject 将 Promise 实例内部状态改为失败 (rejected)。</li><li>说明: excutor 函数会在 Promise 内部立即同步调用，异步代码放在 excutor 函数中。</li></ul><h3 id="promiseprototypethen方法-promise实例thenonfulfilledonrejected"><a class="anchor" href="#promiseprototypethen方法-promise实例thenonfulfilledonrejected">#</a> Promise.prototype.then 方法: Promise 实例.then (onFulfilled,onRejected)</h3><ul><li>onFulfilled: 成功的回调函数 (value) =&gt; {}</li><li>onRejected: 失败的回调函数 (reason) =&gt; {}</li><li>特别注意 (难点)：then 方法会返回一个新的 Promise 实例对象</li><li>如果上一个回调返回的是一个非 promise 对象，则这个新的 Promise 实例状态为 fulfilled</li><li>当上一个回调返回一个 Promise 对象则该新返回的 Promise 对象的状态与回调返回的 Promise 对象一致</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 返回非 Promise 值</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise<span class="token punctuation">.</span>reject</span><span class="token punctuation">(</span><span class="token number">996</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//x 状态为 fulfilled, 输出成功了</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> z <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 返回 Promise 值</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise<span class="token punctuation">.</span>reject</span><span class="token punctuation">(</span><span class="token number">996</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>z<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token comment">//z 状态为 pending , 不调用回调函数</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="promiseprototypecatch方法-promise实例catchonrejected"><a class="anchor" href="#promiseprototypecatch方法-promise实例catchonrejected">#</a> Promise.prototype.catch 方法: Promise 实例.catch (onRejected)</h3><ul><li>onRejected: 失败的回调函数 (reason) =&gt; {}</li><li>说明: catch 方法是 then 方法的语法糖，相当于: then (undefined, onRejected)</li></ul><h3 id="promiseresolve方法-promiseresolvevalue"><a class="anchor" href="#promiseresolve方法-promiseresolvevalue">#</a> Promise.resolve 方法: Promise.resolve (value)</h3><ul><li>说明：用于快速返回一个状态为 fulfilled 或 rejected 的 Promise 实例对象</li><li>备注：value 的值可能是：(1) 非 Promise 值  (2) Promise 值</li><li>当传入的值为非 Promise 值时或空值时，直接返回一个 fulfilled 状态的 Promise 实例</li><li>当传入的值为 Promise 时，返回的 Promise 状态跟随传入的 Promise</li></ul><h3 id="promisereject方法-promisereject方法reason"><a class="anchor" href="#promisereject方法-promisereject方法reason">#</a> Promise.reject 方法: Promise.reject 方法 (reason)</h3><ul><li>说明：用于快速返回一个状态必为 rejected 的 Promise 实例对象</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> x <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">996</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span> <span class="token comment">// 调用该函数 输出：失败了 996</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="promiseall方法-promiseallpromisearr"><a class="anchor" href="#promiseall方法-promiseallpromisearr">#</a> Promise.all 方法: Promise.all (promiseArr)</h3><ul><li>promiseArr: 包含 n 个 Promise 实例的数组</li><li>说明：返回一个新的 Promise 实例，只有所有的 promise 都成功才成功，只要有一个失败了就直接失败。</li><li>若没有失败的值，且没有 pending 的值即全都成功返回的新 Promise 状态为 fulfilled</li><li>若没有失败的值，但存在 pending 的值即数组内仅有 pending 和 fulfilled 两种值，则返回的新 Promise 状态为 pending</li></ul><h3 id="promiserace方法-promiseracepromisearr"><a class="anchor" href="#promiserace方法-promiseracepromisearr">#</a> Promise.race 方法: Promise.race (promiseArr)</h3><ul><li>promiseArr: 包含 n 个 Promise 实例的数组</li><li>说明：返回一个新的 Promise 实例，成功还是很失败？以最先出结果的 promise 为准。</li><li>若最先出结果的 promise 为 pending 则跳过该 promise</li><li>这也就意味着 race 返回的 Promise 实例仅有 fulfilled 和 rejected 两种状态，不存在 pending 状态的值</li></ul><h2 id="回调地狱"><a class="anchor" href="#回调地狱">#</a> 回调地狱</h2><p>上面我们学习了基本 Promise 使用，但是我们依然没有看出来 Promise 的优越性在哪里。现在我们有这么一个需求，连发三次 Ajax 请求，仅当上次请求成功时才发送下一次请求，若请求失败则中断以后的所有请求。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 用纯回调的方式封装 ajax</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>success<span class="token punctuation">,</span>error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">else</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求出了点问题'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 整理参数</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token operator">+</span><span class="token string">'?'</span><span class="token operator">+</span>str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 传统解决方案，链式连发三个请求</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">sendAjax</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span>page<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>type<span class="token operator">:</span><span class="token string">'video'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token function">sendAjax</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#123;</span>page<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>type<span class="token operator">:</span><span class="token string">'video'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第2次成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token function">sendAjax</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                    <span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                    <span class="token punctuation">&#123;</span>page<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>type<span class="token operator">:</span><span class="token string">'video'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                    <span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第3次成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 回调地狱</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="37"></td><td><pre>                    <span class="token parameter">err</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第3次失败了'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token parameter">err</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第2次失败了'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token parameter">err</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次失败了'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><p>可以看到当我们要进行三次链式的异步请求时，采用纯回调的方式来处理就导致了回调地狱的问题。要对代码进行维护十分困难。而如果我们采用 Promise 去封装异步请求，则可以解决回调地狱的问题</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//Promsie 封装 ajax</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'请求出了点问题'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 整理参数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token operator">+</span><span class="token string">'?'</span><span class="token operator">+</span>str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// 利用 Promise 进行三次链式 ajax 请求</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>page<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第1次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token comment">// 发送第 2 次请求</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>page<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第2次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token comment">// 发送第 3 次请求</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token string">'https://api.apiopen.top/getJoke'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>page<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第3次请求成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">.</span><span class="token function">cathe</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 利用错误穿透进行兜底</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><p>可以明显地对比出来，利用 Promise 进行链式异步操作能清晰地看到调用结构，维护起来相比纯回调方便了很多。这就解决了回调地狱的问题。</p><h2 id="promise的优势"><a class="anchor" href="#promise的优势">#</a> Promise 的优势</h2><ul><li><p>指定回调函数的方式更加灵活:</p><ul><li>旧的：必须在启动异步任务前指定</li><li>Promise: 启动异步任务 =&gt; 返回 promie 对象 =&gt; 给 promise 对象绑定回调函数 (甚至可以在异步任务结束后指定)</li></ul></li><li><p>支持链式调用，可以解决回调地狱问题</p><ul><li>什么是回调地狱：回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调函数执行的条件</li><li>回调地狱的弊病：代码不便于阅读、不便于异常的处理</li><li>一个不是很优秀的解决方案：then 的链式调用</li><li>终极解决方案：async/await（底层实际上依然使用 then 的链式调用）</li></ul></li></ul><h2 id="promise关键问题"><a class="anchor" href="#promise关键问题">#</a> Promise 关键问题</h2><h3 id="如何改变一个promise实例的状态"><a class="anchor" href="#如何改变一个promise实例的状态">#</a> 如何改变一个 Promise 实例的状态？</h3><ul><li>执行 resolve (value): 如果当前是 pending 就会变为 fulfilled</li><li>执行 reject (reason): 如果当前是 pending 就会变为 rejected</li><li>执行器函数 (executor) 抛出异常：如果当前是 pending 就会变为 rejected</li></ul><h3 id="改变promise实例的状态和指定回调函数谁先谁后"><a class="anchor" href="#改变promise实例的状态和指定回调函数谁先谁后">#</a> 改变 Promise 实例的状态和指定回调函数谁先谁后？</h3><ul><li>都有可能，正常情况下是先指定回调再改变状态，但也可以先改状态再指定回调</li><li>如何先改状态再指定回调？<ul><li>延迟一会再调用 then ()</li></ul></li><li>Promise 实例什么时候才能得到数据？<ul><li>如果先指定的回调，那当状态发生改变时，回调函数就会调用，得到数据</li><li>如果先改变的状态，那当指定回调时，回调函数就会调用，得到数据</li></ul></li></ul><h3 id="promise实例then返回的是一个新的promise实例它的值和状态由什么决定"><a class="anchor" href="#promise实例then返回的是一个新的promise实例它的值和状态由什么决定">#</a> Promise 实例.then () 返回的是一个【新的 Promise 实例】，它的值和状态由什么决定？</h3><ul><li>简单表达：由 then () 所指定的回调函数执行的结果决定</li><li>详细表达:<ul><li>如果 then 所指定的回调返回的是非 Promise 值 a:<ul><li>那么【新 Promise 实例】状态为：成功 (fulfilled), 成功的 value 为 a</li></ul></li><li>如果 then 所指定的回调返回的是一个 Promise 实例 p:<ul><li>那么【新 Promise 实例】的状态、值，都与 p 一致</li></ul></li><li>如果 then 所指定的回调抛出异常:<ul><li>那么【新 Promise 实例】状态为 rejected, reason 为抛出的那个异常</li></ul></li></ul></li></ul><h3 id="如何中断promise链"><a class="anchor" href="#如何中断promise链">#</a> 如何中断 promise 链：</h3><ul><li>当使用 promise 的 then 链式调用时，在中间中断，不再调用后面的回调函数。</li><li>办法：在失败的回调函数中返回一个 pendding 状态的 Promise 实例。</li></ul><h3 id="promise错误穿透的原理"><a class="anchor" href="#promise错误穿透的原理">#</a> Promise 错误穿透的原理：</h3><ul><li>当使用 promise 的 then 链式调用时，可以在最后用 catch 指定一个失败的回调，</li><li>前面任何操作出了错误，都会传到最后失败的回调中处理了</li><li>备注：如果不存在 then 的链式调用，就不需要考虑 then 的错误穿透。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">'b'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> reason<span class="token punctuation">&#125;</span><span class="token comment">// 底层帮我们补上的这个失败的回调</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> reason<span class="token punctuation">&#125;</span><span class="token comment">// 底层帮我们补上的这个失败的回调</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> reason<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="async-await"><a class="anchor" href="#async-await">#</a> async &amp; await</h2><ul><li><p>async 修饰的函数</p><p>函数的返回值为 promise 对象</p><p>Promise 实例的结果由 async 函数执行的返回值决定，返回非 Promise 值则返回的 Promise 对象状态为 fulfilled，返回 Promise 则状态跟随返回的 Promise，但是不能返回一个 rejected 的 Promise，否则报错</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// 输出 fulfilled</span></pre></td></tr><tr><td data-num="3"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 执行成功回调</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">996</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// 输出 pending , 同时也说明了 Promise.reject () 是个异步函数</span></pre></td></tr><tr><td data-num="10"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span><span class="token comment">// 执行失败回调</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="17"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">)</span><span class="token comment">// 不调用任何一个，说明最后状态为 pending</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// 输出 pending , 同时也说明了 Promise.resolve () 是个异步函数</span></pre></td></tr><tr><td data-num="24"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 执行成功回调</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token parameter">reason</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span>reason<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><p>await 表达式</p><p>await 右侧的表达式一般为 Promise 实例对象，但也可以是其它的值</p><p>(1). 如果表达式是 Promise 实例对象，await 后的返回值是 promise 成功的值</p><p>(2). 如果表达式是其它值，直接将此值作为 await 的返回值</p></li><li><p>注意:</p><p>await 必须写在 async 函数中，但 async 函数中可以没有 await</p><p>如果 await 的 Promise 实例对象失败了，就会抛出异常，需要通过 try...catch 来捕获处理</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok了'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'中断'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Ok啊'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">const</span> x1 <span class="token operator">=</span> <span class="token keyword">await</span> p1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：1 ok 了</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">const</span> x2 <span class="token operator">=</span> <span class="token keyword">await</span> p2<span class="token punctuation">;</span> <span class="token comment">// 该点直接失败转入失败回调 throw error</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">const</span> x3 <span class="token operator">=</span> <span class="token keyword">await</span> p3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span>x3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//catch 接收上面 throw 的 error 输出：中断</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 上面 try 里面的代码被浏览器翻译为</span></pre></td></tr><tr><td data-num="28"></td><td><pre>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> p2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 输出：1 ok 了</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 不写失败回调底层补上了 reason => throw reason</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> p3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="宏任务与微任务"><a class="anchor" href="#宏任务与微任务">#</a> 宏任务与微任务</h3><p>目前为止，除了 Promise 里的成功和失败回调是微任务，其它异步回调都是宏任务</p><p>宏队列:[宏任务 1，宏任务 2.....]</p><p>微队列:[微任务 1，微任务 2.....]</p><p>规则：每次要执行宏队列里的一个任务之前，先看微队列里是否有待执行的微任务</p><p>​      1. 如果有，先执行微任务</p><p>​      2. 如果没有，按照宏队列里任务的顺序，依次执行</p><h2 id="自我检测"><a class="anchor" href="#自我检测">#</a> 自我检测</h2><h3 id="初级版"><a class="anchor" href="#初级版">#</a> 初级版</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//// 代码一</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主线程'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 代码二</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功1'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败2'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// 代码三</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了5'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了3'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了4'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="高级版"><a class="anchor" href="#高级版">#</a> 高级版</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="http://asuhe.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>重绘与回流</title>
    <link href="http://asuhe.fun/2021/11/03/2021-11-03-%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81/"/>
    <id>http://asuhe.fun/2021/11/03/2021-11-03-%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81/</id>
    <published>2021-11-03T13:15:11.000Z</published>
    <updated>2021-11-03T13:16:22.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重绘：样式改变重绘</p><p>回流：DOM 改变回流</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="DOM" scheme="http://asuhe.fun/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>身份认证技术</title>
    <link href="http://asuhe.fun/2021/11/02/2021-11-02-%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/"/>
    <id>http://asuhe.fun/2021/11/02/2021-11-02-%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</id>
    <published>2021-11-02T00:34:25.000Z</published>
    <updated>2021-11-02T01:46:40.406Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="身份认证的由来"><a class="anchor" href="#身份认证的由来">#</a> 身份认证的由来</h2><p>平时我们在网页上进行交互时，例如登入自己的账号进行信息修改，往往需要服务器对我们进行身份的辨别，好让服务器能够拿到专属于我们自己账号的数据并返回给我们。由于 http 协议是无状态的，它并不会对会话进行控制。任何一个 http 请求对服务器来说都是独立的，毫不相干的请求。<a href="/2021/10/28/2021-10-28-http%E5%8D%8F%E8%AE%AE/" title="http协议">http协议</a> 的这种特性就导致了我们需要自己想办法对用户进行识别，于是便有了身份认证技术。</p><p>现在流行的身份认证认证手段主要有三种，分别是：cookie、session 和 JWT。这三种身份认证技术都有各自的适用场景，所以在前端中均有大量使用。下面就让我们深入了解一下这三种技术</p><h2 id="cookie认证"><a class="anchor" href="#cookie认证">#</a> Cookie 认证</h2><p>首先我们要明确什么是 cookie。cookie 实际上就是<strong>一份服务器给浏览器客户端设置的文本信息</strong>。当用户第一次登录进系统时，服务器会给用户设置一个 cookie，后续用户每次发送 http 请求中都会携带 cookie 用于身份识别。</p><p>cookie 信息都携带在请求头中，而且一个 cookie 的大小一般不超过 4KB。</p><p><img data-src="https://i.loli.net/2021/11/02/uvhOaopbYzlVLrm.png" alt="请求头中的cookie" /></p><p>它的内容由<strong>名称、值和一些用于控制有效期、安全性、使用范围的可选属性组成</strong>。不同域名下的 cookie 时各自独立的，不能拿一个网站的 cookie 去另一个网站做身份认证。每当客户端发起请求时，会<strong>自动</strong>把<strong>当前域名下</strong>所有<strong>未过期的</strong> <strong>Cookie</strong> 一同发送到服务器。</p><p>我们可以在浏览器的设置中查看 cookie 的内容</p><p><img data-src="https://i.loli.net/2021/11/02/vXBxOJRNS9u4Pqn.png" alt="某度的一个cookie" /></p><p>因为 cookie 认证是用户单方面认证，用户完全可以自己伪造一个 cookie 发送给服务器来欺骗服务器，这使得 cookie 安全性较低。为了解决 cookie 的这个缺陷，进一步提高系统的安全性，所以又有了 session 机制来辅助身份认证。</p><h2 id="session认证"><a class="anchor" href="#session认证">#</a> Session 认证</h2><p>session 认证即是在服务器上设置一个标识用户的信息，当用户拿 cookie 来认证时，服务器这边根据 cookie 拿出相应的 session 来必对认证。若服务器这边没有对应的 session 则说明该 cookie 是伪造的，拒绝响应。</p><p><img data-src="https://i.loli.net/2021/11/02/K75ZGYXQ6RJMjOC.png" alt="session认证原理" /></p><p>有了 session 就可以防止用户伪造 cookie 登录进系统。进一步提高了安全性。</p><p>Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持 <a href="/2021/10/29/2021-10-29-%E5%90%8C%E6%BA%90%E4%B8%8E%E8%B7%A8%E5%9F%9F/" title="跨域访问">跨域访问</a>，所以，当涉及到前端跨域请求后端接口的时候，<strong>需要做很多额外的配置</strong>，才能实现跨域 Session 认证。</p><p>为了解决这个跨域问题，我们又升级了身份认证技术，采用 JWT 技术可以解决跨域认证的问题。</p><h2 id="jwt"><a class="anchor" href="#jwt">#</a> JWT</h2><p>JWT（英文全称：JSON Web Token）是目前<strong>最流行</strong>的<strong>跨域认证解决方案</strong>。针对跨域问题，JWT 采用 Token 加密字符串来实现身份认证。用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份。</p><p><img data-src="https://i.loli.net/2021/11/02/ZVlX2zeU5kWOug8.png" alt="JWT工作原理" /></p><p>JWT 通常由三部分组成，分别是 Header（头部）、Payload（有效荷载）、Signature（签名）。</p><p>三者之间使用英文的 “.” 分隔，格式如下：</p><pre><code class="language-sh">Header.Payload.Signature</code></pre><p>其中：</p><ul><li><strong>Payload</strong> 部分<strong>才是真正的用户信息</strong>，它是用户信息经过加密之后生成的字符串。</li><li>Header 和 Signature 是<strong>安全性相关</strong>的部分，只是为了保证 Token 的安全性。</li></ul><p><img data-src="https://i.loli.net/2021/11/02/HCj5Ra2xt4MTiDz.png" alt="Payload部分" /></p><p>客户端收到服务器返回的 JWT 之后，通常会将它储存在 <strong>localStorage 或 sessionStorage</strong> 中。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT 的字符串，从而进行身份认证。推荐的做法是<strong>把</strong> <strong>JWT</strong> <strong>放在</strong> <strong>HTTP</strong> <strong>请求头的</strong> <strong>Authorization</strong> <strong>字段中</strong>，格式如下：</p><pre><code>Authorization: Bearer &lt;token字符串&gt;</code></pre><h2 id="三种认证技术的区别与特点"><a class="anchor" href="#三种认证技术的区别与特点">#</a> 三种认证技术的区别与特点</h2><table><thead><tr><th style="text-align:center"><strong>认证技术</strong></th><th style="text-align:center"><strong>工作原理</strong></th><th style="text-align:center"><strong>生命周期</strong></th><th style="text-align:center">适用场景</th></tr></thead><tbody><tr><td style="text-align:center">cookie</td><td style="text-align:center">单向认证</td><td style="text-align:center">未设置 expire 属性的 cookie 关闭浏览器即失效</td><td style="text-align:center">服务器端渲染数据、同源认证</td></tr><tr><td style="text-align:center">session</td><td style="text-align:center">双向认证</td><td style="text-align:center">服务器未清除即一直生效</td><td style="text-align:center">服务器端渲染数据、同源认证</td></tr><tr><td style="text-align:center">JWT</td><td style="text-align:center">密钥认证</td><td style="text-align:center">服务器未更换 secret 就一直生效</td><td style="text-align:center">前后端分离架构、跨域认证</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Git快速上手指北</title>
    <link href="http://asuhe.fun/2021/10/29/2021-10-29-Git%E5%9F%BA%E7%A1%80/"/>
    <id>http://asuhe.fun/2021/10/29/2021-10-29-Git%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-29T11:36:37.000Z</published>
    <updated>2021-10-29T12:40:00.725Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="git基础使用"><a class="anchor" href="#git基础使用">#</a> Git 基础使用</h2><h3 id="用户信息配置"><a class="anchor" href="#用户信息配置">#</a> 用户信息配置</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 设置自己的用户名和邮件地址 将用于记录谁操作了仓库</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> config --global user.name <span class="token string">"Asuhe"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">git</span> config --global user.email <span class="token string">"sphinx@asuhe.fun"</span></pre></td></tr></table></figure><h3 id="配置信息检查"><a class="anchor" href="#配置信息检查">#</a> 配置信息检查</h3><p>通过 git config --global <span class="exturl" data-url="aHR0cDovL3VzZXIubmFtZQ==">user.name</span> 和 git config --global user.email 配置的用户名和邮箱地址，会被写<br />入到 C:/Users/ 用户名文件夹 /.gitconfig 文件中。这个文件是 Git 的全局配置文件，配置一次即可永久生效。</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 查看所有的全局配置</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> config --list --global</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 查看指定的全局配置项</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">git</span> config user.name</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">git</span> config user.email</pre></td></tr></table></figure><h3 id="获取帮助"><a class="anchor" href="#获取帮助">#</a> 获取帮助</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 获取 config 命令的帮助手册，将会打开网页</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> <span class="token builtin class-name">help</span> config</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 获取 config 命令的快速参考手册</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">git</span> config -h</pre></td></tr></table></figure><h3 id="创建仓库"><a class="anchor" href="#创建仓库">#</a> 创建仓库</h3><p>在想要创建仓库的目录下启动 git 然后将文件跟踪提交即可在本地创建 git 仓库</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 初始化仓库</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> init</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 简要的显示文件状态</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">git</span> status -s <span class="token operator">|</span> --short</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 跟踪会将文件放到暂存区</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># 跟踪单个文件</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">git</span> <span class="token function">add</span> 文件名</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 跟踪目录下所有文件</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment"># 提交文件，将会提交所有在暂存区的文件</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">git</span> commit -m <span class="token string">"更新描述"</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment"># 回滚，即将 git 仓库中文件版覆盖现有的文件版本</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">git</span> checkout -- 文件名</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment"># 将文件从暂存区移出</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">git</span> reset HEAD 文件名</pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment"># 强制提交所有已跟踪文件，跳过暂存阶段</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">git</span> commit -a -m <span class="token string">"更新描述"</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment"># 同时从 git 仓库和工作区中删除文件</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">git</span> <span class="token function">rm</span> -f 文件名</pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment"># 仅删除 git 仓库中的文件</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">git</span> <span class="token function">rm</span> --cached 文件名</pre></td></tr></table></figure><h3 id="忽略文件"><a class="anchor" href="#忽略文件">#</a> 忽略文件</h3><p>可以将不想提交的文件设置为忽略，这样文件就不会被 git 跟踪</p><p>创建一个名为.gitignore 的配置文件，列出要忽略的文件的匹配模式。 文件 .gitignore 的格式规范如下：</p><p>① 以# 开头的是注释<br />② 以 / 结尾的是目录<br />③ 以 / 开头防止递归<br />④ 以！开头表示取反<br />⑤ 可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><p>所谓的 glob 模式是指简化了的正则表达式：<br />① 星号 * 匹配零个或多个任意字符<br />② [abc] 匹配任何一个列在方括号中的字符（此案例匹配一个 a 或匹配一个 b 或匹配一个 c）<br />③ 问号？只匹配一个任意字符<br />④ 在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配<br />所有 0 到 9 的数字）<br />⑤ 两个星号 ** 表示匹配任意中间目录（比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等）</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 忽略所有的.a 文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre>*.a</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 跟踪所有的 lib.a，即使前面设置了忽略.a 文件</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">!</span>lib.a</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 忽略当前目录下的 TODO 文件，而不忽略子目录下的 TODO</span></pre></td></tr><tr><td data-num="8"></td><td><pre>/TODO</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 忽略任何目录下名为 build 的文件夹</span></pre></td></tr><tr><td data-num="11"></td><td><pre>build/</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment"># 忽略 doc / 下的 txt 文件，但不忽略其子目录下的 txt 文件</span></pre></td></tr><tr><td data-num="14"></td><td><pre>doc/*.txt</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment"># 忽略 doc / 目录及其所有子目录下的.pdf 文件</span></pre></td></tr><tr><td data-num="17"></td><td><pre>doc/**/*.pdf</pre></td></tr></table></figure><h3 id="查看操作日志"><a class="anchor" href="#查看操作日志">#</a> 查看操作日志</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 按时间降序列出提交历史</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> log</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 显示最近两条提交历史</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">git</span> log -2</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 一行展示最近两条提交历史</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">git</span> log -2 --pretty<span class="token operator">=</span>oneline</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 自定义提交历史输出格式</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># % h 提交的简写哈希值 % an 作者名字 % ar 作者修改日期 % s 更新描述</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">git</span> log -2 ---pretty<span class="token operator">=</span>format:<span class="token string">"%h | %an | %ar | %s"</span></pre></td></tr></table></figure><h3 id="回滚至指定版本"><a class="anchor" href="#回滚至指定版本">#</a> 回滚至指定版本</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 回滚至指定 ID 的版本</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> reset --hard <span class="token operator">&lt;</span>CommitID<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#</span></pre></td></tr></table></figure><h3 id="将本地仓库推送至github仓库"><a class="anchor" href="#将本地仓库推送至github仓库">#</a> 将本地仓库推送至 GitHub 仓库</h3><p><strong>基于 HTTPS</strong></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 关联远程仓库</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> remote <span class="token function">add</span> origin 远程仓库的地址</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 首次推送初始化</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">git</span> push -u origin master</pre></td></tr></table></figure><p><strong>基于 SSH</strong></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 生成密钥对</span></pre></td></tr><tr><td data-num="2"></td><td><pre>ssh-keygen -t rsa -b <span class="token number">4096</span> -C <span class="token string">"github账号的邮箱"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 连续敲击 3 次回车，即可在 C:\Users\ 用户名文件夹 \.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 复制 id_rsa.pub 的内容</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 在 GitHub 账号中添加公钥 Settings -> SSH and GPG Keys -> New SSH key</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 测试是否添加成功</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">ssh</span> -T git@github.com</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 初始化操作类似 HTTPS</span></pre></td></tr></table></figure><h3 id="分支操作"><a class="anchor" href="#分支操作">#</a> 分支操作</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 查看当前 git 仓库中的所有分支</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> branch</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 创建分支</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">git</span> branch 分支名</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 切换分支</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">git</span> checkout 分支名</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 创建分支并切换到上面</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">git</span> checkout -b 分支名</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment"># 合并分支</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">git</span> merge 分支名</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment"># 删除分支</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">git</span> branch -d 分支名</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment"># 推送分支至远程仓库，仅第一次推送时要带 - u 参数</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">git</span> push -u 远程仓库别名<span class="token punctuation">(</span>默认origin<span class="token punctuation">)</span> 本地分支名称:远程分支名称</pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment"># 实例</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">git</span> push -u origin payment:pay <span class="token comment"># 若不填写远程分支名称，远程分支名称将与本地分支一致</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment"># 查看远程仓库分支信息</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">git</span> remote show 远程仓库名</pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment"># 下载远程分支，本地分支名称默认与远程分支一致</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">git</span> checkout 远程分支名称</pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment"># 从远程仓库把远程分支下载至本地，并对下载至本地的分支重命名</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token function">git</span> checkout -b 本地分支名称 远程仓库名:远程分支名称</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment"># 实例</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token function">git</span> checkout -b payment origin/pay</pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment"># 拉取当前分支中的远程分支代码</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token function">git</span> pull</pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment"># 删除指定远程分支</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token function">git</span> push 远程仓库名称 --delete 远程分支名称</pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment"># 实例</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token function">git</span> push origin --delete pay</pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="tools" scheme="http://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>同源与跨域</title>
    <link href="http://asuhe.fun/2021/10/29/2021-10-29-%E5%90%8C%E6%BA%90%E4%B8%8E%E8%B7%A8%E5%9F%9F/"/>
    <id>http://asuhe.fun/2021/10/29/2021-10-29-%E5%90%8C%E6%BA%90%E4%B8%8E%E8%B7%A8%E5%9F%9F/</id>
    <published>2021-10-29T08:05:28.000Z</published>
    <updated>2021-11-02T01:53:12.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="域"><a class="anchor" href="#域">#</a> 域</h2><p>在了解什么是同源和跨域之前我们首先要明确在浏览器中什么是域。浏览器中由协议名、服务器地址、端口号组成一个域。<img data-src="https://i.loli.net/2021/10/29/lLjnOkM3rZ6Q4m2.png" alt="默认网站的端口为80可以省略" /></p><p><strong>同源</strong>指的是两个 URL 的协议、域名、端口一致，反之，则是<strong>跨域</strong>。</p><p>出现跨域的根本原因：<strong>浏览器的同源策略</strong>不允许非同源的 URL 之间进行资源的交互。</p><p>网页访问资源时，只要 url 的协议名、服务器地址、端口号中任何一个发生了改变就会产生跨域问题。</p><h2 id="同源策略"><a class="anchor" href="#同源策略">#</a> 同源策略</h2><p>为了确保用户的上网安全，浏览器采用了同源策略来防止入侵。如果两个页面的协议，域名和端口都相同，则两个页面具有<strong>相同的源</strong>。。同源策略就是浏览器规定网页请求数据只能在同源站点中请求，不能跨域请求资源。浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互。虽然我们的网络请求可以正常发送，服务器也会正常响应资源，但到浏览器这层资源就会被拦截下来，我们的 js 代码无法得到数据。例如：</p><p>①无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</p><p>②无法接触非同源网页的 DOM</p><p>③无法向非同源地址发送 Ajax 请求</p><p><img data-src="https://i.loli.net/2021/10/29/nFq7L2iQuZzObN8.png" alt="数据被拦截" /></p><h2 id="跨域解决方法"><a class="anchor" href="#跨域解决方法">#</a> 跨域解决方法</h2><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 JSONP 和 CORS。</p><p>JSONP：出现的早，兼容性好（兼容低版本 IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。缺点是只支持 GET 请求，不支持 POST 请求。</p><p>CORS：出现的较晚，它是 W3C 标准，属于跨域 Ajax 请求的根本解决方案。支持 GET 和 POST 请求。缺点是不兼容某些低版本的浏览器。</p><h3 id="jsonp"><a class="anchor" href="#jsonp">#</a> JSONP</h3><p>JSONP (JSON with Padding) 是 JSON 的一种 “使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</p><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据。但是 &lt;script&gt; 标签不受浏览器同源策略的影响，可以通过 src 属性，请求非同源的 js 脚本。</p><p>因此，JSONP 的实现原理，就是通过 &lt;script&gt; 标签的 src 属性，请求跨域的数据接口，并通过<strong>函数调用</strong>的形式，接收跨域接口响应回来的数据。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>//在这个标签页面定义函数</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>//在另一个标签页调用函数</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://函数定义地址?callback=foo&amp;a=10s&amp;b=20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>由于 JSONP 是通过 &lt;script&gt; 标签的 src 属性，来实现跨域数据获取的，所以，<strong>JSONP 只支持 GET 数据请求</strong>，不支持 POST 请求。</p><p><strong>JSONP</strong> <strong>和</strong> <strong>Ajax</strong> <strong>之间没有任何关系</strong>，不能把 JSONP 请求数据的方式叫做 Ajax，因为 JSONP 没有用到 XMLHttpRequest 这个对象。</p><h3 id="cors"><a class="anchor" href="#cors">#</a> CORS</h3><p>CORS （Cross-Origin Resource Sharing，跨域资源共享）由一系列 HTTP 响应头组成，<strong>这些</strong> <strong>HTTP</strong> <strong>响应头决定浏览器是否阻止前端</strong> <strong>JS</strong> <strong>代码跨域获取资源</strong>。</p><p>①CORS 主要在服务器端进行配置。客户端浏览器<strong>无须做任何额外的配置</strong>，即可请求开启了 CORS 的接口。</p><p>②CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）。</p><h3 id="cors响应头部-access-control-allow-origin"><a class="anchor" href="#cors响应头部-access-control-allow-origin">#</a> CORS 响应头部 - Access-Control-Allow-Origin</h3><p>响应头部中可以携带一个 <strong>Access-Control-Allow-Origin</strong> 字段，其语法如下:</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>Access-Control-Allow-Origin:<span class="token operator">&lt;</span>origin<span class="token operator">></span> <span class="token operator">|</span> * //*为通配符</pre></td></tr></table></figure><p>其中，origin 参数的值指定了允许访问该资源的外域 URL。</p><p>例如，下面的字段值将<strong>只允许</strong>来自 <a href="http://asuhe.fun">http://asuhe.fun</a> 的请求：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">'http://asuhe.fun'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="cors响应头部-access-control-allow-headers"><a class="anchor" href="#cors响应头部-access-control-allow-headers">#</a> CORS 响应头部 - Access-Control-Allow-Headers</h3><p>默认情况下，CORS <strong>仅</strong>支持客户端向服务器发送如下的 9 个请求头：</p><p><strong>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type （值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一）</strong></p><p>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 Access-Control-Allow-Headers 对额外的请求头进行声明，否则这次请求会失败！</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 允许客户端额外向服务器发送 Content-Type 请求头和 X-Custom-Header 请求头</span></pre></td></tr><tr><td data-num="2"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span><span class="token string">'Content-Type,X-Custon-Header'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="cors响应头部-access-control-allow-methods"><a class="anchor" href="#cors响应头部-access-control-allow-methods">#</a> CORS 响应头部 - Access-Control-Allow-Methods</h3><p>默认情况下，CORS 仅支持客户端发起 <strong>GET、POST、HEAD</strong> 请求。</p><p>如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 Access-Control-Alow-Methods 来指明实际请求所允许使用的 HTTP 方法。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 仅允许 POST,GET,DELETE,HEAD 方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span><span class="token string">'POST,GET,DELETE,HEAD'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 允许所有 HTTP 方法</span></pre></td></tr><tr><td data-num="5"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="cors请求的分类"><a class="anchor" href="#cors请求的分类">#</a> CORS 请求的分类</h3><h4 id="简单请求"><a class="anchor" href="#简单请求">#</a> 简单请求</h4><p>同时满足以下两大条件的请求，就属于简单请求：</p><p>① 请求方式：GET、POST、HEAD 三者之一</p><p>② HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain）</p><h4 id="预检请求"><a class="anchor" href="#预检请求">#</a> 预检请求</h4><p>只要符合以下任何一个条件的请求，都需要进行预检请求：</p><p>① 请求方式为 GET、POST、HEAD 之外的请求 Method 类型</p><p>② 请求头中包含自定义头部字段</p><p>③ 向服务器发送了 application/json 格式的数据</p><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为 “预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据。</p><p><strong>其中 OPTION 预检请求的请求体为空，若预检成功则服务器返回的响应体也为空</strong></p><p><strong>简单请求的特点</strong>：客户端与服务器之间只会发生一次请求。</p><p><strong>预检请求的特点</strong>：客户端与服务器之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="BOM" scheme="http://asuhe.fun/tags/BOM/"/>
    
  </entry>
  
</feed>
