[{"title":"生即是罪恶","date":"2021-09-10T12:58:06.000Z","url":"/2021/09/10/2021-09-10-%E7%94%9F%E5%8D%B3%E6%98%AF%E6%81%B6/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"当生活的痛苦超越了死亡，你将做何选择？ 生即是恶，死亡是最好的归宿 今天是教师节，同时也是预防自杀日。请务必龃龉地、苟且地，活下去。"},{"title":"开学","date":"2021-09-05T14:46:05.000Z","url":"/2021/09/05/2021-09-05-%E5%BC%80%E5%AD%A6/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"​ 今天是开学的日子，6号就要去生产实习了。对于开学，我既开心又焦虑。开心是开学了大家都会回来，校园里也逐渐有些生气。因为留校两个月让我意识到了与人交流的重要性。日复一日地学习，回到寝室也是只有寥寥几句。我本以为我已经可以和孤独相处，但经历了这个暑假我才发现，原来我是如此害怕孤独。以前上课虽然都是一个人独来独往，但是起码那时还有课程这个纽带让整个专业里的人都联系在一起，总觉得朋友同学们还会聚在一起。暑假的时候，大家都蒙头备考。每天非饭点时期，图书馆的电梯是不动的。一切在默默运行，大家都为了自己的未来各自拼搏着忙碌着，再也没有上课时活跃的氛围，空气中弥漫着无形的压抑。焦虑是因为生产实习要占用三周的时间，而备考的日子已经所剩无几。面对考试，显然我心里是没有底气的。生活令人快乐，也令人痛苦。不管如何，剩下的日子里只管努力便是，不问结果几何但求回首无悔。"},{"title":"认识新朋友","date":"2021-09-03T14:49:44.000Z","url":"/2021/09/03/2021-09-03%20%20%E8%AE%A4%E8%AF%86%E6%96%B0%E6%9C%8B%E5%8F%8B/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"​ 佛法讲究轮回，一切事情都是因果。今天我再次体会到了什么叫缘分。这两天是开学的日子，学校四教也要着手清理教室，进行消杀为学生返校上课做准备。按照规定从5号开始就不能在把私人物品放在四教，所以这两天同学们都陆陆续续转移阵地，换到图书馆备考。看着身边座位上了人走了，心里还是有点失落，如同少了一个并肩作战的战友，尽管我们并没有交集。原先坐我左手边的同学，今天早晨快到九点还没来。我感到有些不安，怕他不来。要问为什么，其实我很早就开始关注他了，自从我看见他第一眼起，我就感到似曾相识，所以一直对他保持着关注。从记忆的角落里想起初三某次月考的事情。 ​ 初三的时候，每个月都会举行月考。月考是随机分配座位的，并不是在原班级上考试。同时学校为了防止作弊的风气，把每个班成绩较好的同学都抽调去学校会议厅考试。让其它同学在普通教室考试，这样就可以让成绩中等的学生和成绩稍差的学生一同考试，从而杜绝作弊。那时的我，成绩还算可以，有幸被抽到在会议厅考试。论起考试作弊，成绩好的同学都对其嗤之以鼻，但我时当时英语苦手的我，其它考试的都不怂，就怕英语考试。虚荣心作祟，考英语前我求坐在我前面的同学让我抄一次答案。那位同学沉默答应了。虽说考前就准备放弃直接抄别人的，但我还是坚持自己做了一遍，抄我也只是抄了一部分阅读理解。最后成绩出来五六十分，我认为都在预料之中。因为当时英语太差了，要我自己考我也只能考三十分左右的水平，五六十分的成绩对我来说已经足够。 缘分的因就是在这时种下的，而这果今天的我才得到。 ​ 经历过那次月考后，我就对那位同学留下了印象。但在初三繁忙的备考生活中，这件事很快就被我放在记忆深处。后来我考入高中，在高中生活中也时不时远远望见那位同学的身影，正是因为偶尔的遇见让我脑海里关于这位同学的记忆没有因为时间的流逝而完全忘记。如今，在大学的考研备考教室里。正当我做题烦闷抬头看看四周时，看见坐在我左手边的同学的样子，我莫名地想起那位曾经让我抄英语的同学。二者的模样渐渐重合，给我的感觉竟如此相似。于是心里就留下了一个疑问，这一段时间里我一直关注着他。关注他的时间里，我不但没有觉得自己认错人了。反而我更加确信他就是那位让我抄英语的人。但是碍于内向的性格，我一直没有寻找机会与他交谈。而今天是一想到后天可能他就不再来这个教室，而我与他的唯一的联系可能就此断掉。晚上吃饭时，我瞅准时机，在他去吃饭时跟在身后，强行制造了个机会和他交谈。 我快步上前，与其同行。然后生硬地说出在内心预想好的台词：“同学，我是XX学院的XXX，我觉得你很像我以前的一个同学，你总给我一种很熟悉的感觉，可以和你认识一下吗？” 英语兄一脸疑惑地看了我一眼，脚上步伐继续走着说：“？我对你没有印象” 见到他对我不感兴趣的样子，我依然厚着脸皮说到：“我是赣州人，你呢？” 听见我说出自己的高中出身，他顿了一下，似乎提起了一丝兴趣问道：“我也是赣州的，你是赣州哪里？” 我见他有些反应，内心更加确信他就是我要找的人，我继续说道：“赣州安远听过吗？一个小地方” 他听罢有了一丝惊讶，对我产生了更多兴趣，继续说道：“你是一中的吗？” 我更开心了，笑着答道：“对，你也是一中的吗？可以一起吃个饭吗” “可以”他答道 ​ 随后，我们便进入了食堂。打了饭菜，边吃边聊。聊的过程中我进一步问道他是不是天信中学出来的。他听了更加惊讶了，问我怎么知道。之后我便将那次月考的事情和他说了一下，问他对我有没有印象，记不记得曾经有个同学求你给他抄英语答案。他说没有，我有些遗憾，他不记得我了，但是转念一想不记得才是正常的，当初本就是萍水相逢，而今又过了这么多年忘记这件小事是理所当然的。晚饭过后，我把自己的QQ和微信都留给他，希望能加个好友，我本想两个一起加的但他最后只加了我的QQ。内心还是有些遗憾。"},{"title":"依然恐惧未来","date":"2021-08-15T12:47:04.000Z","url":"/2021/08/15/2021-08-15/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"​ 只要一停下来，脑子里就会焦虑。焦虑未来，焦虑人生，好像这辈子就这样了。自从上大学，可以说没有哪年是过得比较顺心的。别人的大学的生活似乎多姿多彩，而自己却总是多灾多难的样子。每个失眠的夜里反思着自己的人生，或许在家里人看来我考上大学似乎是一件非常成功的事情，但只有当自己上了大学。逐渐明白社会的残酷性后才懂得，你拼尽一切得到的这一切在别人眼里不过如此。你迄今为止所有的一切，其实并不值得一提。现实的毒打直接否定了你一直以来的努力，信念崩塌的痛苦强烈地撕扯着。所有的一切都没有发生根本改变，这个世界是现实的，只有你用努力和自我，令它柔软。 ​ 越长大就越能感觉到自己的渺小，努力挣扎只为能做个普通人，过着普通的生活，做着普通的事情。从小听着要努力出人头地，就天真的以为只要努力就能出人头地，现在明白以为努力便能做到一切那是一种傲慢，只有努力才能过上别人唾手可得的普通人的生活。面对命运时常感到绝望，干脆就这样被命运拍死在沙滩上算了。等自己还完了所有的恩情，除去心里的牵挂就可以随时准备死去了。 ​ 人真是一种神奇的生物，有时候会自己一个人咬着牙走了很长一段路，有时候却会因为几句话而泪流满面。我曾以为自己已经正视了自己的懦弱，但是最近发现其实并没有。我依然是那个懦弱的，遇到困难首先想着如何逃避的人。心里非常清楚，逃避解决不了任何问题反而会让问题愈发严重，即便如此还是会想着逃避以获取当下短暂的、虚假的安宁。 ​ 对未来的恐惧总是如影随形，惧怕未知，惧怕失败，害怕得不到一个好结果。内心已经被对未来的恐惧所占据，想要行动起来去抵抗，发现身体动不起来。恐惧在内心已经占据太多分量，一路以来诚惶诚恐、患得患失。明明知道这样下去不行，行动上还是放任自己。 ​ 就像一株浮萍，只能随着命运的长河漂流。无论昨夜发生了什么，清晨醒来这个城市依旧车水马龙。"},{"date":"2021-07-26T14:09:16.000Z","url":"/2021/07/26/2021-07-26/","categories":[["undefined",""]],"content":"时不时的失眠令人憔悴，无论选择哪条路，在路上遇到挫折时抑或是未来遭受打击时，都会怀疑当初自己的选择。 只能安慰自己，硬着头皮走下去。欲壑难填，人是环境的产物。当大环境鼓吹焦虑时，不受其影响的终归是少数人。而我显然是大多数，只能被环境裹挟着往前走，什么时候才能独辟蹊径呢。终归是难有坚韧的毅力以及决心，当外界逼迫时才愿意动一动。 愿最终都有一个好结果"},{"title":"计算机总线系统概述","date":"2021-06-14T13:34:31.000Z","url":"/2021/06/14/%E6%80%BB%E7%BA%BF%E7%B3%BB%E7%BB%9F/","tags":[["CS","/tags/CS/"]],"categories":[["计算机组成原理","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"content":"总线系统基础概念总线用于将计算机各个部件连接起来，成为一个整体，是多个系统功能部件之间进行数据传输的公共通道 单处理器系统中总线分为三大类 内部总线：CPU内部连接寄存器、运算部件 系统总线：计算机系统用于连接其它高速设备，存储器、通道等 I/O总线：用于连接中、低速 I/O 设备 总线的特性 物理特性：指总线的物理连接方式，包括总线的根数，总线插头、引脚数等 功能特性：描述总线中每一根线的功能 电气特性：定义每根线上信号的传递方向以及有效的电平范围 时间特性：定义了每根线在何时有效 总线连接方式通常采用适配器部件来完成 单总线系统：要总线上的所有逻辑部件都高速运行，以便某些设备需要使用总线时能迅速获得总线控制权 多总线系统：将高速设备（北桥）和低速设备（南桥）分开，用不同类型的桥扩展出不同层次的总线 总线内部结构 地址线：单向，用于传送主存与设备的地址 数据线：双向，用来传送数据 控制线：对每根线是单向（CPU发向接口，或接口发向CPU），用来指明数据传送的方向（存储器读写、I/O读写）、中断控制和定时控制等 总体总线分类数据传送总线由地址线、数据线、控制线组成 仲裁总线包括总线请求线和总线授权线 中断和同步总线用于处理带优先级的中断操作，包括中断请求线和中断认可线 公用线包括时钟信号线、电源线、地线、系统复位线以及加电或断电的时序信号线 总线仲裁集中式仲裁 链式查询 菊花链式查询，授权信号串行地从一个接口发送到下一个接口，若中间有设备请求总线则获得授权，信号不再传递。离CPU越近的设备优先级越高 该种方式优点是简单、节省线路；其缺点是优先级不能改变，不灵活，可能存在优先级低的设备饿死，对电路故障十分敏感，若中间设备故障则后面的设备都无法工作 计数器定时查询 设备通过BR线发出请求，总线仲裁器接受到请求后，在BS线为0的情况下计数，计数值通过地址线发往各设备。每个设备都有设备地址判别电路，当地址线计数值与设备地址一致时，该设备获得总线使用权，BS置1，终止计数 该种方式优点是可以通过决定是否从上次终止点开始继续计数还是从0计数来改变各个设备的优先级；其缺点是要增加线的数量 独立请求 每个设备都有一对独立的总线请求线和授权线，请求的信号在排队电路中被总线仲裁器以优先级次序处理授权 该种方式优点是响应快，优先级次序控制灵活；其缺点是线数大量增加 现代计算机基本采用独立请求方式 分布式仲裁不需要集中的总线仲裁器，每个设备都有自己的总线仲裁器。请求总线时，将它们唯一的仲裁号发送到共享的仲裁总线上，每个仲裁器将从仲裁总线上得到的号与自己比较。若仲裁总线上的号大，则不予响应并撤销其仲裁号，最后获胜者的仲裁号保留在仲裁总线上获得授权"},{"date":"2021-06-01T15:29:08.000Z","url":"/2021/06/01/%E6%9D%82%E8%B0%88/","categories":[["undefined",""]],"content":"六一快乐！"},{"title":"PSW寄存器分析","date":"2021-05-31T23:51:22.000Z","url":"/2021/06/01/FLAG%E5%AF%84%E5%AD%98%E5%99%A8/","tags":[["CS","/tags/CS/"]],"categories":[["计算机组成原理","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"content":"FLAG寄存器 存储程序状态字（PSW，program status word），存储相关指令的执行结果，为相关指令提供行为依据，用来控制CPU的相关工作方式。flag寄存器是按位起作用的，每一位都有专门的含义记录特定信息。 在32位CPU中称为为EFLAGS寄存器，64为CPU中称为RFLAGS寄存器，它们扩展出的高位地址都不使用。现代计算机中一般也叫做PSW寄存器。下面以8086为基础处理器分析该寄存器的功能 ZF（Zero Flag） 第6位标志位，零标志位。计算指令执行后，若结果为0，则zf=1，否则zf=0 PF（Parity Flag） 第2位标志位，奇偶标志位。指令执行后，若所有bit位中1的个数为偶数，则pf=1，否则pf=0 SF（Symbol Flag） 第7位标志位，符号标志位。指令执行后，若结果为负，则sf=1，否则sf=0 CF（Carry Flag） 第0位标志位，进位标志位。无符号运算中指令执行后，若产生进位，则cf=1，否则cf=0，同时也可以用作表示借位。若其值被add设置则表示进位，被sub设置则表示借位 OF（Overflow Flag） 第11位标志位，溢出标志位。有符号运算时，若产生溢出，则of=1，否则of=0 AF（Auxiliary Flag） 第4位标志位，辅助进位标志位。若操作中发生了进位或借位，则af=1，否则af=0mov al，0Fhadd al，1计算过程0000111100000001——————00010000 位3中发生了进位，af=1 IF（Interrupt-Enable Flag） 第9位标志位，中断允许标志位。决定CPU是否能够响应外部可屏蔽中断请求，若响应则if=1，否则if=0 DF（Direction Flag） 第10位标志位，方向标志位。控制SI和DI自增还是自减。若自减，则df=1，否则df=0 TF（Trap Flag） 第8位标志位，追踪标志位。若CPU进入单步调试，则tf=1，否则tf=0 "},{"title":"CSMA/CD中重传时机的确定","date":"2021-05-29T15:14:31.000Z","url":"/2021/05/29/%E6%88%AA%E6%96%AD%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8C%87%E6%95%B0%E8%A7%84%E9%81%BF%E7%AE%97%E6%B3%95/","tags":[["CN","/tags/CN/"]],"categories":[["计算机网络","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"]],"content":"截断二进制指数规避算法什么是截断二进制指数规避算法在CSMA/CD协议中，检测到碰撞我们要重传数据。那么如何选择碰撞后数据的重传的时机呢？该算法就是为了解决这个问题而提出的 如何使用该算法计算重传时机首先，发生碰撞后我们要确定一个基本的退避时间来延迟发送。假设从A发送到B的传播时延是 t ，我们将基本退避时间设置为 2t 。 其次，定义参数 k ，用于记录重传的次数。 k = min[ 重传次数，10 ]。当检测到数据碰撞时，在 0 ~ 2k - 1 的范围中随机取出一个数 r ，重传时间 R 即为 r 倍的基本退避时间 ， R = 2tr 最后，若重传 16 次仍然不能成功发送数据则向网络层发出错误信息表示网络拥挤并抛弃此帧"},{"title":"数据链路层中最小帧长问题","date":"2021-05-20T15:12:19.000Z","url":"/2021/05/20/%E6%9C%80%E5%B0%8F%E5%B8%A7%E9%95%BF/","tags":[["CN","/tags/CN/"]],"categories":[["计算机网络","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"]],"content":"数据链路层中的最小帧长是如何计算出来的众所周知，Ethernet的最小帧长是64 Byte。那么这个最小帧长是如何得到的呢？ 数据碰撞问题当多个主机挂载在bus型半双工信道上时我们都会存在一个信道争用问题，为解决这个问题我们发明了CSMA/CD协议。 当两个主机同时在bus型半双工信道上发送数据就会产生数据碰撞。数据发送过程如图所示 我们假设单向传播时延为 t ，图中发生数据碰撞时，A知道碰撞检测的时间为 2 t1 ，而B检测到碰撞的时间为 2 t2。 t = t1 + t2 最差的情况下，当A即将到达B时，B才发送数据，此时发生碰撞。所以最迟我们检测到数据碰撞的时间是 2t 如何确定最小帧长因为如果我们自身数据全部发完后才检测到数据则数据会被误认为是正常的数据而被接收，所以我们要确保我们还没有发完数据时就检测到碰撞。 因此根据上面的时延计算，我们可以得出 帧长 / 数据传输速率 &gt;= 2 t 最小帧长 = 数据传输速率 x 传播时延 x 2"},{"title":"Cache设计","date":"2021-05-07T15:06:08.000Z","url":"/2021/05/07/Cache%E8%AE%BE%E8%AE%A1/","tags":[["CS","/tags/CS/"]],"categories":[["计算机组成原理","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"content":"Cache设计Cache原理 利用程序的局部性原理，缩减CPU的访存时间，让CPU能够更好的发挥性能 空间局部性：最近被访问的块邻近的块很有可能被访问 时间局部性：最近被的访问的块很有可能被再次访问 Cache设计的两大原则 高命中率，要求高命中率减少块的置换操作 对CPU透明，即CPU访问内存和访问Cache为同一种方式，无需改变 Cache设计的四个问题 从主存取得的块如何在Cache中存放 如何访问主存放入Cache中的块 当Cache未命中时置换数据块的策略 怎样保持Cache块中数据与主存块的数据同步 三种Cache与主存地址映射策略 通常Cache相对于主存都十分小，所以主存块的哪些部分放入有限的Cache空间中是一个很重要的问题。下面有三种策略用于解决主存块在Cache中的存放位置问题 全相联映射 Cache数据块称为行，主存数据块称为块，其中行大小==块大小。全相联映射中，主存一个块地址、块号、块内容都被一起存于Cache的行中 主存中的块被复制到Cache的任意行中 CPU访问一个主存地址时，为了快速检索，指令中的块号与Cache所有行号的标记同时在比较器中比较，若命中则从Cache中读取一个字，否则在主存地址中读取 全相联映射其主要缺点是高速比较器电路难于设计和实现，因此适合小容量Cache 直接映射主存被划分为n个和Cache大小相同的区，区内的块只能存入对应Cache行内 Cache行号 i 和主存块号 j 关系为 i = j mode m，其中m为Cache的大小 直接映射其优点是硬件简单，成本低，地址变换速度快，但其缺点是每个主存块有一个固定行号可以存放。 当连续两个访存指令要求访问块号相距m整数倍的两个块时，因两个块同时映射到同一个Cache行内，所以会产生冲突，需要置换行块，导致置换操作频繁，降低Cache效率 组相联将Cache划分为若干个大小相同的组，而主存不同区内，区内的对应块可以换入Cache对应的组中，在组中可以存放在任意行 当Cache分组的大小为1时，组内只有一个块，此时为直接映射；当Caceh分组大小为整个Cache大小时，只有一个分组，此时为全相联 组相联模式结合了适度兼顾了全相联和直接映射的优点，被普遍采用 Cache替换策略 当Cache存满需要换入新块时，有三种主流的替换算法分别是 LFU算法LFU，最不经常使用算法，将一段时间内被访问次数最少的行换出。每行设置一个计数器，当新行调入Cache，该新行计数器为0。当某个行被读取一次，该行的计数器+1，需要换出行时寻找到计数器最低的行将其换出。 LRU算法LRU，近期最少使用算法，将近期内最长久未被访问过的行换出。同样如LFU为每行设置一个计数器，但是Cache行每次被命中其计数器清零，其它各行计数器+1，与LFU算法相反，需要置换出行时将计数器值最高的行换出 随机替换随机换出行，无固定规则。研究表明随机替换的性能只是稍稍逊于前两种算法 Cache写操作策略 因为Cache中的数据时主存块中的副本，在任何系统中只要存在副本就存在各副本之间数据同步的问题。当前Cache中普遍采用的同步策略有以下三种： 写回法 write back,copy back：CPU命中Cache时，只修改Cache行中的数据内容，仅当Cache该块被换出时，将数据写回主存；CPU未命中Cache时，将该块从主存复制到Cache行中，再对其修改。Cache中每行都置一个修改位，记录该块是否被修改，若该行被换出是修改位为0，则直接抛弃 写回法优点是减少访问主存的次数，但是写回法会导致Cache行中的数据与对应主存块中的数据不一致，产生隐患 全写法 write through：CPU命中Cache时，同时修改Cache行和主存块中的内容，主存和Cache同步；当CPU未命中Cache时，有两种策略，一是WTWA法，将主存块置换如Cache行中，对Cache行修改，另一种是WTNWA法，直接修改主存块，不置换入Cache中 全写法的优点是简单，Cache和主存同步，不会发生数据不一致，但是其频繁的访问主存操作导致Cache性能降低 写一次法 write once：CPU第一次命中Cache时，同时修改Cache行中和主存块中的内容，后面再命中时采用写回法的策略；CPU未命中时采用写回法策略 写一次法结合了写回法和全写法"}]