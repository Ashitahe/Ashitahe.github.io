[{"title":"flex布局","date":"2021-10-09T09:42:16.000Z","url":"/2021/10/09/2021-10-09-flex%E5%B8%83%E5%B1%80/","tags":[["code","/tags/code/"]],"categories":[["前端","/categories/%E5%89%8D%E7%AB%AF/"]],"content":"什么是flex布局传统布局解决方案主要是依赖display 属性 + float属性 + position属性来控制我们盒模型的位置，用这三个属性相互配合达到将盒子摆放至预期位置的目的。而flex布局主要是利用在父元素中添加display:flex属性，使用与其相关的属性配合达到布局的目的。 在传统布局中有些特殊布局并不好实现，而在flex布局中我们可以轻松实现。例如将三个盒子同时水平对齐和垂直居中对齐。 flex布局原理flex布局里我们可以指定任意一个元素为父元素，即使是行内元素我们也可以设置flex布局。 将父盒子作为一个容器，父盒子的儿子元素作为容器的成员。使用父元素控制属性可以控制儿子元素的排列位置。同时flex布局也提供了儿子元素控制属性，令我们可以单独控制特定子元素的位置。父元素控制属性可以理解为游戏里的群体控制效果，子元素控制属性可以理解单体控制效果。 在flex布局中，我们将页面看作一个二维坐标系，主轴正方向为从左至右，侧轴正方向为从上至下。 利用父元素控制属性我们可以进行切换主轴、设置换行等系列操作。接下来我们可以看看主要的父元素控制元素有哪些。 常见父元素属性 flex-directionflex-direction用于设置主轴为哪个，默认情况下flex主轴为x轴，正方向是从左至右的。 flex-direction:row 效果（默认方向），主轴方向为从左至右 flex-direction:row-reverse 效果，主轴方向为从右至左 flex-direction:column 效果，主轴方向为从上至下 flex-direction:column-reverse 效果，主轴方向为从下至上 justify-contentjustify-content的作用是设置主轴上子元素的排列方式 下列中的示例效果，主轴皆为默认的从左至右 justify-content:flex-start效果（默认） justify-content:flex-end效果（注意和flex-direction:row-reverse的区别） justify-content:center效果 justify-content:space-around效果（平分剩余空间） justify-content:space-between效果（头尾元素贴紧边缘） flex-wrapflex-wrap设置当子元素一行排不下时，是否换行。默认为不换行，将每个子元素宽度压缩至能一行排列。 当flex-wrap:nowrap时，flex子元素都会挤压在一行而不会像float一样空间不够时自动换行 当flex-wrap:wrap时，flex子元素保持原有大小，一行排不下时会像float一样空间不够时自动换行 align-itemsalign-items设置侧轴上子元素排列方式（单行），当子元素不止一行时此属性不生效 align-items:flex-start效果（默认） align-items:flex-end效果，在侧轴顶部排列 align-items:center效果，在侧轴中部排列 align-items:stretch效果（当子元素的height属性不设置时才显示效果），将子元素拉伸到和父元素一样高 align-contentalign-content设置侧轴上的子元素的排列方式（多行） 设置子项在侧轴上的排列方式并且只能用于子项出现换行的情况（多行），在单行下是没有效果的。 align-content:flex-end效果，在侧轴尾部排列 align-content:center效果，在侧轴中间排列 align-content: space-around 效果，平分剩余空闲空间并在侧轴两侧排列 align-content: space-between 效果，首行和尾行紧贴侧轴两端，中间行平分剩余空间 flex-flowflex-flow是flex-direction和flex-wrap的复合写法 常见子元素属性flexflex 属性定义子项目分配剩余空间，用flex来表示占多少份数 设置中的属性为flex:2,空白空间被分为四份，中间的占两份 align-selfalign-self 控制子项自己在侧轴上的排列方式，可以单独控制一个子元素的位置 align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。 默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。 orderorder 属性定义项目的排列顺序,数值越小，排列越靠前，默认值为0。 设置中元素在第一个位置 "},{"title":"使用Windows terminal 免密码登录Linux服务器","date":"2021-10-08T12:12:16.000Z","url":"/2021/10/08/2021-10-08-%E4%BD%BF%E7%94%A8Windows-terminal-%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/","tags":[["tips","/tags/tips/"]],"categories":[["Linux","/categories/Linux/"]],"content":"Linxu服务器配置登录Linux并生成密钥对首先我们使用putty登录Linux服务器 再让Linux服务器先生成 rsa 密钥对供我们认证。使用如下命令 命令执行后对于弹出的选项我们一路回车就行 密钥对生成后我们要将其中的公钥文件id_rsa.pub更改为 authorized_keys，然后将私钥文件id_rsa下载至本地Windows 更改Linux公钥文件名称我们找到生成密钥的地址 /home/unbuntu/.ssh，因为我们现在就是在当前用户目录下生成的密钥，所以只需要输入cd .ssh即可跳转至密钥存放的文件夹，ls查看一下。确实存在我们刚刚生成的密钥，最后更改公钥文件名称Linux端就大功告成了。再查看一下，文件是否更改成功 Windows端配置从Linux服务器下载私钥Linux服务器已经生成了密钥对，并且我们也成功将Linux中的公钥文件修改成功。接下来我们只要将Linux生成的私钥下载至本地即可。 首先我们需要确定Linux上私钥的存放地址，然后再确定Windows中我们将私钥存放的地址。比如Windows中我就将私钥存放在D:\\ssh_keys\\tencent 找到Linux中文件存放的地址，其实地址之前我们生成密钥对的时候就已经显示过了，我们只需要复制下来即可。私钥文件路径/home/ubuntu/.ssh/id_rsa 使用scp将文件下载至我们指定的位置: scp ubuntu@Linux的IP:/home/ubuntu/.ssh/id_rsa D:\\ssh_keys\\tencent 根据提示输入Linxu用户密码 下载完成后我们可以看见我们的密钥文件 到了这一步我们就可以使用密钥登录啦，在命令行中输入:ssh -i D:\\ssh_keys\\tencent\\id_rsa ubuntu@Linux的IP地址 登录成功 设置私钥文件权限走到这一步我们已经基本完成了，但是还有一个问题就是当我们执行密钥登录时Windows可能会提示我们私钥文件过权限大，忽视这个私钥，导致我们无法使用密钥登录 这时我们需要将私钥文件id_rsa的权限设置为仅所有者控制 在Windows资源管理器中找到id_rsa文件，右键单击该文件，然后选择“属性”。导航到“安全性”选项卡，然后单击“高级”。 将所有者更改为你，禁用继承并删除所有权限，把除了自己以外的权限条目全部删除。然后授予自己“完全控制权”并保存权限。 现在SSH不再抱怨文件权限太开放了。 若原本权限条目中没有拥有者，则去添加中寻找并加入 设置Windows terminal只需要去设置中将我们刚才登录Linux的命令复制一份并保存就可以了 这样以后我们打开Windows terminal选择选项卡就可以登录服务器了，打完收工！"},{"title":"浅谈rem布局","date":"2021-10-07T15:14:23.000Z","url":"/2021/10/07/rem%20+%20less%20+%20%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E5%B8%83%E5%B1%80/","tags":[["code","/tags/code/"]],"categories":[["前端","/categories/%E5%89%8D%E7%AB%AF/"]],"content":"rem + less + 媒体查询布局rem初识rem什么是rem，rem的全称为root em。em我们都知道，1em代表一个字符的大小。而root em顾名思义，我们可以大致猜测出是以某个源为标准的单位。实际上rem代表的是以标签里font-size属性的单位，举个例子 由此可以看出，html标签里设置的字体像素值为多少，其每单位rem就是多少像素的大小。 为什么要rem我们都知道当我们缩放浏览器窗口时，网页的内容会因为我们的而改变缩放。如果我们进行开发时，使用的是rem则采用rem进行设置大小的内容都会进行等比缩放，从而实现自适应效果。但如果我们使用px规定了大小，此时我们进行缩放或者使用不同分辨率的设备查看网页内容时，里面的字体的内容并不会进行一个等比缩放而是依然使用规定的像素值。 rem的出现很好的解决了不同分辨率下查看同一网页字体不会自适应的问题。 相比于em仅依靠父元素来设置文字大小，在实际开发中父元素文字大小可能不一致，但是整个页面只有一个html，使用rem可以很好来控制整个页面的元素大小。 less什么是less为解决css代码冗余，无法使用变量、函数等概念的问题。引入less简化css代码的开发。 Less （Leaner Style Sheets 的缩写） 是一门 CSS 扩展语言，也称为CSS预处理器。 典型场景 基础语法定义变量 注意事项 必须有@为前缀 不能包含特殊字符 不能以数字开头 大小写敏感 嵌套直接选中div里的子元素span 注意事项 如果遇见（交集|伪类|伪元素选择器） 内层选择器的前面没有&amp; 符号，则它被解析为父选择器的后代； 如果有&amp; 符号，它就被解析为父元素自身或父元素的伪类。 如，使用伪类选择器 运算可使用的运算符有 + - * / ，运算符前后左右都要空格 运算优先级为先乘除后加减，从左往右 注意事项 对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 如果两个值之间只有一个值有单位，则运算结果就取该单位 媒体查询什么是媒体查询媒体查询（Media Query）是CSS3新语法。 使用媒体查询可以令我们针对不同的设备开发不同的css样式用以适配，当查看网页的设备不同，就可以根据媒体查询的结果去使用不同的css样式以达到最佳的显示效果。 媒体查询使用基础范式 注意事项 用 @media 开头 注意@符号 mediatype 媒体类型 关键字 and not only media feature 媒体特性 必须有小括号包含 属性详解mediatype 查询类型，将不同的终端设备划分成不同的类型，称为媒体类型，一般使用 screen 关键字 and：可以将多个媒体特性连接到一起，相当于“且”的意思。 not：排除某个媒体类型，相当于“非”的意思，可以省略。 only：指定某个特定的媒体类型，可以省略。 媒体特性 每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。注意他们要加小括号包含 使用实例 实例分析分析媒体查询的里的css层叠特性 "},{"title":"没出息的一天","date":"2021-09-20T14:21:09.000Z","url":"/2021/09/20/2021-09-20-%E6%B2%A1%E5%87%BA%E6%81%AF%E7%9A%84%E4%B8%80%E5%A4%A9/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"今天又是没出息的一天，晚上在万达吃烤肉等将近两个小时。吃着烤肉不知道怎么的聊起了家事，中午奶奶给我打电话说要怕我没钱要给我打一千块钱当生活费。当时我极力说不要，自己其实有生活费，内心里早已破防。情绪在吃烤肉的时候爆发了，一边忍着不让眼泪流出来一边在吃。旁边的店员走过，向我投来疑惑的目光，真丢人。我的性格从来都是报喜不报忧的，自己本身过的再苦再累也不想让家里人知道让他们担心，习惯了一个人排解。每次一想到奶奶快八十的人了，自己还让她担心这担心那的就觉得对不起他。我知道，自己作为家族里当二个上大学的，一直让她很骄傲。我要承载着她的希望，过的越来越好，不能让她看到自己难过，落魄的一面。 学校心理咨询室的老师说我内心没有力量支撑，仔细想想确实有道理。从八个月大就留守在家，成长过程中最亲近的人就是奶奶还有姑姑。每次遇到困难、面临重要时刻都会想到不能让她们失望。对于父亲母亲心里仅有一点感情，体会不到父爱母爱。对于父亲憎恨的感情更多，90%的苦难都是因为他造成的，可以说毫无责任感。"},{"title":"生即是罪恶","date":"2021-09-10T12:58:06.000Z","url":"/2021/09/10/2021-09-10-%E7%94%9F%E5%8D%B3%E6%98%AF%E6%81%B6/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"当生活的痛苦超越了死亡，你将做何选择？ Live = evil,death is the best destination 今天是教师节，同时也是世界预防自杀日。请务必龃龉地、苟且地，活下去。"},{"title":"开学","date":"2021-09-05T14:46:05.000Z","url":"/2021/09/05/2021-09-05-%E5%BC%80%E5%AD%A6/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"​ 今天是开学的日子，6号就要去生产实习了。对于开学，我既开心又焦虑。开心是开学了大家都会回来，校园里也逐渐有些生气。因为留校两个月让我意识到了与人交流的重要性。日复一日地学习，回到寝室也是只有寥寥几句。我本以为我已经可以和孤独相处，但经历了这个暑假我才发现，原来我是如此害怕孤独。以前上课虽然都是一个人独来独往，但是起码那时还有课程这个纽带让整个专业里的人都联系在一起，总觉得朋友同学们还会聚在一起。暑假的时候，大家都蒙头备考。每天非饭点时期，图书馆的电梯是不动的。一切在默默运行，大家都为了自己的未来各自拼搏着忙碌着，再也没有上课时活跃的氛围，空气中弥漫着无形的压抑。焦虑是因为生产实习要占用三周的时间，而备考的日子已经所剩无几。面对考试，显然我心里是没有底气的。生活令人快乐，也令人痛苦。不管如何，剩下的日子里只管努力便是，不问结果几何但求回首无悔。"},{"title":"认识新朋友","date":"2021-09-03T14:49:44.000Z","url":"/2021/09/03/2021-09-03%20%20%E8%AE%A4%E8%AF%86%E6%96%B0%E6%9C%8B%E5%8F%8B/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"  请输入密码 "},{"title":"依然恐惧未来","date":"2021-08-15T12:47:04.000Z","url":"/2021/08/15/2021-08-15/","tags":[["live","/tags/live/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"​ 只要一停下来，脑子里就会焦虑。焦虑未来，焦虑人生，好像这辈子就这样了。自从上大学，可以说没有哪年是过得比较顺心的。别人的大学的生活似乎多姿多彩，而自己却总是多灾多难的样子。每个失眠的夜里反思着自己的人生，或许在家里人看来我考上大学似乎是一件非常成功的事情，但只有当自己上了大学。逐渐明白社会的残酷性后才懂得，你拼尽一切得到的这一切在别人眼里不过如此。你迄今为止所有的一切，其实并不值得一提。现实的毒打直接否定了你一直以来的努力，信念崩塌的痛苦强烈地撕扯着。所有的一切都没有发生根本改变，这个世界是现实的，只有你用努力和自我，令它柔软。 ​ 越长大就越能感觉到自己的渺小，努力挣扎只为能做个普通人，过着普通的生活，做着普通的事情。从小听着要努力出人头地，就天真的以为只要努力就能出人头地，现在明白以为努力便能做到一切那是一种傲慢，只有努力才能过上别人唾手可得的普通人的生活。面对命运时常感到绝望，干脆就这样被命运拍死在沙滩上算了。等自己还完了所有的恩情，除去心里的牵挂就可以随时准备死去了。 ​ 人真是一种神奇的生物，有时候会自己一个人咬着牙走了很长一段路，有时候却会因为几句话而泪流满面。我曾以为自己已经正视了自己的懦弱，但是最近发现其实并没有。我依然是那个懦弱的，遇到困难首先想着如何逃避的人。心里非常清楚，逃避解决不了任何问题反而会让问题愈发严重，即便如此还是会想着逃避以获取当下短暂的、虚假的安宁。 ​ 对未来的恐惧总是如影随形，惧怕未知，惧怕失败，害怕得不到一个好结果。内心已经被对未来的恐惧所占据，想要行动起来去抵抗，发现身体动不起来。恐惧在内心已经占据太多分量，一路以来诚惶诚恐、患得患失。明明知道这样下去不行，行动上还是放任自己。 ​ 就像一株浮萍，只能随着命运的长河漂流。无论昨夜发生了什么，清晨醒来这个城市依旧车水马龙。"},{"date":"2021-07-26T14:09:16.000Z","url":"/2021/07/26/2021-07-26/","categories":[["undefined",""]],"content":"时不时的失眠令人憔悴，无论选择哪条路，在路上遇到挫折时抑或是未来遭受打击时，都会怀疑当初自己的选择。 只能安慰自己，硬着头皮走下去。欲壑难填，人是环境的产物。当大环境鼓吹焦虑时，不受其影响的终归是少数人。而我显然是大多数，只能被环境裹挟着往前走，什么时候才能独辟蹊径呢。终归是难有坚韧的毅力以及决心，当外界逼迫时才愿意动一动。 愿最终都有一个好结果"},{"title":"计算机总线系统概述","date":"2021-06-14T13:34:31.000Z","url":"/2021/06/14/%E6%80%BB%E7%BA%BF%E7%B3%BB%E7%BB%9F/","tags":[["CS","/tags/CS/"]],"categories":[["计算机组成原理","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"content":"总线系统基础概念总线用于将计算机各个部件连接起来，成为一个整体，是多个系统功能部件之间进行数据传输的公共通道 单处理器系统中总线分为三大类 内部总线：CPU内部连接寄存器、运算部件 系统总线：计算机系统用于连接其它高速设备，存储器、通道等 I/O总线：用于连接中、低速 I/O 设备 总线的特性 物理特性：指总线的物理连接方式，包括总线的根数，总线插头、引脚数等 功能特性：描述总线中每一根线的功能 电气特性：定义每根线上信号的传递方向以及有效的电平范围 时间特性：定义了每根线在何时有效 总线连接方式通常采用适配器部件来完成 单总线系统：要总线上的所有逻辑部件都高速运行，以便某些设备需要使用总线时能迅速获得总线控制权 多总线系统：将高速设备（北桥）和低速设备（南桥）分开，用不同类型的桥扩展出不同层次的总线 总线内部结构 地址线：单向，用于传送主存与设备的地址 数据线：双向，用来传送数据 控制线：对每根线是单向（CPU发向接口，或接口发向CPU），用来指明数据传送的方向（存储器读写、I/O读写）、中断控制和定时控制等 总体总线分类数据传送总线由地址线、数据线、控制线组成 仲裁总线包括总线请求线和总线授权线 中断和同步总线用于处理带优先级的中断操作，包括中断请求线和中断认可线 公用线包括时钟信号线、电源线、地线、系统复位线以及加电或断电的时序信号线 总线仲裁集中式仲裁 链式查询 菊花链式查询，授权信号串行地从一个接口发送到下一个接口，若中间有设备请求总线则获得授权，信号不再传递。离CPU越近的设备优先级越高 该种方式优点是简单、节省线路；其缺点是优先级不能改变，不灵活，可能存在优先级低的设备饿死，对电路故障十分敏感，若中间设备故障则后面的设备都无法工作 计数器定时查询 设备通过BR线发出请求，总线仲裁器接受到请求后，在BS线为0的情况下计数，计数值通过地址线发往各设备。每个设备都有设备地址判别电路，当地址线计数值与设备地址一致时，该设备获得总线使用权，BS置1，终止计数 该种方式优点是可以通过决定是否从上次终止点开始继续计数还是从0计数来改变各个设备的优先级；其缺点是要增加线的数量 独立请求 每个设备都有一对独立的总线请求线和授权线，请求的信号在排队电路中被总线仲裁器以优先级次序处理授权 该种方式优点是响应快，优先级次序控制灵活；其缺点是线数大量增加 现代计算机基本采用独立请求方式 分布式仲裁不需要集中的总线仲裁器，每个设备都有自己的总线仲裁器。请求总线时，将它们唯一的仲裁号发送到共享的仲裁总线上，每个仲裁器将从仲裁总线上得到的号与自己比较。若仲裁总线上的号大，则不予响应并撤销其仲裁号，最后获胜者的仲裁号保留在仲裁总线上获得授权"},{"date":"2021-06-01T15:29:08.000Z","url":"/2021/06/01/%E6%9D%82%E8%B0%88/","categories":[["undefined",""]],"content":"六一快乐！"},{"title":"PSW寄存器分析","date":"2021-05-31T23:51:22.000Z","url":"/2021/06/01/FLAG%E5%AF%84%E5%AD%98%E5%99%A8/","tags":[["CS","/tags/CS/"]],"categories":[["计算机组成原理","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"content":"FLAG寄存器 存储程序状态字（PSW，program status word），存储相关指令的执行结果，为相关指令提供行为依据，用来控制CPU的相关工作方式。flag寄存器是按位起作用的，每一位都有专门的含义记录特定信息。 在32位CPU中称为为EFLAGS寄存器，64为CPU中称为RFLAGS寄存器，它们扩展出的高位地址都不使用。现代计算机中一般也叫做PSW寄存器。下面以8086为基础处理器分析该寄存器的功能 ZF（Zero Flag） 第6位标志位，零标志位。计算指令执行后，若结果为0，则zf=1，否则zf=0 PF（Parity Flag） 第2位标志位，奇偶标志位。指令执行后，若所有bit位中1的个数为偶数，则pf=1，否则pf=0 SF（Symbol Flag） 第7位标志位，符号标志位。指令执行后，若结果为负，则sf=1，否则sf=0 CF（Carry Flag） 第0位标志位，进位标志位。无符号运算中指令执行后，若产生进位，则cf=1，否则cf=0，同时也可以用作表示借位。若其值被add设置则表示进位，被sub设置则表示借位 OF（Overflow Flag） 第11位标志位，溢出标志位。有符号运算时，若产生溢出，则of=1，否则of=0 AF（Auxiliary Flag） 第4位标志位，辅助进位标志位。若操作中发生了进位或借位，则af=1，否则af=0mov al，0Fhadd al，1计算过程0000111100000001——————00010000 位3中发生了进位，af=1 IF（Interrupt-Enable Flag） 第9位标志位，中断允许标志位。决定CPU是否能够响应外部可屏蔽中断请求，若响应则if=1，否则if=0 DF（Direction Flag） 第10位标志位，方向标志位。控制SI和DI自增还是自减。若自减，则df=1，否则df=0 TF（Trap Flag） 第8位标志位，追踪标志位。若CPU进入单步调试，则tf=1，否则tf=0 "},{"title":"CSMA/CD中重传时机的确定","date":"2021-05-29T15:14:31.000Z","url":"/2021/05/29/%E6%88%AA%E6%96%AD%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8C%87%E6%95%B0%E8%A7%84%E9%81%BF%E7%AE%97%E6%B3%95/","tags":[["CN","/tags/CN/"]],"categories":[["计算机网络","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"]],"content":"截断二进制指数规避算法什么是截断二进制指数规避算法在CSMA/CD协议中，检测到碰撞我们要重传数据。那么如何选择碰撞后数据的重传的时机呢？该算法就是为了解决这个问题而提出的 如何使用该算法计算重传时机首先，发生碰撞后我们要确定一个基本的退避时间来延迟发送。假设从A发送到B的传播时延是 t ，我们将基本退避时间设置为 2t 。 其次，定义参数 k ，用于记录重传的次数。 k = min[ 重传次数，10 ]。当检测到数据碰撞时，在 0 ~ 2k - 1 的范围中随机取出一个数 r ，重传时间 R 即为 r 倍的基本退避时间 ， R = 2tr 最后，若重传 16 次仍然不能成功发送数据则向网络层发出错误信息表示网络拥挤并抛弃此帧"},{"title":"数据链路层中最小帧长问题","date":"2021-05-20T15:12:19.000Z","url":"/2021/05/20/%E6%9C%80%E5%B0%8F%E5%B8%A7%E9%95%BF/","tags":[["CN","/tags/CN/"]],"categories":[["计算机网络","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"]],"content":"数据链路层中的最小帧长是如何计算出来的众所周知，Ethernet的最小帧长是64 Byte。那么这个最小帧长是如何得到的呢？ 数据碰撞问题当多个主机挂载在bus型半双工信道上时我们都会存在一个信道争用问题，为解决这个问题我们发明了CSMA/CD协议。 当两个主机同时在bus型半双工信道上发送数据就会产生数据碰撞。数据发送过程如图所示 我们假设单向传播时延为 t ，图中发生数据碰撞时，A知道碰撞检测的时间为 2 t1 ，而B检测到碰撞的时间为 2 t2。 t = t1 + t2 最差的情况下，当A即将到达B时，B才发送数据，此时发生碰撞。所以最迟我们检测到数据碰撞的时间是 2t 如何确定最小帧长因为如果我们自身数据全部发完后才检测到数据则数据会被误认为是正常的数据而被接收，所以我们要确保我们还没有发完数据时就检测到碰撞。 因此根据上面的时延计算，我们可以得出 帧长 / 数据传输速率 &gt;= 2 t 最小帧长 = 数据传输速率 x 传播时延 x 2"},{"title":"Cache设计","date":"2021-05-07T15:06:08.000Z","url":"/2021/05/07/Cache%E8%AE%BE%E8%AE%A1/","tags":[["CS","/tags/CS/"]],"categories":[["计算机组成原理","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"content":"Cache设计Cache原理 利用程序的局部性原理，缩减CPU的访存时间，让CPU能够更好的发挥性能 空间局部性：最近被访问的块邻近的块很有可能被访问 时间局部性：最近被的访问的块很有可能被再次访问 Cache设计的两大原则 高命中率，要求高命中率减少块的置换操作 对CPU透明，即CPU访问内存和访问Cache为同一种方式，无需改变 Cache设计的四个问题 从主存取得的块如何在Cache中存放 如何访问主存放入Cache中的块 当Cache未命中时置换数据块的策略 怎样保持Cache块中数据与主存块的数据同步 三种Cache与主存地址映射策略 通常Cache相对于主存都十分小，所以主存块的哪些部分放入有限的Cache空间中是一个很重要的问题。下面有三种策略用于解决主存块在Cache中的存放位置问题 全相联映射 Cache数据块称为行，主存数据块称为块，其中行大小==块大小。全相联映射中，主存一个块地址、块号、块内容都被一起存于Cache的行中 主存中的块被复制到Cache的任意行中 CPU访问一个主存地址时，为了快速检索，指令中的块号与Cache所有行号的标记同时在比较器中比较，若命中则从Cache中读取一个字，否则在主存地址中读取 全相联映射其主要缺点是高速比较器电路难于设计和实现，因此适合小容量Cache 直接映射主存被划分为n个和Cache大小相同的区，区内的块只能存入对应Cache行内 Cache行号 i 和主存块号 j 关系为 i = j mode m，其中m为Cache的大小 直接映射其优点是硬件简单，成本低，地址变换速度快，但其缺点是每个主存块有一个固定行号可以存放。 当连续两个访存指令要求访问块号相距m整数倍的两个块时，因两个块同时映射到同一个Cache行内，所以会产生冲突，需要置换行块，导致置换操作频繁，降低Cache效率 组相联将Cache划分为若干个大小相同的组，而主存不同区内，区内的对应块可以换入Cache对应的组中，在组中可以存放在任意行 当Cache分组的大小为1时，组内只有一个块，此时为直接映射；当Caceh分组大小为整个Cache大小时，只有一个分组，此时为全相联 组相联模式结合了适度兼顾了全相联和直接映射的优点，被普遍采用 Cache替换策略 当Cache存满需要换入新块时，有三种主流的替换算法分别是 LFU算法LFU，最不经常使用算法，将一段时间内被访问次数最少的行换出。每行设置一个计数器，当新行调入Cache，该新行计数器为0。当某个行被读取一次，该行的计数器+1，需要换出行时寻找到计数器最低的行将其换出。 LRU算法LRU，近期最少使用算法，将近期内最长久未被访问过的行换出。同样如LFU为每行设置一个计数器，但是Cache行每次被命中其计数器清零，其它各行计数器+1，与LFU算法相反，需要置换出行时将计数器值最高的行换出 随机替换随机换出行，无固定规则。研究表明随机替换的性能只是稍稍逊于前两种算法 Cache写操作策略 因为Cache中的数据时主存块中的副本，在任何系统中只要存在副本就存在各副本之间数据同步的问题。当前Cache中普遍采用的同步策略有以下三种： 写回法 write back,copy back：CPU命中Cache时，只修改Cache行中的数据内容，仅当Cache该块被换出时，将数据写回主存；CPU未命中Cache时，将该块从主存复制到Cache行中，再对其修改。Cache中每行都置一个修改位，记录该块是否被修改，若该行被换出是修改位为0，则直接抛弃 写回法优点是减少访问主存的次数，但是写回法会导致Cache行中的数据与对应主存块中的数据不一致，产生隐患 全写法 write through：CPU命中Cache时，同时修改Cache行和主存块中的内容，主存和Cache同步；当CPU未命中Cache时，有两种策略，一是WTWA法，将主存块置换如Cache行中，对Cache行修改，另一种是WTNWA法，直接修改主存块，不置换入Cache中 全写法的优点是简单，Cache和主存同步，不会发生数据不一致，但是其频繁的访问主存操作导致Cache性能降低 写一次法 write once：CPU第一次命中Cache时，同时修改Cache行中和主存块中的内容，后面再命中时采用写回法的策略；CPU未命中时采用写回法策略 写一次法结合了写回法和全写法"}]