<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Born in poverty, died of numbness</title>
  
  
  <link href="https://asuhe.fun/atom.xml" rel="self"/>
  
  <link href="https://asuhe.fun/"/>
  <updated>2022-05-01T15:19:21.023Z</updated>
  <id>https://asuhe.fun/</id>
  
  <author>
    <name>Asuhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript基础(三)</title>
    <link href="https://asuhe.fun/2022/05/01/2022-05-01-TypeScript%E5%9F%BA%E7%A1%80(%E4%B8%89)/"/>
    <id>https://asuhe.fun/2022/05/01/2022-05-01-TypeScript%E5%9F%BA%E7%A1%80(%E4%B8%89)/</id>
    <published>2022-05-01T14:08:50.000Z</published>
    <updated>2022-05-01T15:19:21.023Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类"><a class="anchor" href="#类">#</a> 类</h1><p><code>typescript</code>  里的类和 <code>javascript</code>  里的类基本一样。 <code>typerscript</code>  扩展了类，它可以通过先声明的方式限制实例属性的类型，并且还引入了类似 <code>C++</code> 、 <code>Java</code>  的继承权限设定，拥有 <code>public</code> 、 <code>protect</code> 、 <code>private</code>  三种修饰符。<strong>若不声明权限则默认为 <code>public</code> </strong></p><table><thead><tr><th>修饰符</th><th>外部访问</th><th>派生类访问</th><th>自身访问</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>×</td><td>√</td><td>√</td></tr><tr><td>private</td><td>×</td><td>×</td><td>√</td></tr></tbody></table><h2 id="public"><a class="anchor" href="#public">#</a> public</h2><p><code>public</code>  修饰的属性可以在外部访问，也可以在派生类和自身实例中访问</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    course<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> course<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> course</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My course is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>course<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">let</span> man1<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'sphinx'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// sphinx</span></pre></td></tr><tr><td data-num="27"></td><td><pre>man1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is sphinx,I'm 16 years old</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">let</span> man2<span class="token operator">:</span> Student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'math'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>man2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is asuhe,I'm 16 years old </span></pre></td></tr><tr><td data-num="30"></td><td><pre>           <span class="token comment">// My course is math</span></pre></td></tr></table></figure><h2 id="protected"><a class="anchor" href="#protected">#</a> protected</h2><p><code>protected</code>  修饰的属性不可以在外部访问，但可以在派生类和自身实例中访问</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">protected</span> name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">protected</span> age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    course<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> course<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> course</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My course is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>course<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">let</span> man1<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'sphinx'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="27"></td><td><pre>man1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is sphinx,I'm 16 years old</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">let</span> man2<span class="token operator">:</span> Student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'math'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>man2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is asuhe,I'm 16 years old </span></pre></td></tr><tr><td data-num="30"></td><td><pre>           <span class="token comment">// My course is math</span></pre></td></tr></table></figure><h2 id="private"><a class="anchor" href="#private">#</a> private</h2><p><code>protected</code>  修饰的属性仅能自身实例中访问</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">let</span> man1<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'sphinx'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="16"></td><td><pre>man1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is sphinx,I'm 16 years old</span></pre></td></tr></table></figure><h2 id="readonly-vs-权限修饰符"><a class="anchor" href="#readonly-vs-权限修饰符">#</a> readonly vs 权限修饰符</h2><p>当我们希望一个属性仅可自身访问且仅可读取时，可以和 <code>readonly</code>  修饰符一起使用</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">readonly</span> id<span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>id<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id</pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="存取器"><a class="anchor" href="#存取器">#</a> 存取器</h2><p><code>TypeScript</code>  支持通过  <code>getters/setters</code>  来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。</p><p>下面来看如何把一个简单的类改写成使用  <code>get</code>  和  <code>set</code> 。 首先，我们从一个没有使用存取器的例子开始。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  firstName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'A'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  lastName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'B'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">fullName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">set</span> <span class="token function">fullName</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> names <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>p<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">'C'</span></pre></td></tr><tr><td data-num="18"></td><td><pre>p<span class="token punctuation">.</span>lastName <span class="token operator">=</span>  <span class="token string">'D'</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>p<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'E-F'</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> p<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="抽象类"><a class="anchor" href="#抽象类">#</a> 抽象类</h2><p>抽象类做为其它派生类的基类使用。 ** 它们不能被实例化。** 不同于接口，抽象类可以包含成员的实现细节。  <code>abstract</code>  关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>抽象类</pre></td></tr><tr><td data-num="3"></td><td><pre>  不能创建实例对象，只有实现类才能创建实例</pre></td></tr><tr><td data-num="4"></td><td><pre>  可以包含未实现的抽象方法</pre></td></tr><tr><td data-num="5"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">abstract</span> <span class="token function">cry</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">run</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run()'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">cry</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Dog cry()'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>dog<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Dog cry()</span></pre></td></tr><tr><td data-num="21"></td><td><pre>dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// run()</span></pre></td></tr></table></figure><h2 id="抽象类-vs-接口"><a class="anchor" href="#抽象类-vs-接口">#</a> 抽象类 vs 接口</h2><p>接口可以理解为里面所有属性都是 <code>abstract</code> ，而且使用了接口的类必须按接口的规格实现。接口的函数只能是定义，不能有函数体不能实现。</p><p>抽象类里的函数方法可以为 <code>abstract</code>  也可以不为 <code>abstract</code> ，而且抽象类的函数方法可以有函数体能够去实现。若抽象类的函数方法被实现类重写了，那么在实现类调用该方法时会调用实现类重写的那个方法。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="typescript" scheme="https://asuhe.fun/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础(二)</title>
    <link href="https://asuhe.fun/2022/04/30/2022-04-30-TypeScript%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
    <id>https://asuhe.fun/2022/04/30/2022-04-30-TypeScript%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</id>
    <published>2022-04-30T10:56:33.000Z</published>
    <updated>2022-05-01T14:09:38.369Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="接口"><a class="anchor" href="#接口">#</a> 接口</h1><p>接口是对象的状态 (属性) 和行为 (方法) 的抽象 (描述)，<strong>本质上是一种对对象的约束</strong>。例如我们要求一个对象必须要有 <code>id</code>  这个属性，且属性值必须为 <code>number</code> 。这在 <code>javascript</code>  上是做不到的，但在 <code>typescript</code>  中我们可以利用接口来实现。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求：对象里必须要有 id 这个属性，且属性值为 number 类型</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 声明一个接口</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">IObj</span><span class="token punctuation">&#123;</span> <span class="token comment">// 用 I 开头表示这是一个接口</span></pre></td></tr><tr><td data-num="4"></td><td><pre>id<span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">let</span> obj1<span class="token operator">:</span>IObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    name<span class="token operator">:</span><span class="token string">'asuhe'</span> <span class="token comment">//error 接口中未声明 name 属性</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">let</span> obj2<span class="token operator">:</span>IObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    id<span class="token operator">:</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token comment">//error 数据类型错误</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="可选属性-参数"><a class="anchor" href="#可选属性-参数">#</a> 可选属性 | 参数</h2><p>在接口里约定的属性或参数都是必选的，若我们要求在接口中约定一些属性为可选属性那么只需要在后面加上 <code>?</code></p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求：要求一个人的信息必须有名字，身高体重可选填</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    height<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    weight<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">let</span> obj<span class="token operator">:</span>IPerson <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>name<span class="token operator">:</span><span class="token string">'asuhe'</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="只读属性-参数"><a class="anchor" href="#只读属性-参数">#</a> 只读属性 | 参数</h2><p>若我们想对象里某个参数只能读取不能修改，那么仅需在前面加上 <code>readonly</code></p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求：货物编号只能读取不能修改</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">IGoods</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">readonly</span> id<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    weight<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">let</span> obj<span class="token operator">:</span>IGoods <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    name<span class="token operator">:</span><span class="token string">'asuhe'</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>obj<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//error 不能赋值，只读属性</span></pre></td></tr></table></figure><h2 id="readonly-vs-const"><a class="anchor" href="#readonly-vs-const">#</a> readonly vs const</h2><p>最简单判断该用  <code>readonly</code>  还是  <code>const</code>  的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用  <code>const</code> ，若做为属性则使用  <code>readonly</code> 。</p><h2 id="函数类型"><a class="anchor" href="#函数类型">#</a> 函数类型</h2><p>接口能够描述  <code>JavaScript </code> 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>接口可以描述函数类型 (参数的类型与返回的类型)</pre></td></tr><tr><td data-num="3"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">ISum</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">let</span> sum<span class="token operator">:</span><span class="token function-variable function">ISum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr></table></figure><h1 id="类中使用接口"><a class="anchor" href="#类中使用接口">#</a> 类中使用接口</h1><p>与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>  类类型：实现接口</pre></td></tr><tr><td data-num="3"></td><td><pre>  1. 一个类可以实现多个接口</pre></td></tr><tr><td data-num="4"></td><td><pre>  2. 一个接口可以继承多个接口</pre></td></tr><tr><td data-num="5"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">interface</span> <span class="token class-name">IStudent</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    course<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 类实现接口</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 一个类实现多个接口</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">IPerson</span><span class="token punctuation">,</span> IStudent <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    course<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> course<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token comment">// 一个接口继承多个接口</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">interface</span> <span class="token class-name">IStudentAndPerson</span> <span class="token keyword">extends</span> <span class="token class-name">IPerson</span><span class="token punctuation">,</span>IStudent<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    </pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="typescript" scheme="https://asuhe.fun/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础(一)</title>
    <link href="https://asuhe.fun/2022/04/30/2022-04-30-TypeScript%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>https://asuhe.fun/2022/04/30/2022-04-30-TypeScript%E5%9F%BA%E7%A1%80(%E4%B8%80)/</id>
    <published>2022-04-30T01:59:45.000Z</published>
    <updated>2022-04-30T09:51:02.231Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境搭建"><a class="anchor" href="#环境搭建">#</a> 环境搭建</h1><p>因为 <code>TypeScript</code>  是无法直接在浏览器上运行的，所以需要先将 <code>Typescript</code>  编译成 <code>Javascript</code>  代码后才能使用</p><h2 id="安装ts"><a class="anchor" href="#安装ts">#</a> 安装 TS</h2><p>全局安装 <code>Typescript</code> ：</p><pre><code class="language-sh">npm install -g typescript</code></pre><p>检查安装情况</p><pre><code class="language-sh">tsc -v</code></pre><h2 id="手动编译"><a class="anchor" href="#手动编译">#</a> 手动编译</h2><p>手动编译仅需在目录下 <code>tsc 文件名.ts</code> ，例如：</p><pre><code class="language-sh">tsc index.ts</code></pre><h2 id="vscode自动编译"><a class="anchor" href="#vscode自动编译">#</a> vscode 自动编译</h2><p>每次都要自行编译很麻烦，在 <code>vscode</code>  情况下我们可以使用监视任务让他自动编译。首先生成 <code>ts</code>  配置文件：</p><pre><code class="language-sh">// 生成配置文件tsconfig.jsontsc --init</code></pre><p>然后根据需要修改配置文件，常见的修改有设置输出 js 文件的目录、开启严格模式等。<strong>根据每项参数后面的注解按需修改配置</strong>。</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//tsconfig.json 内设置编译好的 js 文件输出的目录</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token property">"outDir"</span><span class="token operator">:</span><span class="token string">"./js"</span> <span class="token comment">// 输出到当前文件夹下的 js 文件夹里面</span></pre></td></tr></table></figure><p>最后启动监视任务，监视 <code>tsconfig.json</code>  文件</p><pre><code class="language-sh">终端 -&gt; 运行任务 -&gt; 监视tsconfig.json</code></pre><p><img data-src="https://s2.loli.net/2022/04/30/5bTuPGsoLtiM3Sc.png" alt="image-20220430102519183" /></p><h2 id="webpack打包编译"><a class="anchor" href="#webpack打包编译">#</a> webpack 打包编译</h2><p>下载依赖并配置使用即可</p><pre><code class="language-sh">yarn add -D typescript  // 下载ts编译包yarn add -D ts-loader   // 下载ts的loader</code></pre><h1 id="基础类型"><a class="anchor" href="#基础类型">#</a> 基础类型</h1><p><strong>TS 的基本数据类型和 JS 是一致的。</strong></p><p>除了基本数据类型，TS 新增了 <code>统一类型的数组</code> 、 <code>元组</code> 、 <code>枚举</code> 、 <code>any</code>  和 <code>void</code>  类型。</p><h2 id="变量类型指定"><a class="anchor" href="#变量类型指定">#</a> 变量类型指定</h2><p>我们可以像强类型语言一样指定变量的类型，仅需在后面 <code>:指定类型</code> 就可以完成类型检查</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> num1<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> num2<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 自动类型推断</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 根据初始赋值推断出变量类型为 number</span></pre></td></tr><tr><td data-num="5"></td><td><pre>num3 <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="6"></td><td><pre>num3 <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token comment">// error</span></pre></td></tr></table></figure><h2 id="函数返回值指定"><a class="anchor" href="#函数返回值指定">#</a> 函数返回值指定</h2><p>指定函数的返回值类型</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span> <span class="token comment">// 指定函数返回值类型为 number</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="数组"><a class="anchor" href="#数组">#</a> 数组</h2><p>TS 的数组定义像 <code>C/C++</code>  那样的强类型语言一样，指定数组内只能存同种类型的数据。可以在元素类型后面接上 <code>[]</code> ，表示由此类型元素组成的一个数组：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> numArr<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 指定只能存数字类型的数据</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> numArr<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token comment">// 能强行通过编译，但是会报错</span></pre></td></tr></table></figure><p>或者使用泛型声明：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> numArr<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr></table></figure><h2 id="元组"><a class="anchor" href="#元组">#</a> 元组</h2><p>元组类型允许表示一个已知元素数量和类型的数组， <code>各元素的类型不必相同</code> 。听起来像 <code>javascript</code>  原生的数组，但是并不一样。元组的限制很大，会固定数据的排列方式和数组大小。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token comment">// 和 let arr = [] 不一样</span></pre></td></tr><tr><td data-num="2"></td><td><pre>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="3"></td><td><pre>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span> <span class="token comment">//error 报错</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 当访问一个已知索引的元素，能够得到正确的类型，会有智能提示.js 原生数组不具有</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// error</span></pre></td></tr></table></figure><h2 id="枚举"><a class="anchor" href="#枚举">#</a> 枚举</h2><p>枚举类型 <code>enum</code>  类似 <code>C/C++</code>  里的枚举，能够修改枚举的值。默认枚举值是 1，后续枚举值依次递增 + 1 的</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    red<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    green<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    yellow<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    blue</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 枚举值默认从 0 递增</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token comment">// 0</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment">// 1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr></table></figure><p>可以手动指定枚举值</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    red <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    green<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    yellow <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    blue</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 手动指定枚举值后，后续枚举值会在此基础上 + 1 递增</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token comment">// 100</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment">// 101</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span> <span class="token comment">// 200</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token comment">// 201</span></pre></td></tr></table></figure><p>还可以利用类似索引的方式反过来取值</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    red <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    green<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    yellow <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    blue</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 可以根据对应的枚举值反向取值</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// red</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// green</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// yellow</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// blue</span></pre></td></tr></table></figure><h2 id="any"><a class="anchor" href="#any">#</a> any</h2><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用  <code>any</code>  类型来标记这些变量：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token comment">// ok</span></pre></td></tr></table></figure><h2 id="void"><a class="anchor" href="#void">#</a> void</h2><p>某种程度上来说， <code>void</code>  类型像是与  <code>any</code>  类型相反，它 <code>表示没有任何类型</code> 。 当一个函数没有返回值时，你通常会见到其返回值类型是  <code>void</code> ：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 表示没有任何类型，一般用来说明函数的返回值不能是 undefined 和 null 之外的值 */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn()'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// return undefined</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// return null</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// return 1 // error</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="联合类型"><a class="anchor" href="#联合类型">#</a> 联合类型</h2><p>联合类型（Union Types）表示取值可以为多种类型中的一种</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求 1: 定义一个一个函数得到一个数字或字符串值的字符串形式值</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">toString2</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 需求 2: 定义一个一个函数得到一个数字或字符串值的长度</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// return x.length // error</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="类型断言"><a class="anchor" href="#类型断言">#</a> 类型断言</h2><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式。 其一是 <code>&lt;&gt;</code>  语法，另一个为  <code>as</code>  语法</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>类型断言 (Type Assertion): 可以用来手动指定一个值的类型</pre></td></tr><tr><td data-num="3"></td><td><pre>语法:</pre></td></tr><tr><td data-num="4"></td><td><pre>    方式一: &lt; 类型 > 值</pre></td></tr><tr><td data-num="5"></td><td><pre>    方式二：值 as 类型  tsx 中只能用这种方式</pre></td></tr><tr><td data-num="6"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* 需求：定义一个函数得到一个字符串或者数值数据的长度 */</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="typescript" scheme="https://asuhe.fun/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>数组去重、扁平化、函数柯里化、new、instanceof</title>
    <link href="https://asuhe.fun/2022/03/05/2022-03-05-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E3%80%81%E6%89%81%E5%B9%B3%E5%8C%96%E3%80%81%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81new%E3%80%81instanceof/"/>
    <id>https://asuhe.fun/2022/03/05/2022-03-05-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E3%80%81%E6%89%81%E5%B9%B3%E5%8C%96%E3%80%81%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81new%E3%80%81instanceof/</id>
    <published>2022-03-05T04:42:11.000Z</published>
    <updated>2022-04-30T09:50:11.033Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数组去重"><a class="anchor" href="#数组去重">#</a> 数组去重</h1><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="利用set数据结构"><a class="anchor" href="#利用set数据结构">#</a> 利用 Set 数据结构</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 利用 es6 的 set 数据结构</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="利用arrayprototypefilter函数"><a class="anchor" href="#利用arrayprototypefilter函数">#</a> 利用 Array.prototype.filter 函数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment">// 判断是否有出现索引号不一致情况，若有则说明有重复</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="利用arrayprototypeincludes函数"><a class="anchor" href="#利用arrayprototypeincludes函数">#</a> 利用 Array.prototype.includes 函数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    </pre></td></tr><tr><td data-num="4"></td><td><pre>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 判断新数组里是否有该 item</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="利用arrayprototypeindexof函数"><a class="anchor" href="#利用arrayprototypeindexof函数">#</a> 利用 Array.prototype.indexOf 函数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    </pre></td></tr><tr><td data-num="4"></td><td><pre>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token comment">// 若 item 从未出现在新数组里，将 item 加入新数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// if(!newArr.includes(item)) newArr.push(item)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="数组扁平化"><a class="anchor" href="#数组扁平化">#</a> 数组扁平化</h1><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 原生</span></pre></td></tr><tr><td data-num="3"></td><td><pre>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="利用字符串转换"><a class="anchor" href="#利用字符串转换">#</a> 利用字符串转换</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">let</span> arrStr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> arrStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> newArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="完美版本不改变变量类型"><a class="anchor" href="#完美版本不改变变量类型">#</a> 完美版本，不改变变量类型</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>maxDepth <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    </pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 利用迭代</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> maxDepth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token operator">++</span>counter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span>        </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="柯里化"><a class="anchor" href="#柯里化">#</a> 柯里化</h1><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">curring</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span><span class="token operator">...</span>argsOne</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 若参数不够则继续返回函数，继续接收参数</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>argsOne<span class="token punctuation">.</span>length<span class="token operator">&lt;</span>fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>argsTwo</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">curring</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token operator">...</span>argsOne<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>argsTwo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 若参数足够则直接返回函数调用结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">...</span>argsOne<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d <span class="token operator">+</span> e<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">curring</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="new"><a class="anchor" href="#new">#</a> new</h1><p>new 操作符做的事情</p><ul><li>判断操作对象是否为函数，若是则创建一个空对象。若不是则抛出类型错误</li><li>将该空对象的原型指向构造函数的原型</li><li>执行构造函数，将 this 指向该空对象</li><li>判断构造函数执行结果，若为对象则返回对象，若不是则返回开始时创建的对象</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Constructor<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token keyword">if</span><span class="token punctuation">(</span>Constructor <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>       <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Constructor</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>       <span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>       <span class="token comment">// 值不是函数类型，抛出错误</span></pre></td></tr><tr><td data-num="8"></td><td><pre>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">TypeError:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Constructor<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is not a Constructor</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="instanceof"><a class="anchor" href="#instanceof">#</a> instanceof</h1><p><code>instanceof</code>  就是根据构造函数的原型链网上查找，找到即返回 <code>true</code> ，找不到则返回 <code>false</code></p><ul><li>判断右操作数是否为函数类型，是则继续。否则返回类型错误</li><li>左操作数的原型不是则继续获取该原型的原型</li><li>若最终找到 <code>Object.prototype</code>  的 <code>__proto</code>  则返回 false，查找失败。否则返回 true</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> right <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">let</span> Lproto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token comment">// 找到终点 null 时，直接返回 false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Lproto<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>Lproto <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            Lproto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Lproto<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Right-hand side of 'instanceof' is not callable</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="tips" scheme="https://asuhe.fun/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础(五)</title>
    <link href="https://asuhe.fun/2022/03/04/2022-03-04-VUE%E5%9F%BA%E7%A1%80(%E4%BA%94)/"/>
    <id>https://asuhe.fun/2022/03/04/2022-03-04-VUE%E5%9F%BA%E7%A1%80(%E4%BA%94)/</id>
    <published>2022-03-04T06:16:34.000Z</published>
    <updated>2022-03-05T15:45:30.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue高级特性"><a class="anchor" href="#vue高级特性">#</a> Vue 高级特性</h1><h2 id="自定义v-model"><a class="anchor" href="#自定义v-model">#</a> 自定义 v-model</h2><p>当我们需要在自定义的组件上使用 <code>v-model</code>  属性时，就需要自己去实现父子组件里的 <code>v-model</code>  通信了。用 <code>props</code>  传值，子组件将需要改变的值接收，然后使用 <code>model</code>  添加自定义事件将其绑定在标签上。</p><pre><code class="language-vue">// 父组件&lt;template&gt;&lt;p&gt;        &#123;&#123;name&#125;&#125;    &lt;/p&gt;&lt;Son v-model=&quot;name&quot; /&gt;&lt;/template&gt;&lt;scirpt&gt;import Son from './Son'export default &#123;    components:&#123;    Son    &#125;,    data()&#123;        return &#123;        name:'asuhe'        &#125;    &#125;&#125;&lt;/scirpt&gt;</code></pre><pre><code class="language-vue">// 子组件&lt;template&gt;&lt;input type=&quot;text&quot; :value=&quot;text&quot; @input=&quot;$emit('change',$event.target.value)&quot; &gt;&lt;/template&gt;&lt;scirpt&gt;export default &#123;    model:&#123;    prop:'name', // 对应 props的name    event:'change'    &#125;    props:&#123;    name:&#123;            type:String,            default:1        &#125;    &#125;&#125;&lt;/scirpt&gt;</code></pre><h2 id="nexttick"><a class="anchor" href="#nexttick">#</a> $nextTick</h2><p>因为 vue 是异步渲染的。在其运作过程中，data 数据改变后不会立马渲染 DOM，而是用 <code>Document.createDocumentFragment</code>  创建文档碎片将多次 data 数据修改后的所有 DOM 操作整合成一次再去插入 DOM 中进行渲染，这也是 vue 性能优秀的原因之一。</p><p>在 DOM 渲染之后，vue 提供了一个 <code>$nextTick</code>  函数，它会在 DOM 渲染之后触发，我们可以利用它来获取最新的 DOM 节点。</p><pre><code class="language-vue">&lt;template&gt;&lt;p&gt;        &#123;&#123;name&#125;&#125;    &lt;/p&gt;&lt;/template&gt;&lt;script&gt;export default &#123;        data()&#123;            return &#123;                name:'zhangsan'            &#125;        &#125;,        mounted()&#123;this.$nextTick(()=&gt;&#123;                console.log('调用了$nextTick');            &#125;)        &#125;    &#125;&lt;/script&gt;</code></pre><h2 id="slot"><a class="anchor" href="#slot">#</a> slot</h2><p>当一个组件会被多次使用，且里面大部分内容不变仅有非常少部分的结构改变时，可以使用 slot 插槽，将其理解为占位符。该种通信方式适用于父组件给子组件传递数据，但它与其它通信不同的是，它可以传递结构给子组件，子组件中的 <code>slot</code>  标签本质上就是一个占位符。若父组件给其传递 <code>template</code>  则使用父组件传递过来的 <code>template</code> ，否则使用默认定义的 <code>template</code> 。插槽又分为默认插槽、具名插槽和作用域插槽。</p><p><strong>默认插槽约定成俗只能有一个，具名插槽就是在默认插槽的基础上加上 <code>name</code>  属性唯一标识这个插槽</strong>，这样父组件在传递数据的时候可以根据名字精准传递到指定的插槽中。</p><p>作用域插槽中子组件的 slot 可以通过 属性传递值给父组件，然后父组件可以根据不同需求改变这个 slot 内部的显示结构，把子组件的值，传给父组件固定的区域进行操作。父组件的数据是给子组件展示的。子组件展示过程当中，数据的结构由父组件决定的。</p><h3 id="默认插槽"><a class="anchor" href="#默认插槽">#</a> 默认插槽</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 子组件放置插槽</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"asu"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 父组件传递数据</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">&lt;</span>button<span class="token operator">></span>点击<span class="token operator">&lt;</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"asu"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://asuhe.fun"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr></table></figure><p>作用域插槽</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 父组件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"&#123;todo,index&#125;"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"todo.isOver"</span> style<span class="token operator">=</span><span class="token string">"color:hotpink"</span><span class="token operator">></span>√ <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">2</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token comment">// 父组件控制子组件的样式</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 子组件</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>slot <span class="token operator">:</span>todo<span class="token operator">=</span><span class="token string">"todo"</span> <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">3</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr></table></figure><p>作用域插槽接收子组件数据时的指令：</p><ul><li><p><code>slot</code>  属性弃用，具名插槽通过指令参数 <code>v-slot:插槽名</code>  的形式传入，可以简化为  <code>#插槽名</code></p></li><li><p><code>slot-scope</code>  属性弃用，作用域插槽通过 <code>v-slot:xxx=&quot;slotProps&quot;</code>  的 slotProps 来获取子组件传出的属性</p></li><li><p><code>v-slot</code>  属性只能在 <code>&lt;template&gt;</code>  上使用，但在【<strong>只有默认插槽时</strong>】可以在组件标签上使用</p></li></ul><h4 id="注意事项"><a class="anchor" href="#注意事项">#</a> 注意事项</h4><ol><li>默认插槽名为 <code>default</code> ，可以省略 <code>default</code>  直接写 <code>v-slot</code> ，<br />缩写为 #时不能不写参数，写成 <code>#default</code> （这点所有指令都一样，v-bind、v-on）</li><li>多个插槽混用时， <code>v-slot</code>  不能省略 <code>default</code></li><li>同样可以通过解构获取 <code>v-slot=&#123;user&#125;</code> , 还可以重命名 <code>v-slot=&quot;&#123;user: newName&#125;&quot;</code>  和定义默认值 <code>v-slot=&quot;&#123;user = '默认值'&#125;&quot;</code></li><li>插槽名可以是动态变化的  <code>v-slot:[slotName]</code></li></ol><h2 id="动态组件"><a class="anchor" href="#动态组件">#</a> 动态组件</h2><p>所谓动态组件就是在一个页面中，各个组件的组成是不一样的。但是在同一个路由下，里面的二级路由组合可能经常变动。有些组件我们选择展示，有些组件我们选择不展示。这种时候就可以使用动态组件。</p><pre><code class="language-vue">// 动态组件 Son&lt;template&gt;&lt;p&gt;asuhe&lt;/p&gt;&lt;/template&gt;</code></pre><pre><code class="language-vue">// 父组件&lt;template&gt;// 用 Component 标签表示动态组件 is为动态组件的名称&lt;Component :is=&quot;NextTickName&quot;&gt;&lt;/Component&gt;/* 不能直接让 is 为具体的组件名称，必须为变量 错误用法 报错 &lt;Component is=&quot;Son&quot;&gt;&lt;/Component&gt; */&lt;/template&gt;&lt;script&gt;import Son from './Son'export default &#123;    components:&#123;        Son    &#125;,    data()&#123;        return &#123;            NextTickName:'Son'        &#125;    &#125;&#125;&lt;/script&gt;</code></pre><h2 id="异步组件"><a class="anchor" href="#异步组件">#</a> 异步组件</h2><p>在某些场景下不需要加载全部的组件，我们只需要加载部分必要组件，当某些功能被使用到了我们就可以再去加载那些组件。这时我们就可以利用异步加载组件的技术，使用 <code>import()</code>  函数来实现这个功能，可以对我们的页面有非常大的性能提升。路由懒加载就是利用这个原理</p><pre><code class="language-vue">// 异步的组件&lt;template&gt;&lt;p&gt;AsyncComponent&lt;/p&gt;&lt;/template&gt;</code></pre><pre><code class="language-vue">// 父组件&lt;template&gt;&lt;Son v-if=&quot;show&quot;&gt;&lt;/Son&gt;&lt;button @click=&quot;load&quot;&gt;点击加载子组件&lt;/button&gt;&lt;/template&gt;&lt;script&gt;// 同步引入组件 import Son from './Son'export default &#123;    components:&#123;       // 异步加载组件          Son:()=&gt; import('./Son')    &#125;,    data()&#123;      return &#123;          show:false      &#125;      &#125;,    methods:&#123;        load()&#123;            this.show = true;        &#125;    &#125;&#125;&lt;/script&gt;</code></pre><h2 id="keep-alive"><a class="anchor" href="#keep-alive">#</a> keep-alive</h2><p>正常情况下当我们切换组件时，组件对象会被销毁。有时我们不希望如此，使用 <code>keep-alive</code>  可以将组件缓存下来。当我们在组件里来回切换的时候组件实例会被保存，不会被销毁所以也不用重复渲染，能够极大提升页面性能。</p><pre><code class="language-vue">// 保活组件&lt;template&gt;&lt;p&gt;AsyncComponent&lt;/p&gt;&lt;/template&gt;</code></pre><pre><code class="language-vue">&lt;template&gt;&lt;p&gt;&lt;/p&gt;&lt;keep-alive&gt;        &lt;/keep-alive&gt;&lt;/template&gt;&lt;script&gt;import Son from './Son'export default &#123;    components:&#123;        Son    &#125;,    data()&#123;        return &#123;                    &#125;    &#125;&#125;&lt;/script&gt;</code></pre><h2 id="mixin"><a class="anchor" href="#mixin">#</a> mixin</h2><p>html、js、css 相同时我们会封装组件。单个组件里 js 代码重复我们会封装函数。当不同的组件 js 代码重复  封装混合时，我们就可以使用 <code>minx</code>  混入技术，重用 js 代码。新建一个 myminxi.js 文件 在 js 文件中暴露一个对象 对象内部可以有 data methods computed...  会将 js 文件中暴露出的数据 方法等混入到组件内部。</p><h3 id="使用"><a class="anchor" href="#使用">#</a> 使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 在组件内部引入 import myminxi from './myminxi.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 使用 mixins:[mymixin]  例如:</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mixin<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mymixin'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'Daughter'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    mixins<span class="token operator">:</span><span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        money<span class="token operator">:</span><span class="token number">1000</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// myminx.js</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> mixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">borrowMoney</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> count</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">gaveMoney</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> count</pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 给父组件增加 count</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>money <span class="token operator">+=</span> count</pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="mixin技术的特点"><a class="anchor" href="#mixin技术的特点">#</a> mixin 技术的特点</h3><ul><li>可以提高代码复用，优化性能</li><li>变量来源不明确，不利于阅读</li><li>多 mixin 可能会造成命名冲突</li><li>mixin 的组件可能会出现多对多的关系，复杂度较高</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>性能优化(二)</title>
    <link href="https://asuhe.fun/2022/02/23/2022-02-23-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://asuhe.fun/2022/02/23/2022-02-23-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-02-23T05:47:57.000Z</published>
    <updated>2022-03-05T15:44:50.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="页面优化"><a class="anchor" href="#页面优化">#</a> 页面优化</h1><p>一个页面从输入 <code>url</code>  到最终呈现整个流程可以分为资源加载过程和页面渲染过程。优化页面时我们可以从这两个角度去思考得到一些性能调优的思路</p><h2 id="加载过程"><a class="anchor" href="#加载过程">#</a> 加载过程</h2><ul><li>DNS 预取：首先从地址栏输入一个 <code>url</code>  我们需要将 <code>url</code>  地址解析，获取其中的主机地址，然后再对主机地址发送请求获取资源。这里我们先需要进行 <code>DNS</code>  查询，而 <code>DNS</code>  查询这个过程我们可以让浏览器进行 <code>DNS预取</code> 加快查询，电脑主机会先从本机 DNS 缓存中查找域名映射，若没有则会默认进行 <code>DNS递归查询</code> 。</li><li>TCP preconnect：tcp 调优、HTTP/2、keep-alive</li><li>http 缓存：让本地客户端缓存一些常用资源、from cache、from disk</li><li>CND 加速：多地分布服务器资源</li><li>合并请求：如雪碧图、nignx 模块、SSR 服务端渲染</li><li>减小资源体积：减小 cookie 体积（为什么 cookie 才 4KB 容量）、图片压缩、gzip 压缩</li><li>文档加载：css 样式放在 html 文档头部，js 脚本放在 html 文档末尾、异步加载 js</li></ul><h2 id="渲染过程"><a class="anchor" href="#渲染过程">#</a> 渲染过程</h2><ul><li>合并 DOM 操作，减少 DOM 操作</li><li>尽早开始执行 js，用 DOMContentLoad</li><li>懒加载</li><li>对 DOM 查询进行缓存</li><li>SSR 服务端渲染</li><li>使用防抖和节流</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="tips" scheme="https://asuhe.fun/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>this指向机制</title>
    <link href="https://asuhe.fun/2022/02/22/2022-02-22-this%E6%8C%87%E5%90%91%E6%9C%BA%E5%88%B6/"/>
    <id>https://asuhe.fun/2022/02/22/2022-02-22-this%E6%8C%87%E5%90%91%E6%9C%BA%E5%88%B6/</id>
    <published>2022-02-22T03:36:05.000Z</published>
    <updated>2022-04-30T03:58:40.935Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="this在不同情况下的指向"><a class="anchor" href="#this在不同情况下的指向">#</a> This 在不同情况下的指向</h1><h2 id="this所处的场景"><a class="anchor" href="#this所处的场景">#</a> This 所处的场景</h2><p>使用 <code>this</code>  的场景可大致分为下面几类：</p><ul><li>普通函数调用： <code>this</code>  指向全局对象</li><li>class 调用： <code>this</code>  指向 <code>class</code>  实例</li><li>bind、call、apply 调用： <code>this</code>  指向传入的对象</li><li>作为对象方法： <code>this</code>  指向对象实例</li><li>箭头函数</li></ul><p>不同的场景 <code>this</code>  的指向会发生变化，但有它们都有一个共同点，那就是 ** <code>this</code>  是在执行时才确定其最终指向，而不是在定义时确定 **。这一点和<strong>自由变量</strong>的查找有很大不同。</p><h2 id="箭头函数的this"><a class="anchor" href="#箭头函数的this">#</a> 箭头函数的 this</h2><ul><li>箭头函数没有自己的 <code>this</code> ，它的 <code>this</code>  在<strong>定义时</strong>继承于上级作用域</li><li>箭头函数的 <code>this</code>  不能被 <code>call、apply、bind</code>  等函数改变</li><li>箭头函数没有 <code>prototype</code> 。综上它不能用作构造函数用 <code>new</code>  操作符</li><li>箭头函数没有 <code>arguments</code>  对象</li><li>箭头函数不能用作 <code>generator</code>  函数</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://asuhe.fun/tags/javascript/"/>
    
    <category term="CS" scheme="https://asuhe.fun/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>重新理解html</title>
    <link href="https://asuhe.fun/2022/01/21/2022-01-21-%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3html/"/>
    <id>https://asuhe.fun/2022/01/21/2022-01-21-%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3html/</id>
    <published>2022-01-21T01:48:51.000Z</published>
    <updated>2022-03-05T06:05:12.894Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="html语义化"><a class="anchor" href="#html语义化">#</a> HTML 语义化</h2><p>所谓 <code>html</code>  语义化就是用语义化标签去搭建网页结构。我们可以看如下两段代码体会语义化：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>// 代码一</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>列表</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>------</pre></td></tr><tr><td data-num="12"></td><td><pre>// 代码二</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>列表</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>   </pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>通过 css 的控制，上面两种代码我们可以实现同一效果。对比这两种代码我们可以明显感觉出<strong>代码二</strong>更加符合人的阅读习惯，利于后期维护。同时语义化的代码可以更好的让搜索引擎抓取，有利于让搜索引擎分清网页内容主次，利于 SEO。由此我们可以总结出 <code>HTML</code>  语义化的优点：</p><ul><li>增加代码可读性，方便开发人员阅读</li><li>利于 SEO，方便搜索引擎匹配</li></ul><h2 id="html常用标签"><a class="anchor" href="#html常用标签">#</a> HTML 常用标签</h2><p><code>HTML</code>  标签按照其特性我们可以将其大致划分为两类，分别是块级元素和内联元素。块级元素的特点是无论其内容的多少都会独占一行，块级元素内部可以继续嵌套其它行内元素和块级元素。而内联元素的大小通常根据其内容来决定，一般情况下内联元素内部只能包含数据以及其它内联元素。</p><p>常见块级元素：h1 (所有标题标签)、div、p、form、header、footer、ul、ol...</p><p>常见内联元素：img、input、button、label、span、textarea...</p><h2 id="src-和-href-的区别"><a class="anchor" href="#src-和-href-的区别">#</a> src 和 href 的区别</h2><p>src 和 href 都是<strong>用来引用外部的资源</strong>，它们的区别如下：</p><ul><li><strong>src：</strong> 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src 会将其指向的资源下载并应⽤到⽂档内，如请求 js 脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般 js 脚本会放在页面底部。</li><li><strong>href：</strong> 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在 a、link 等标签上。</li></ul><h2 id="script-标签中-defer-和-async-的区别"><a class="anchor" href="#script-标签中-defer-和-async-的区别">#</a> script 标签中 defer 和 async 的区别</h2><p>如果没有 defer 或 async 属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。</p><p>下图可以直观的看出三者之间的区别:</p><p><img data-src="https://s2.loli.net/2022/02/28/CmN8oBEu4HzWgn6.png" alt="image.png" /></p><p>其中蓝色代表 js 脚本网络加载时间，红色代表 js 脚本执行时间，绿色代表 html 解析。</p><p><strong>defer 和 async 属性都是去异步加载外部的 JS 脚本文件，它们都不会阻塞页面的解析</strong>，其区别如下：</p><ul><li>** 执行顺序：** 多个带 async 属性的标签，不能保证加载的顺序；多个带 defer 属性的标签，按照加载顺序执行；</li><li><strong>脚本是否并行执行：<strong>async 属性，表示</strong>后续文档的加载和执行与 js 脚本的加载和执行是并行进行的</strong>，即异步执行；defer 属性，加载后续文档的过程和 js 脚本的加载 (此时仅加载不执行) 是并行进行的 (异步)，js 脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded 事件触发执行之前。</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CS" scheme="https://asuhe.fun/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>DOM树工作原理</title>
    <link href="https://asuhe.fun/2022/01/05/2022-01-05-DOM%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
    <id>https://asuhe.fun/2022/01/05/2022-01-05-DOM%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</id>
    <published>2022-01-05T08:56:45.000Z</published>
    <updated>2022-03-05T06:05:29.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是dom"><a class="anchor" href="#什么是dom">#</a> 什么是 DOM</h1><p>平时我们写的 <code>html</code>  标签本质上就是一堆字符串， <code>html</code>  文件组成的字节流实际上是无法被浏览器渲染引擎理解的。为了让渲染引擎能够解析这些字符串，并且让 <code>JavaScript</code>  能够动态操纵网页元素而不是直接操作一堆字符串，于是就有了 <code>DOM</code>  这个概念。 <code>DOM</code>  让 <code>html</code>  文档能够有结构化的表述。在渲染引擎中， <code>DOM</code>  主要有三个层面的作用：</p><ul><li>从页面的角度来看， <code>DOM</code>  就是生成页面的基本数据结构</li><li>从 <code>JavaScript</code>  的角度来看， <code>DOM</code>  提供了接口让 <code>JavaScript</code>  有能力操作页面的元素，改变页面的结构、样式和内容</li><li>从安全的角度来看， <code>DOM</code>  提供了一个安全的容器，让一些不安全的内容直接在 <code>DOM</code>  解析的阶段就被排除了</li></ul><h1 id="dom树的生成"><a class="anchor" href="#dom树的生成">#</a> DOM 树的生成</h1><p>上面我们提到渲染引擎无法直接识别 <code>html</code>  文档字节流，所以在渲染引擎渲染页面之前 <code>html</code>  文档会被交给 <code>HTML</code>  解析器，让它先把 <code>html</code>  文档转换为 <code>DOM</code>  结构，再供渲染引擎使用。</p><p><code>HTML</code>  解析器在解析 <code>html</code>  文档时是一边加载一边解析的，也就是说 <code>html</code>  文档加载了多少内容它就解析多少内容，而不是等 <code>html</code>  文档全部加载完才开始解析内容的。这就像编译型语言和解释型语言，显然 <code>HTML</code>  解析器的工作模式是同解释型语言一样的。</p><p>在加载页面时，浏览器网络进程接收到响应头后会根据响应头中 <code>content-type</code>  字段来判断文件类型，接着启动相应进程去处理接收到的文件。如 <code>html</code>  文件的 <code>content-type</code>  字段是 <code>text/html</code> ，浏览器就会启动一个渲染进程去处理它。渲染进程启动完，网络进程和渲染进程之间会建立一个共享数据的管道，网络进程接收到多少内容就同时往管道里添加多少内容，而渲染进程就一直读取管道里的数据进行解析渲染。</p><p><img data-src="https://i0.hdslb.com/bfs/album/fa20779d57737cf9ccfb482b89dfdea5766a7e34.png" alt="html响应头类型" /></p><h2 id="dom生成"><a class="anchor" href="#dom生成">#</a> DOM 生成</h2><p>将 <code>html</code>  字节流转换为 <code>DOM</code>  的过程大致分为三个阶段：</p><ol><li>通过分词器将字节流转换为 <code>Token</code> ，这一点类似 <code>JavaScript</code>  解析</li><li>生成 <code>Node</code>  节点</li><li>生成 <code>DOM</code></li></ol><p><img data-src="https://i0.hdslb.com/bfs/album/5022e9fe0d2cb27440b97e3e1b52ced0b4bd14bb.png" alt="DOM生成" /></p><p>在分词器生成 <code>Token</code>  阶段，字节流一般会被转换成两种 <code>Token</code> ： <code>Tag Token</code>  和 <code>文本 Token</code> 。经过分词器处理后 <code>Tag Token</code>  会被划分成 <code>StartTag</code>  和 <code>EndTag</code> 。如：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>            Asuhe</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p><img data-src="https://i0.hdslb.com/bfs/album/7dc0875e58654646f90e83f5c2045968e44e87b6.png" alt="Tokens" /></p><p>后续的生成 <code>Node</code>  节点和 <code>DOM</code>  是同步进行的，将 <code>Token</code>  变成 <code>Node</code>  节点再将 <code>DOM</code>  插入 <code>DOM</code>  树中，到这里文档的 <code>DOM</code>  树就基本生成完毕了。</p><p>利用上面生成的 <code>Tokens</code> , <code>HTML</code>  解析器维护了一个 <code>Token</code>  栈结构。利用栈来进行标签匹配完成 <code>TagT Token</code>  的闭合，其和括号匹配是一样的。以上面的代码为例， <code>HTML</code>  解析器首先会将 <code>html、body、div</code>  的 <code>StartTag</code>  入栈， <code>文本Token</code>  会直接拿去生成 <code>DOM</code>  加入 <code>DOM树</code> ，在遇到 <code>EndTag</code>  就弹出栈顶的 <code>StartTag</code> ，将其插入 <code>DOM</code>  树。 <code>HTML</code>  解析器开始工作时，会默认创建一个根为 <code>document</code>  的空 <code>DOM</code>  结构，同时将一个 <code>StartTag document</code>  的 <code>Token</code>  压入栈底，后面再装入分词器分类出的 <code>token</code> ，文本 <code>Token</code>  会被插入在其上一个 <code>Tag Token</code>  的后面作为其子节点</p><p><img data-src="https://i0.hdslb.com/bfs/album/9593dfafede6b5c9c2989066cc4490303d44d691.png" alt="Token栈与DOM树" /></p><p>每当 <code>Token</code>  栈里出栈一个元素的时候 <code>DOM</code>  树就会生成相应节点并插入，所以最后文档渲染完毕时 <code>Token</code>  栈为空。</p><p>分词器解析出 <code>Token</code>  后，渲染引擎的 <code>XSSAuditor</code>  模块会启动，检查词法安全。例如是否引用了外部脚本、是否符合<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSP"> <code>CSP</code>  规范</a>、是否跨域请求等等，若出现不规范的内容 <code>XSSAuditor</code>  会对该脚本或者下载任务进行拦截</p><h2 id="javascript对dom生成的影响"><a class="anchor" href="#javascript对dom生成的影响">#</a> JavaScript 对 dom 生成的影响</h2><p>当 <code>HTML</code>  解析器遇到 <code>&lt;script&gt;</code>  标签时，渲染引擎判断出这是一段脚本，此时 <code>HTML</code>  解析器会停止对 <code>DOM</code>  的解析，因为段脚本里的代码可能会对已经生成的 <code>DOM树</code> 进行操作。所以渲染引擎会先执行完脚本代码再继续启动 <code>HTML</code>  解析器进行 <code>DOM</code>  解析。也就是说当有 <code>JavaScript</code>  在文档中时， <code>DOM</code>  生成会被阻塞。同时若一个 <code>JavaScript</code>  脚本代码中对 <code>DOM</code>  进行了操作，但它操作的 <code>DOM</code>  位于该段代码的 <code>&lt;script&gt;</code>  标签之后那么这行代码就会执行失败，因为此时需要被操作的 <code>DOM</code>  并没有渲染出来。这就是为什么通常我们将 <code>JavaScript</code>  代码放在 <code>html</code>  文档最后的原因。 <code>&lt;script&gt;</code>  标签放在 <code>html</code>  文档的头部，当 <code>&lt;script&gt;</code>  中代码较多所需执行时间很长时我们的页面就会出现白屏。</p><p><strong>当我们使用外部链接来加载 <code>&lt;script&gt;</code>  代码时，浏览器需要先下载这段代码，而下载过程同样会阻塞 <code>DOM</code>  解析，此时如果源 <code>js</code>  文件站点网络较差就会导致长时间白屏。</strong></p><p>为了解决这个问题 <code>Chrome</code>  浏览器做了许多优化，主要的就是预解析操作。当渲染引擎接收到字节流以后会开启一个预解析线程用于分析 <code>html</code>  文件中包含的 <code>JavaScript、Css</code>  等相关文件，解析到了会提前下载这些文件以防止阻塞</p><p>上面我们知道 <code>JavaScript</code>  脚本会阻塞 <code>DOM</code>  的生成，对此我们也有可以采用一些方法来规避，例如当 <code>javascript</code>  代码中没有 <code>DOM</code>  操作相关的代码时，就可以将该 <code>JavaScript</code>  脚本设置为异步加载，或者使用 <code>CDN</code>  加速、代码压缩等方法。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>使用async异步加载代码</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>使用defer异步加载代码</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>虽然 <code>async</code>  和 <code>defer</code>  都是异步加载 <code>javascript</code>  文件，但是 <code>async</code>  加载完 <code>js</code>  文件后会立即执行里面的代码而 <code>defer</code>  则会在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/DOMContentLoaded_event"> <code>DOMContentLoaded</code>  事件</a>前执行</p><p>在页面的 <code>JavaScript</code>  代码中我们可能并不会增删 <code>DOM</code>  但会修改 <code>DOM</code>  的样式，操作<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSSOM"> <code>CSSOM</code> </a>。如果 <code>js</code>  代码里操作了外部的 <code>CSS</code>  那么浏览器同样要等待外部的 <code>CSS</code>  文件下载完成并解析生成 <code>CSSOM</code>  对象之后才能执行 <code>JavaScript</code>  脚本。也就是说单纯的外部 <code>css</code>  文件并不会阻塞 <code>DOM</code>  渲染，但若是 <code>js</code>  代码中操作了外部 <code>css</code>  文件则该 <code>css</code>  文件就会间接导致 <code>DOM</code>  渲染被阻塞</p><p><img data-src="https://s2.loli.net/2022/01/07/jbye6CJrHR2xLuI.png" alt="DOM渲染流程图" /></p><p>当 <code>HTML</code>  解析器发现需要 <code>css、js</code>  外部文件时，浏览器会同时发起请求进程，也就是说请求 <code>css</code>  和 <code>js</code>  文件是并行的，所以在我们计算加载时间时仅需计算最大的那个文件所需传输时长即可</p><p><img data-src="https://s2.loli.net/2022/01/07/rB93eZ1EayhqolH.png" alt="浏览器渲染进程" /></p><h1 id="首页白屏优化"><a class="anchor" href="#首页白屏优化">#</a> 首页白屏优化</h1><p>通过上面的分析我们知道一般情况下网页性能瓶颈主要体现在 <code>css</code>  下载和 <code>js</code>  文件下载和代码执行中，所以想要缩短白屏时长我们可以采取以下策略：</p><ul><li>通过内联 <code>css</code>  和 <code>js</code>  来消除文件下载时导致的进程阻塞</li><li>在不适合内联 <code>css、js</code>  的情况下尽量减小文件大小，例如 <code>webpack</code>  的 <code>Tree Shaking</code></li><li>对于未操作 <code>DOM</code>  的 <code>js</code>  文件用 <code>async</code>  或 <code>defer</code>  异步加载</li><li>对于大的 <code>css</code>  文件使用媒体查询将其拆分为多个 <code>css</code>  文件，需要用的时候再加载相关 <code>css</code>  文件</li></ul><h1 id="页面渲染全过程"><a class="anchor" href="#页面渲染全过程">#</a> 页面渲染全过程</h1><ul><li>渲染进程将 <code>html</code>  文档转换为渲染引擎能够识别的 <code>DOM树结构</code></li><li>渲染引擎将 <code>css</code>  样式表转换为可以理解的 <code>styleSheets</code> ，计算出 <code>DOM</code>  节点的样式生成 <code>CSSOM</code></li><li>创建布局树，并计算元素的分布信息</li><li>对布局树进行分层并生成分层树</li><li>为每个图层生成绘制列表，并将其提交到合成线程</li><li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图</li><li>合成线程发送绘制图块命令 <code>DrawQuad</code>  给浏览器进程</li><li>浏览器进程根据 <code>DrawQuad</code>  消息生成页面，并显示到屏幕上</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="DOM" scheme="https://asuhe.fun/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>终极原型链</title>
    <link href="https://asuhe.fun/2021/12/23/2021-12-23-%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://asuhe.fun/2021/12/23/2021-12-23-%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2021-12-23T12:24:48.000Z</published>
    <updated>2021-12-24T05:45:24.283Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>接 <a href="/2021/10/20/2021-10-20-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/" title="上文">上文</a> 原型链，今天我们来说说终极原型链</p><h2 id="终极原型链"><a class="anchor" href="#终极原型链">#</a> 终极原型链</h2><p>只要对 <code>js</code>  深入了解一些，你肯定听说过一句话就是函数本质上也是一个对象，当函数被当作做对象去使用时函数就被称为函数对象，当函数被 <code>()</code>  调用是一个函数。既然函数也是对象，那它肯定也有一个原型。本文讲解将一直以下面代码为例</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 创建一个 Person 构造函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"asuhe"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//new 一个 Person 实例</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>所有的函数对象都会有一个原型（ES6 箭头函数除外），且会有一个 <code>prototype</code>  属性指向该原型。当用一个函数对象当作构造函数使用 <code>new</code>  创建一个实例对象时，该构造函数所有实例对象的隐式原型即 <code>__proto__</code> 都会指向构造函数的原型对象。在上述代码中我们可以得到一个最基本的原型链结构</p><p><img data-src="https://i0.hdslb.com/bfs/album/62c7f1c36da40209459be4ff80cb91fbd5e4856d.png" alt="原型链(1)" /></p><p>函数对象的原型本质上也是一个对象，只要是对象那么必定会有一个构造函数。** 实际上除函数对象和自身指定构造函数的对象外，所有的对象都是由 <code>Object</code>  这个构造函数 <code>new</code>  出来的。** 也就是说函数对象的原型是由 <code>Object</code>  构造出来的。根据原型链查找规则，我们可以用如下代码证明</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明普通对象都是由 Object 作为构造函数 new 出来的</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2021/12/24/iq6Te7YVv1pBAcl.png" alt="原型链(1)" /></p><p><code>Object</code>  作为构造函数那么它必然也有一个原型并且由 <code>prototype</code>  属性指向。上面我们说过除函数对象和自己指定构造的对象外，所有的对象都是由 <code>Object</code>  作为构造函数 <code>new</code>  出来的。所以我们可以画出更加完善一点的原型链</p><p><img data-src="https://i0.hdslb.com/bfs/album/4e1203d7ceb497b592d178fd7f4588399a3f34df.png" alt="原型链(2)" /></p><p><code>Object</code>  的原型的隐式原型 <code>__proto__</code> 应该指向其构造函数的原型 <code>prototype</code> ，而 <code>Object</code>  的原型是由它自身 <code>new</code>  出来的。这样它原型链就形成了一个环：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Object.prototype</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span></span></span> ▶ <code>(prototype of Object).__proto__</code> ▶<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Object.prototype</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span></span></span>。为了阻止原型链在这个环里无限循环查找下去，所以在底层 <code>(prototype of Object).__proto__</code> 被设置成了 <code>null</code> 。我们可以用代码证明上述的原型链</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototye<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明函数对象的原型是由 Object new 出来的</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null 说明 Object 的原型的隐式原型值为 null</span></pre></td></tr></table></figure><p><img data-src="https://i0.hdslb.com/bfs/album/5263cabaa84f7a4254ee7a51bfead99fd1950f3e.png" alt="输出" /></p><h3 id="函数对象的原型链"><a class="anchor" href="#函数对象的原型链">#</a> 函数对象的原型链</h3><p>到目前为止，我们基本搞定了普通对象的原型链结构。但是还有一个问题我们没有搞定就是，既然函数也是一个对象那么它肯定也有自己的隐式原型 <code>__proto__</code> 指向它的构造函数的原型。<strong>在 js 的底层所有的函数都是由 <code>Function</code>  作为构造函数 <code>new</code>  出来的，也就是说任何一个函数都是 <code>Function</code>  的实例</strong></p><p>** 当我们使用 <code>function</code>  关键字时本质上就是 <code>Fuction</code>  作为构造函数 <code>new</code>  了一个对象。在 js 的底层最终都是调用 <code>Function</code>  函数去创建一个函数的。** 我们可以使用如下代码证明</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 证明所有的函数对象都是由 Function 构造的</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 箭头函数没有 prototype</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">arrFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrFn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined 说明箭头函数没有原型</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrFn<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明箭头函数同样是 Function new 出来的</span></pre></td></tr></table></figure><p><img data-src="https://i0.hdslb.com/bfs/album/c7b8b125be3627b2d2c51d1bc0ef6015c3555138.png" alt="输出" /></p><p>而 <code>Function</code>  函数本身也是一个函数对象，但是 <code>Function</code>  它是由自己 new 出来的。所以它的 <code>__proto__</code> 和 <code>prototype</code>  都指向同一个原型。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Function<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明 Function 自己 new 出的自己</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明 Function 的原型还是 Object new 出来的</span></pre></td></tr></table></figure><p>有了以上基础我们就可以继续完善一下原型链</p><p><img data-src="https://i0.hdslb.com/bfs/album/ea5af04e95c07086eb47e2ffc44612301544cccc.png" alt="原型链(3)" /></p><p>上面这个图就是我们常说的终极原型链了</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://asuhe.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>模块化与组件化</title>
    <link href="https://asuhe.fun/2021/12/13/2021-12-13-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    <id>https://asuhe.fun/2021/12/13/2021-12-13-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96/</id>
    <published>2021-12-13T12:08:29.000Z</published>
    <updated>2021-12-13T13:31:07.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="es6模块化"><a class="anchor" href="#es6模块化">#</a> ES6 模块化</h2><p>在 ES6 模块化规范中，每个文件都是一个模块。它的语法只能在浏览器端运行，还要借助 <code>Babel</code>  和 <code>Browserify</code>  依次编译代码才能在浏览器端运行。</p><h3 id="默认暴露"><a class="anchor" href="#默认暴露">#</a> 默认暴露</h3><p>默认暴露暴露出去的是一个对象。默认暴露必须用一个变量去统一接收</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// request.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>a<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>log</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">/* 本质上暴露出去的是一个对象，以 defaulte 为属性</pre></td></tr><tr><td data-num="12"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="13"></td><td><pre>    default:&#123;</pre></td></tr><tr><td data-num="14"></td><td><pre>a,</pre></td></tr><tr><td data-num="15"></td><td><pre>         log</pre></td></tr><tr><td data-num="16"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="17"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="18"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// index.js</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">import</span> obj <span class="token keyword">from</span> <span class="token string">'requset.js'</span><span class="token punctuation">;</span> <span class="token comment">// 这种写法为简便写法</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token keyword">as</span> obj<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'requset.js'</span><span class="token punctuation">;</span> <span class="token comment">// 完整写法 本质</span></pre></td></tr></table></figure><p>默认暴露只能暴露一次</p><h3 id="分别暴露"><a class="anchor" href="#分别暴露">#</a> 分别暴露</h3><p>分别暴露同样是暴露出去一个对象。它在最终暴露的时候，把所有暴露的变量自动封装到对象当中</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/* 实际暴露出去的对象</pre></td></tr><tr><td data-num="5"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="6"></td><td><pre>    a:100,</pre></td></tr><tr><td data-num="7"></td><td><pre>b:200</pre></td></tr><tr><td data-num="8"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="9"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// index.js</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'test.js'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 部分暴露可以在引入的时候帮它改名</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token keyword">as</span> <span class="token constant">A</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'test.js'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 打包引入 将所有暴露的东西全部引入并封装在同一个对象里，作为属性</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> All <span class="token keyword">from</span> <span class="token string">'test.js'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="统一暴露"><a class="anchor" href="#统一暴露">#</a> 统一暴露</h3><p>统一暴露就是部分暴露的一个简便写法，方便程序员少写一些 <code>export</code>  关键字。它暴露出去的也是一个对象。但它暴露出去的对象并没有被重新包装，暴露出去的对象就是它原本的那个对象</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>a<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    sum</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* 实际暴露出去的对象</pre></td></tr><tr><td data-num="9"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>    a,</pre></td></tr><tr><td data-num="11"></td><td><pre>sum</pre></td></tr><tr><td data-num="12"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="13"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 统一暴露可以在暴露前帮其改名，而不能在引入时帮他改名</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>a <span class="token keyword">as</span> <span class="token constant">A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    sum <span class="token keyword">as</span> <span class="token constant">SUM</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">/* 改名后暴露出去的对象</pre></td></tr><tr><td data-num="20"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="21"></td><td><pre>A,</pre></td></tr><tr><td data-num="22"></td><td><pre>SUM</pre></td></tr><tr><td data-num="23"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="24"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// index.js</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>sum<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'test.js'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="总结"><a class="anchor" href="#总结">#</a> 总结</h3><p>部分暴露和默认暴露方式可以混合使用。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    a<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    b<span class="token operator">:</span><span class="token number">300</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 最终暴露出去的对象</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    a<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        a<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        b<span class="token operator">:</span><span class="token number">300</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="commonjs模块化"><a class="anchor" href="#commonjs模块化">#</a> CommonJS 模块化</h2><p>在 <code>CommonJS</code>  模块化的规范里，每个文件都是一个模块。用它模块化的代码既可以在服务端运行也可以在浏览器端运行。但在浏览器端运行前需要用 <code>Browserify</code>  编译一遍。</p><h3 id="基本语法"><a class="anchor" href="#基本语法">#</a> 基本语法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 暴露模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 第一种方式</span></pre></td></tr><tr><td data-num="3"></td><td><pre>exports<span class="token punctuation">.</span>xxx <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 第二种方式</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 引入模块</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'模块名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入内置模块和第三方模块</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">requier</span><span class="token punctuation">(</span><span class="token string">'./xxx.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入自定义模块</span></pre></td></tr></table></figure><p>在暴露语法中若 <code>module.exports</code>  和 <code>exports</code>  指向的是不同的对象，则引入模块的得到的是最终 <code>module.exports</code>  所指向的那个对象，而 <code>exports</code>  只是一个封装起来的语法糖。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    a<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    b<span class="token operator">:</span><span class="token number">200</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>exprots<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>exports<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'test.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* test 得到的是 module.exports 指向的对象</pre></td></tr><tr><td data-num="11"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="12"></td><td><pre>a:100,</pre></td></tr><tr><td data-num="13"></td><td><pre>b:200</pre></td></tr><tr><td data-num="14"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr></table></figure><p><code>exports</code>  和 <code>module.exports</code>  的关系图</p><p><img data-src="https://i0.hdslb.com/bfs/album/dd021b3f8b6905f88e8bb1613f47951a3bc5f09b.png" alt="exports和module.exports的关系" /></p><h2 id="组件化"><a class="anchor" href="#组件化">#</a> 组件化</h2><p>组件就是一个 <code>html、css、js</code>  的代码集合。它可以复用代码，简化项目的编码，提高运行效率。在组件注册的语法中实际上是把一个组件文件暴露出去的变成了一个构造组件实例对象的构造函数。每当我们使用一个组件标签的时候，在内存里就用构造函数 new 出了一个实例对象。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://asuhe.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件间通信总结</title>
    <link href="https://asuhe.fun/2021/12/10/2021-12-10-Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93/"/>
    <id>https://asuhe.fun/2021/12/10/2021-12-10-Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-10T13:17:29.000Z</published>
    <updated>2022-03-04T08:51:24.177Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="props通信"><a class="anchor" href="#props通信">#</a> props 通信</h2><p><code>props</code>  通信是最基础最简单的一种通信方式，使用 <code>props</code>  进行组件间通信既可以用来父向子组件传递数据，也可以把子组件的数据传递给父组件。<strong>实际上这种通信方式没有任何的限制，它也能够实现爷孙、兄弟通信，只需要层层传递参数即可</strong>。但是若关系层级超过 2 层以上，就不推荐使用 <code>props</code>  通信了，面对这种场景我们可以使用全局事件总线更加方便地传递数据。</p><p><code>props</code>  通信通常都是由父组件给子组件传递数据，父组件传递的参数数据大致可以分为函数和非函数两种。当父组件给子组件传递非函数数据即纯数据时，子组件只能被动接收。而当父组件给子组件传递一个函数时，这时我们可以在子组件中调用这个函数，利用给这个定义在父组件里的函数传递形参，从而达到子组件给父组件传参的目的。</p><p>子组件在接收父组件传过来的参数时，也有三种方法接收。每种方法都有不同的特点，可以根据不同需求来选择使用</p><pre><code class="language-vue">// 父组件&lt;template&gt;&lt;div&gt;    &lt;Son :money=&quot;money&quot; :getmoney=&quot;getMoney&quot; /&gt; //父给子传参&lt;/div&gt;&lt;/template&gt;&lt;javascript&gt;export default &#123;    data()&#123;    money:1000    &#125;,    methods:&#123;    getMoney(money)&#123;    this.money +=money;    &#125;    &#125;&#125;&lt;/javascript&gt;---------// 子组件 Son&lt;template&gt;&lt;ul&gt;        &lt;li&gt;&#123;&#123;money&#125;&#125;&lt;/li&gt;        &lt;li&gt;            &lt;button @click='getmoney(100)'&gt;&lt;/button&gt;  //子给父传参    &lt;/li&gt;    &lt;/ul&gt;&lt;/template&gt;&lt;javascript&gt;export default &#123;    //第一种props接收参数的形式，用数组形式接收数据    props:['money'],    props:&#123;    getmoney:Fuction //利用getmoney这个函数参数，更新父组件的money    &#125;    /* 第二种props接收参数的形式，限定props参数类型    props:&#123;    money:Number    &#125;    第三种props接收参数的形式，限定参数类型同时指定默认值    props:&#123;    money:&#123;    type:Number,    default:1&#125;&#125;    */&#125;&lt;/javascript&gt;</code></pre><h3 id="路由传参里的props"><a class="anchor" href="#路由传参里的props">#</a> 路由传参里的 props</h3><p>在路由条目对象里配置 <code>props</code>  本质上就是将 <code>$route.params</code>  映射到 <code>props</code>  中。<strong>使用对象传递 <code>params</code>  参数时，路由条目的对象必须使用 <code>name</code>  属性。</strong></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>name<span class="token operator">:</span> <span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token comment">// 使用对象传 params 参数必须用 name</span></pre></td></tr><tr><td data-num="3"></td><td><pre>path<span class="token operator">:</span> <span class="token string">"/search/:keyword?"</span><span class="token punctuation">,</span> <span class="token comment">// ? 表示 keyword 参数可传可不传</span></pre></td></tr><tr><td data-num="4"></td><td><pre>component<span class="token operator">:</span> Search<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>props<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 默认为 false,true 时会将所有的 params 参数映射到 props</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// props:(route)=>(&#123;keyword3:route.params.keyword,keyword4:route.query.keyword2&#125;)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><h2 id="自定义事件"><a class="anchor" href="#自定义事件">#</a> 自定义事件</h2><p>在了解自定义事件之前我们需要明确什么是自定义事件。所谓自定义事件其实就是我们自己定义的事件，它和原生 DOM 事件有很大不同。</p><p>原生 DOM 事件的特点是：</p><ul><li>系统定义的，数量是固定的。就那些事件，事件名是固定的</li><li>由系统（即浏览器）管理、触发</li><li>回调函数是我们定义的，系统调用的</li><li>回调函数的第一个参数是事件对象，是系统自动传入的</li></ul><p>Vue 自定义事件的特点是：</p><ul><li>自己定义的，数量是无限个，自己想定义多少定义多少，事件名随意取</li><li>由我们自己管理、触发</li><li>回调函数是我们定义的，系统调用的</li><li>回调函数的参数是我们手动传入的，没传就没有</li></ul><p>除了以上特点，判断一个事件是否是自定义事件的绝对准则是：<strong>所有绑定在组件标签上的事件都是自定义事件</strong>。若我们想将组件标签上的自定义事件转换为同名的原生 DOM 事件则需要在自定义事件后加上 <code>.native</code> ，例如 <code>@click.native</code> 。这样就把一个组件标签上的自定义事件 <code>click</code>  转换为同名的原生 DOM 事件 <code>click</code> 。</p><p>在我们使用 vue 的过程中，绑定原生 DOM 事件监听会有两种情况：一是在 html 标签上绑定事件监听，二是在组件标签上绑定事件监听。当我们在组件标签上绑定原生 DOM 事件时，实际上是将事件绑定在了组件的根标签上，利用事件委托来监听所有子组件发生的事件。</p><pre><code class="language-vue">// 父组件&lt;template&gt;&lt;div&gt;    &lt;Son @click.native=&quot;alert('呵呵呵')&quot;&gt;&lt;/div&gt;&lt;/template&gt;--------// 子组件 Son&lt;template&gt;&lt;div&gt; // 父组件的原生DOM事件绑定在div上&lt;h2&gt;哈哈哈&lt;/h2&gt;    &lt;h3&gt;嘿嘿嘿&lt;/h3&gt;&lt;/div&gt;&lt;/template&gt;</code></pre><p>同样地我们也可以将自定义事件绑定在 html 标签上，但是这样并没有意义。因为自定义事件要在标签内部使用 <code>$emit</code>  触发，而 html 标签无法进入内部触发 <code>$emit</code> 。</p><p>利用自定义事件的特性，我们可以实现<strong>子向父通信传递参数</strong>。</p><pre><code class="language-vue">// 父组件&lt;template&gt;&lt;div&gt;    &lt;Son @click=&quot;test1&quot; /&gt;&lt;/div&gt;&lt;/template&gt;&lt;javascript&gt;export default &#123;data()&#123;        &#125;,    methods:&#123;    test1(event)&#123;    alert(event);    &#125;    &#125;&#125;&lt;/javascript&gt;--------// 子组件&lt;template&gt;&lt;div&gt;        &lt;button @click=&quot;$emit('click','嘿嘿')&quot;&gt;嘿嘿&lt;/button&gt;        &lt;button @click=&quot;$emit('click','哈哈')&quot;&gt;哈哈&lt;/button&gt;    &lt;/div&gt;&lt;/template&gt;</code></pre><h2 id="pubsubjs"><a class="anchor" href="#pubsubjs">#</a> PubSubJS</h2><p>pubsub.js 方式通信是让需要通信的两个组件分别引入该插件，然后再使用。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pubSub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 发布消息的组件中传递数据，就给数据的组件</span></pre></td></tr><tr><td data-num="3"></td><td><pre>pubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'消息名'</span><span class="token punctuation">,</span>数据对象<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 订阅消息的组件，即接收数据的组件</span></pre></td></tr><tr><td data-num="5"></td><td><pre>pubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'消息名'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">接收数据的参数</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="全局事件总线"><a class="anchor" href="#全局事件总线">#</a> 全局事件总线</h2><p>全局事件总线本质上就是利用作用域链和自定义事件这两个机制来实现组件间通信。** 它可以用于任意组件之间进行数据通信。** 使用全局事件总线有三个步骤，分别是：</p><ol><li>定义总线</li><li>在需要接收参数的组件里，让总线上绑定自定义事件</li><li>在传出数据的组件里，触发总线上的自定义事件</li></ol><p>随便用一个对象去定义总线是无效的，成为事件总线的对象要满足两个条件：</p><ul><li>该对象能够被所有的组件实例找到</li><li>该对象要能够使用 <code>$emit</code>  和 <code>$on</code>  方法</li></ul><pre><code class="language-vue">// main.js Vue.prototype.$bus = new Vue() //定义事件总线// Father.vuethis.$bus.$on('addUser',(data)=&gt;&#123;console.log(data)&#125;;) // 给事件总线绑定事件// Son.vuethis.$bus.$emit('addUser',data) // 触发事件总线</code></pre><p>全局事件总线的原理</p><p><img data-src="https://i0.hdslb.com/bfs/album/b512b4118e872b6f997c57049ca9cd9a1fd5c60a.png" alt="全局事件总线原理" /></p><h2 id="作用域插槽"><a class="anchor" href="#作用域插槽">#</a> 作用域插槽</h2><p>根据作用域插槽的机制，我们可以实现子组件向父组件中传参。因为在作用域插槽中，数据的结构或样式是根据父组件决定的，而此时我们需要将在子组件中遍历过的数据重新传递给父组件，将改变的数据部分用 <code>slot</code>  包裹。在 <code>slot</code>  标签中将数据传递给父组件。父组件再根据传递过来的数据判断需要返回给子组件的样式结构，在 <code>template</code>  标签中使用 <code>slot-scope=子组件属性对象</code> 获取子组件数据。</p><pre><code class="language-vue">// 父组件&lt;template&gt;&lt;div&gt;    &lt;templat slot-scope=&quot;scope&quot;&gt; // scope对象 = &#123;value:100,index:0&#125;            &lt;/templat&gt;&lt;/div&gt;&lt;/template&gt;//子组件&lt;template&gt;&lt;slot :value=&quot;100&quot; :index=&quot;0&quot;&gt;&lt;/slot&gt; // slot的所有属性都会自动传递给父组件&lt;/template&gt;</code></pre><h2 id="vuex"><a class="anchor" href="#vuex">#</a> Vuex</h2><p>利用 <code>Vuex</code>  这个插件我们也可以实现组件间通信。当 <code>Vuex</code>  注册为全局组件时，在任一组件里我们都可以用 <code>this.$store</code>  这个变量来从 <code>Vuex</code>  中取得数据并且能够操作数据。 <code>Vuex</code>  相当于充当了一个传话筒的角色，让我们能够在各个组件里自由通信。</p><p>对于以上六种组件间通信方式我以前的文章也有总结，<a href="/2021/11/11/2021-11-11-VUE%E5%9F%BA%E7%A1%80(%E4%B8%89)/" title="戳这里查看更多">戳这里查看更多</a></p><h2 id="v-model"><a class="anchor" href="#v-model">#</a> v-model</h2><p>通常 <code>v-model</code>  是使用在 html 中的表单标签里用于收集数据的。在 html 标签上的 <code>v-model</code>  本质上是用 <code>:value</code>  单向绑定一个数据，然后再用 <code>input</code>  事件触发改变绑定在 <code>:value</code>  上的值来实现的。</p><pre><code class="language-vue">&lt;input type='text' v-model='msg' /&gt;// 等价于&lt;input type='text' :value='msg' @input='msg = $event.target.value' /&gt;</code></pre><p>当我们在组件标签上使用 <code>v-model</code>  时，本质上也是先用 <code>:value</code>  单向绑定一个值，然后再用自定义的 <code>input</code>  事件监听（将子组件分发数据保存父组件的属性上）。</p><pre><code class="language-vue">&lt;myInput v-model='msg'&gt;&lt;/myInput&gt;// 等价于&lt;myInput :value='msg' @input='msg = $event.target.value'&gt;&lt;/myInput&gt;--------------// myInput内部&lt;template&gt;&lt;div&gt;        &lt;h2&gt;input包装&lt;/h2&gt;        &lt;input type='text' @input='$emit(&quot;input&quot;,$event.target.value)' /&gt;    &lt;/div&gt;&lt;/template&gt;</code></pre><p>若组件标签里没有主动设置去使用 <code>$emit</code>  触发自定义事件则 <code>v-model</code>  并不会生效。</p><p>组件标签使用 <code>v-model</code>  本质上还是自定义事件和 props 的组合，它实现了父子组件双向数据同步的问题</p><h2 id="sync属性"><a class="anchor" href="#sync属性">#</a> Sync 属性</h2><p><code>sync</code>  属性修饰符也是用来实现父子组件双向数据同步的问题和 <code>v-model</code>  实现的效果几乎一样。 <code>v-model</code>  一般用于带表单项的组件而 <code>sync</code>  一般用于不带表单项的组件。使用时它们并没有严格的界限，只是我们约定成俗的地会让带有表单项的组件使用 <code>v-model</code> ，而普通组件则使用 <code>sync</code>  属性修饰符。</p><pre><code class="language-vue">// 父组件&lt;h2&gt;不使用sync修改符&lt;/h2&gt;&lt;Child :money=&quot;total&quot; @update:money=&quot;total=$event&quot;/&gt; // 事件命名格式一定要为update:传过去的数据名称// 子组件 Child&lt;button @click='$emit(&quot;update:money&quot;,100)'&gt;&lt;/button&gt;------// 父组件&lt;h2&gt;使用sync修改符&lt;/h2&gt;&lt;Child :money.sync=&quot;total&quot;/&gt; // 其实就是不使用sync时的语法糖</code></pre><h2 id="attrs与lintener"><a class="anchor" href="#attrs与lintener">#</a>  <code>$attrs</code>  与 <code>$lintener</code></h2><p>当我们需要封装一些组件时，我们可以利用 <code>$attrs</code>  与 <code>$lintener</code>  达到组件复用最大化。其实 <code>$attrs</code>  与 <code>$lintener</code>  就是一个对象， <code>$attrs</code>  可以接收父组件传递过来的全部属性，而 <code>$lintener</code>  可以接收父组件传递过来的全部事件。</p><pre><code class="language-vue">// 父组件&lt;HintButton title=&quot;双击添加用户&quot; type=&quot;primary&quot; icon=&quot;el-icon-plus&quot; @dblclick.native=&quot;add2&quot;/&gt;// 子组件 HintButton&lt;el-button v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;&gt;&lt;/el-button&gt; // 必须用全写v-bind和v-on-----// $attrs和$linstener的结构$attrs = &#123;title:&quot;双击添加用户&quot;,type=&quot;primary&quot;,icon=&quot;el-icon-plus&quot;&#125;$linstener = &#123;@dblclick.native=&quot;add2&quot;&#125;</code></pre><p>当我们需要单独去除某个父组件传递过来的属性值时，可以用 <code>props</code>  去单独接收。用 <code>props</code>  接收了的属性不再会出现在 <code>$attrs</code>  对象中</p><h2 id="parent与children-refs"><a class="anchor" href="#parent与children-refs">#</a>  <code>$Parent</code>  与 <code>$Children</code> 、 <code>$refs</code></h2><p><code>$children</code> ：所有子组件对象的<strong>数组</strong>，因为它返回的是一个数组所以可以使用数组方法对其遍历，但不能用数组下标去访问某个子对象</p><p><code>$parent</code> ：代表父组件对象</p><p><code>$refs</code> ：ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例 当 v-for 用于元素或组件的时候，引用信息将是包含 DOM 节点或组件实实例的数组</p><ul><li><p>给子组件标签使用 ref 标识 <code> &lt;Son ref=&quot;son&quot; /&gt;</code>    <code>$refs</code>  可以直接操作子组件内部的数据及方法通过 <code>this.$refs.son</code>  可以拿到组件对象本身 如果需要修改 data 数据 可以直接修改 <code>this.$refs.son.msg=XXX</code></p></li><li><p>给 html 标签使用 ref   <code>&lt;p ref='pp'&gt;&lt;/p&gt;</code>   拿到的是 html 标签本身的 dom 元素 <code>this.$refs.pp</code></p></li></ul><p>一般慎用以下方法:</p><p><strong>找子组件时 <code>$children</code>  是将子组件对象放入数组中不能通过索引操作因为位置不固定， <code>$children</code>  访问子组件顺序是随机的，所以无法使用下标索引操作</strong></p><p><strong>找父组件时 <code>$parent</code>  存在组件共用，此时可能不是一个父组件 会存在多个父组件</strong></p><p>父组件当中可以通过 <code>$children</code>  找到所有的子组件去操作子组件的数据（当然可以找孙子组件）</p><p>子组件当中可以通过 <code>$parent</code>  找到父组件（当然可以继续找爷爷组件）操作父组件的数据</p><h2 id="mixin混入技术"><a class="anchor" href="#mixin混入技术">#</a> Mixin 混入技术</h2><p>html、js、css 相同时我们会封装组件。单个组件里 js 代码重复我们会封装函数。当不同的组件 js 代码重复  封装混合时，我们就可以使用 <code>minx</code>  混入技术，重用 js 代码。新建一个 myminxi.js 文件 在 js 文件中暴露一个对象 对象内部可以有 data methods computed...  会将 js 文件中暴露出的数据 方法等混入到组件内部。</p><h3 id="使用"><a class="anchor" href="#使用">#</a> 使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 在组件内部引入 import myminxi from './myminxi.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 使用 mixins:[mymixin]  例如:</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mixin<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mymixin'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'Daughter'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    mixins<span class="token operator">:</span><span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        money<span class="token operator">:</span><span class="token number">1000</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// myminx.js</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> mixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">borrowMoney</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> count</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">gaveMoney</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> count</pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 给父组件增加 count</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>money <span class="token operator">+=</span> count</pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>可以提高代码复用，优化性能</li><li>变量来源不明确，不利于阅读</li><li>多 mixin 可能会造成命名冲突</li><li>mixin 的组件可能会出现多对多的关系，复杂度较高</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>性能调优(一)</title>
    <link href="https://asuhe.fun/2021/12/09/2021-12-09-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98(%E4%B8%80)/"/>
    <id>https://asuhe.fun/2021/12/09/2021-12-09-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98(%E4%B8%80)/</id>
    <published>2021-12-09T13:33:50.000Z</published>
    <updated>2021-12-09T13:48:10.439Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="图片懒加载"><a class="anchor" href="#图片懒加载">#</a> 图片懒加载</h2><p>使用图片懒加载功能，在目标图片还没加载过来时可以先显示 loading 图片。同时在 <code>&lt;img&gt;</code>  进入可视范围才加载请求目标图片</p><h3 id="基本使用"><a class="anchor" href="#基本使用">#</a> 基本使用</h3><ul><li>安装</li></ul><pre><code class="language-sh">yarn add vue-lazyload</code></pre><ul><li>注册组件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> VueLazyload <span class="token keyword">from</span> <span class="token string">"vue-lazyload"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 设置图片为加载过来时显示的 loading 图片</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> loading <span class="token keyword">from</span> <span class="token string">"@/assets/images/loading.gif"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyload<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  loading<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>使用</li></ul><pre><code class="language-vue">// 注册图片懒加载组件后会多一个 v-lazy 指令，使用该指令替换 src就可以实现图片懒加载&lt;img v-lazy=&quot;imgUrl&quot;&gt;</code></pre><h2 id="路由懒加载"><a class="anchor" href="#路由懒加载">#</a> 路由懒加载</h2><p>路由懒加载使用 <code>import</code>  函数，可以让路由组件单独打包。当用户访问该路由时，才会从服务器请求路由资源，也就是动态引入。</p><h3 id="特点"><a class="anchor" href="#特点">#</a> 特点</h3><p>打包会打包成一个单独的文件<br />访问哪一个再去加载哪一个</p><ul><li><p>当打包构建应用时，JS 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</p></li><li><p>本质就是 Vue 的异步组件在路由组件上的应用</p></li><li><p>需要使用动态 import 语法，也就是 import () 函数</p></li><li><p>import (' 模块路径 '): webpack 会对被引入的模块单独打包一个小文件</p></li><li><p>当第一次访问某个路径对应的组件时，此时才会调用 import 函数去加载对应的 js 打包文件</p></li></ul><h3 id="基本使用-2"><a class="anchor" href="#基本使用-2">#</a> 基本使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 路由懒加载 </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 当路由被访问时，才会调用路由函数</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// import Search from "../pages/Search";</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">Search</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../pages/Search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="tips" scheme="https://asuhe.fun/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>http请求方式详解</title>
    <link href="https://asuhe.fun/2021/12/08/2021-12-08-http%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://asuhe.fun/2021/12/08/2021-12-08-http%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-12-08T13:41:29.000Z</published>
    <updated>2021-12-08T15:20:21.901Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="请求方式与请求参数"><a class="anchor" href="#请求方式与请求参数">#</a> 请求方式与请求参数</h2><p>常用的请求方式无非就是增删改查，在 http 请求中增删改查对应的请求方式分别为：</p><ul><li>post：增，提交数据给服务端</li><li>delete：删，删除指定的数据</li><li>put：改，更改服务端已有的数据</li><li>get：查，从服务端获取数据</li></ul><p>与这些相对的还有这些请求方式携带参数的形式，总共有三种携带数据的方式：</p><ul><li><p>query 参数：</p><blockquote><p>即查询字符串，就是我们最最常见的在地址栏上携带参数，get 请求常用这种方式携带参数，例如 <code>/addUser?userName=asuhe&amp;userId=1</code> 。这种请求方式用 <code>?</code>  来与请求路径分割，当携带多个 query 参数时就用 <code>&amp;</code>  来分割参数</p></blockquote><ul><li>query 参数的数据是显示暴露在地址栏上的</li><li>编码方式为 <code>urlencoded</code></li></ul></li><li><p>params 参数</p><blockquote><p>params 参数和 query 参数一样是显示地暴露在地址栏上的，例如 server: <code>/addUser/:userId</code> ，client: <code>/addUser/1</code> ，服务端就收到 <code>userId=1</code> 。</p></blockquote></li><li><p>请求体参数</p><blockquote><p>通常 post 请求发送的参数就是请求体参数，用这种方法携带参数会将参数包含在 http 请求的请求体中。该种参数有两种格式一种是 <code>urlencoded</code> ，另一种是 <code>json</code></p></blockquote><ul><li><code>urlencoded</code>  格式：在请求体中参数是以类似 <code>query</code>  参数的形式存放，例如： <code>name=asuhe&amp;age=18</code> 。请求头参数的格式为： <code>Content-Type: application/x-www-form-urlencoded</code></li><li><code>json</code>  格式：参数在请求体中以 <code>json</code>  格式存放，例如： <code>&#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;</code> 。其请求头中的参数为： <code>Content-Type: application/json</code></li></ul></li></ul><h3 id="请求方式与请求参数之间的联系"><a class="anchor" href="#请求方式与请求参数之间的联系">#</a> 请求方式与请求参数之间的联系</h3><ul><li>通常情况下，<strong>请求方式与请求参数可以任意搭配</strong>。也就是说，即使我们使用 <code>post</code>  的方式提交参数，我们也可以使用 <code>query</code>  参数的形式来携带提交的数据</li><li>理论上一次请求可以使用上述三种类型参数中的任何一种，也可以同时使用不同类型的参数来完成一次请求</li><li>但 <code>get</code>  请求方式有些特殊， <code>get</code>  方式提交请求不能使用请求体参数来携带数据，因为 <code>get</code>  请求是没有请求体的</li></ul><h2 id="api接口风格"><a class="anchor" href="#api接口风格">#</a> API 接口风格</h2><p>根据后端接口处理请求的方式，我们可以将 API 接口分为 <code>restful</code>  风格和非 <code>restful</code>  风格的 API。</p><h3 id="rest-api"><a class="anchor" href="#rest-api">#</a> REST API</h3><p><code>rest API</code>  即 <code>restful</code>  风格的 API 有如下特点：</p><ul><li><code>server</code>  后端 CURD 操作是根据 <code>client</code>  发送请求的方式来决定的</li><li>同一个请求路径可以进行多个操作</li><li>请求方式会用到 <code>get</code> 、 <code>post</code> 、 <code>put</code> 、 <code>delete</code></li></ul><p>通常 <code>rest API</code>  对同一数据进行操作时，只有一个路径。例如对用户信息进行 CURD， <code>rest API</code>  的形式为 <code>/user</code> 。客户端要对用户信息进行增就使用 <code>post</code>  请求提交数据，删就用 <code>delete</code>  请求，依次类推实现数据操作。这一个接口就实现了 CURD 四种功能</p><h3 id="非rest-api"><a class="anchor" href="#非rest-api">#</a> 非 REST API</h3><p><code>非rest API</code>  即 <code>restless</code>  风格的 API，它有如下特点：</p><ul><li>后端 CURD 操作不根据 <code>client</code>  的请求方式决定，而是根据请求路径</li><li>一个请求路径只对应一个操作</li><li>一般只使用 <code>get</code> 、 <code>post</code>  请求就够了</li></ul><p>开发中最常见的一个操作对应一个请求路径的就是 <code>restless API</code>  了。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="计算机网络" scheme="https://asuhe.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础(四)</title>
    <link href="https://asuhe.fun/2021/11/30/2021-11-30-VUE%E5%9F%BA%E7%A1%80(%E5%9B%9B)/"/>
    <id>https://asuhe.fun/2021/11/30/2021-11-30-VUE%E5%9F%BA%E7%A1%80(%E5%9B%9B)/</id>
    <published>2021-11-30T12:55:35.000Z</published>
    <updated>2022-03-17T06:28:25.542Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="v-for和v-if的优先级"><a class="anchor" href="#v-for和v-if的优先级">#</a> v-for 和 v-if 的优先级</h2><p>** <code>v-for</code>  和 <code>v-if</code>  一起使用时，vue 会先渲染 <code>v-for</code>  的元素，然后再对渲染出的元素进行 <code>v-if</code>  的判断。** 例如有如下数据结构，我们要将它用 <code>v-for</code>  进行渲染，然后再根据 id 用 <code>v-if</code>  判断 id 是否奇数，然后再决定是否进行显示</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        human <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                name<span class="token operator">:</span><span class="token string">'asuhe'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                name<span class="token operator">:</span><span class="token string">'sphinx'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                id<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                name<span class="token operator">:</span><span class="token string">'asuka'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                id<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                name<span class="token operator">:</span><span class="token string">'awesome'</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">]</span>  </pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="情况1v-if判断与v-for中的数据有关"><a class="anchor" href="#情况1v-if判断与v-for中的数据有关">#</a> 情况 1：v-if 判断与 v-for 中的数据有关</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in human<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id%2 === 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment"></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>当我们使用上述方式进行判断时，vue 会将四个 <code>div</code>  全部渲染出来，再进行 <code>v-if</code>  的判断。这就造成了性能损失，进行了一些不必要 <code>div</code>  的渲染和判断</p><h3 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案</h3><p>在这种情况下我们可以使用计算属性，先将符合条件的数据过滤出来，再去使用 <code>v-for</code>  渲染。这样就可以大幅降低性能损耗</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>computed<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>human<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>id<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in person<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment"></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>这样 <code>v-for</code>  就不会渲染不必要的数据</p><h3 id="情况2v-if判断与v-for中的数据无关"><a class="anchor" href="#情况2v-if判断与v-for中的数据无关">#</a> 情况 2：v-if 判断与 v-for 中的数据无关</h3><p>若 <code>v-for</code>  的执行是由其它数据判断则，则可以在 <code>v-for</code>  的上层添加一个 <code>v-if</code>  先进行 <code>v-for</code>  的判断。然后再执行 <code>v-for</code></p><h3 id="解决方案-2"><a class="anchor" href="#解决方案-2">#</a> 解决方案</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        isShow<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        human <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                name<span class="token operator">:</span><span class="token string">'asuhe'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                name<span class="token operator">:</span><span class="token string">'sphinx'</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in person<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment"></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Mockjs基本使用</title>
    <link href="https://asuhe.fun/2021/11/30/2021-11-30-Mockjs%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://asuhe.fun/2021/11/30/2021-11-30-Mockjs%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-11-30T06:04:59.000Z</published>
    <updated>2021-11-30T12:55:09.442Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="node"><a class="anchor" href="#node">#</a> node</h2><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># npm 安装</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> mockjs</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># yarn 安装 推荐</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">yarn</span> <span class="token function">add</span> mockjs</pre></td></tr></table></figure><h3 id="使用"><a class="anchor" href="#使用">#</a> 使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 使用 Mock</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mockjs'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">var</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">'list|1-10'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token string">'id|+1'</span><span class="token operator">:</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 输出结果</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="vue"><a class="anchor" href="#vue">#</a> vue</h2><p>使用步骤</p><ul><li>定义数据结构</li><li>设置 mock 服务器</li><li>封装 axios</li><li>使用</li></ul><h3 id="定义数据结构"><a class="anchor" href="#定义数据结构">#</a> 定义数据结构</h3><p>定义好要模拟数据的基本 <code>json</code>  结构，结构中可以使用 mock 提供的<span class="exturl" data-url="aHR0cDovL21vY2tqcy5jb20vZXhhbXBsZXMuaHRtbA==">语法</span>随机输出数据</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre># banners.json</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token property">"imgUrl"</span><span class="token operator">:</span><span class="token string">"/images/banner1.jpg"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token property">"imgUrl"</span><span class="token operator">:</span><span class="token string">"/images/banner2.jpg"</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token property">"imgUrl"</span><span class="token operator">:</span><span class="token string">"/images/banner3.jpg"</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"4"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token property">"imgUrl"</span><span class="token operator">:</span><span class="token string">"/images/banner4.jpg"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><h3 id="设置mock服务器"><a class="anchor" href="#设置mock服务器">#</a> 设置 mock 服务器</h3><p>让 mock 模拟出接口，axios 请求往模拟出的接口里发</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// mockServer</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> banners <span class="token keyword">from</span>  <span class="token string">'./banners.json'</span><span class="token punctuation">;</span> <span class="token comment">// 接口返回的数据</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 设置接口请求路径</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/mock/banners'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="7"></td><td><pre>    code<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    data<span class="token operator">:</span>banners</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="封装-axios"><a class="anchor" href="#封装-axios">#</a> 封装 axios</h3><p>封装好发往 mock 服务器的请求拦截器和响应拦截器</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// mockAjax.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> NProgress <span class="token keyword">from</span> <span class="token string">"nprogress"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token string">"nprogress/nprogress.css"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 配置进度条</span></pre></td></tr><tr><td data-num="7"></td><td><pre>NProgress<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> showSpinner<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 创建一个 Axios 实例</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  baseURL<span class="token operator">:</span> <span class="token string">'/mock'</span><span class="token punctuation">,</span> <span class="token comment">// 设置基础 url</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  timeout<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 设置请求拦截器，添加基础路径</span></pre></td></tr><tr><td data-num="16"></td><td><pre>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 请求进度条</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  NProgress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">return</span> config<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 设置响应拦截器，处理返回数据</span></pre></td></tr><tr><td data-num="22"></td><td><pre>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 隐藏进度条</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">// console.log(error);</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">请求出错</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">||</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">未知错误</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// 将实例暴露出去</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> service<span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="使用-2"><a class="anchor" href="#使用-2">#</a> 使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> mockAjax <span class="token keyword">from</span> <span class="token string">'./mockAjax'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reqBanners</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">mockAjax</span><span class="token punctuation">(</span><span class="token string">'/banners'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">requBannners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token parameter">value</span> <span class="token operator">=></span> value<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token parameter">error</span> <span class="token operator">=></span> error</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Swiper基本使用</title>
    <link href="https://asuhe.fun/2021/11/30/2021-11-30-Swiper%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://asuhe.fun/2021/11/30/2021-11-30-Swiper%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-11-30T06:04:59.000Z</published>
    <updated>2021-11-30T06:47:25.386Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue"><a class="anchor" href="#vue">#</a> Vue</h2><h3 id="旧版"><a class="anchor" href="#旧版">#</a> 旧版</h3><h4 id="下载依赖包"><a class="anchor" href="#下载依赖包">#</a> 下载依赖包</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> swiper</pre></td></tr></table></figure><h4 id="在轮播组件中引入swiper和其css"><a class="anchor" href="#在轮播组件中引入swiper和其css">#</a> 在轮播组件中引入 swiper 和其 css</h4><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Swiper <span class="token keyword">from</span> <span class="token string">"swiper"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token string">'swiper/css/swiper.css'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="设置轮播的位置以及容器"><a class="anchor" href="#设置轮播的位置以及容器">#</a> 设置轮播的位置以及容器</h4><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-container<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySwiper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-slide<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in banners<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.imageUrl<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 435px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">&lt;!-- 如果需要分页器 --></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">&lt;!-- 如果需要导航按钮 --></span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h4 id="创建swiper实例"><a class="anchor" href="#创建swiper实例">#</a> 创建 Swiper 实例</h4><p>原则上一个 Swiper 实例只控制一个轮播图，<strong>而且 Swiper 实例一定要在界面显示后再创建，不然无法控制图片轮播</strong></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 数据更新后，先同步调用 watch 的回调，最后异步更新界面</span></pre></td></tr><tr><td data-num="2"></td><td><pre>watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//watch 监视轮播图片数据是否异步请求回来了</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">banners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">//nextTick 会在界面完成更新之后才执行指定的回调</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">var</span> mySwiper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>swiper<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 用 vue 的 ref 来隔离各个轮播图，防止一个 swiper 实例控制多个轮播图</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token comment">//direction: "vertical", // 垂直切换选项</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 循环模式选项</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>                autoplay<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    delay<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                    disableOnInteraction<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token comment">// 如果需要分页器</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                pagination<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                    el<span class="token operator">:</span> <span class="token string">".swiper-pagination"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token comment">// 如果需要前进后退按钮</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                navigation<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    nextEl<span class="token operator">:</span> <span class="token string">".swiper-button-next"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    prevEl<span class="token operator">:</span> <span class="token string">".swiper-button-prev"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token comment">// 如果需要滚动条</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                scrollbar<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    el<span class="token operator">:</span> <span class="token string">".swiper-scrollbar"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><h3 id="新版"><a class="anchor" href="#新版">#</a> 新版</h3><p>使用 <code>vue-awesome-swiper</code>  制作轮播图。</p><h4 id="安装"><a class="anchor" href="#安装">#</a> 安装</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> swiper</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> vue-awesome-swiper</pre></td></tr></table></figure><h4 id="定义swiperjs文件并注册该组件"><a class="anchor" href="#定义swiperjs文件并注册该组件">#</a> 定义 swiper.js 文件并注册该组件</h4><p>定义好 <code>swiper.js</code>  文件方便模块化管理插件</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// swiper.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> VueAwesomeSwiper <span class="token keyword">from</span> <span class="token string">'vue-awesome-swiper'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token string">'swiper/css/swiper.css'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueAwesomeSwiper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="在vue工程的mainjs中引入"><a class="anchor" href="#在vue工程的mainjs中引入">#</a> 在 vue 工程的 main.js 中引入</h4><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// main.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token string">'./swiper.js'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="使用"><a class="anchor" href="#使用">#</a> 使用</h4><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>// 轮播组件 tempalte部分</pre></td></tr><tr><td data-num="2"></td><td><pre>&lt;swiper :options="&#123;</pre></td></tr><tr><td data-num="3"></td><td><pre>          loop: true, // 循环模式选项</pre></td></tr><tr><td data-num="4"></td><td><pre>          autoplay: &#123;</pre></td></tr><tr><td data-num="5"></td><td><pre>            delay: 2000,</pre></td></tr><tr><td data-num="6"></td><td><pre>            disableOnInteraction: false,</pre></td></tr><tr><td data-num="7"></td><td><pre>          &#125;,</pre></td></tr><tr><td data-num="8"></td><td><pre>          // 如果需要分页器</pre></td></tr><tr><td data-num="9"></td><td><pre>          pagination: &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>            el: ".swiper-pagination",</pre></td></tr><tr><td data-num="11"></td><td><pre>            clickable:true</pre></td></tr><tr><td data-num="12"></td><td><pre>          &#125;,</pre></td></tr><tr><td data-num="13"></td><td><pre>          // 如果需要前进后退按钮</pre></td></tr><tr><td data-num="14"></td><td><pre>          navigation: &#123;</pre></td></tr><tr><td data-num="15"></td><td><pre>            nextEl: ".swiper-button-next",</pre></td></tr><tr><td data-num="16"></td><td><pre>            prevEl: ".swiper-button-prev",</pre></td></tr><tr><td data-num="17"></td><td><pre>          &#125;,</pre></td></tr><tr><td data-num="18"></td><td><pre>      &#125;" </pre></td></tr><tr><td data-num="19"></td><td><pre>       class="swiper"</pre></td></tr><tr><td data-num="20"></td><td><pre>       ref="swiper"</pre></td></tr><tr><td data-num="21"></td><td><pre>       id="mySwiper"></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-slide</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in banners<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.imageUrl<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">heigth</span><span class="token punctuation">:</span>435px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-slide</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-prev<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-button-next<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">calss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-pagination<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>给hexo添加b站视频</title>
    <link href="https://asuhe.fun/2021/11/26/2021-11-26-%E7%BB%99hexo%E6%96%B0%E5%A2%9Eb%E7%AB%99%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE/"/>
    <id>https://asuhe.fun/2021/11/26/2021-11-26-%E7%BB%99hexo%E6%96%B0%E5%A2%9Eb%E7%AB%99%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE/</id>
    <published>2021-11-26T14:05:21.000Z</published>
    <updated>2022-01-21T13:58:10.574Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="添加bili插件"><a class="anchor" href="#添加bili插件">#</a> 添加 bili 插件</h2><p>本插件是由 hexo 原生 <code>youtube</code>  标签插件更改而来的，用相同的方法可以添加各大视频网站的标签。</p><h3 id="具体步骤"><a class="anchor" href="#具体步骤">#</a> 具体步骤：</h3><ul><li>找到 hexo 安装目录下的标签插件存放位置</li><li>创建一个 <code>bili.js</code>  文件，将代码写入</li><li>注册该标签插件</li><li>使用</li></ul><h3 id="bilijs-文件内容"><a class="anchor" href="#bilijs-文件内容">#</a> bili.js 文件内容</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string">'use strict'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>const <span class="token punctuation">&#123;</span> htmlTag <span class="token punctuation">&#125;</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'hexo-util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>/**</pre></td></tr><tr><td data-num="6"></td><td><pre>* bili tag</pre></td></tr><tr><td data-num="7"></td><td><pre>*</pre></td></tr><tr><td data-num="8"></td><td><pre>* Syntax:</pre></td></tr><tr><td data-num="9"></td><td><pre>*   <span class="token operator">&lt;</span><span class="token operator">!</span>--swig￼0--<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre>*/</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> bibiTag<span class="token punctuation">(</span><span class="token punctuation">[</span>video_url<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  const src <span class="token operator">=</span> video_url<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  const iframeTag <span class="token operator">=</span> htmlTag<span class="token punctuation">(</span><span class="token string">'iframe'</span>, <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    src,</pre></td></tr><tr><td data-num="17"></td><td><pre>    frameborder: <span class="token string">'0'</span>,</pre></td></tr><tr><td data-num="18"></td><td><pre>    loading: <span class="token string">'lazy'</span>,</pre></td></tr><tr><td data-num="19"></td><td><pre>    allowfullscreen: <span class="token boolean">true</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span>, <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token builtin class-name">return</span> htmlTag<span class="token punctuation">(</span><span class="token string">'div'</span>, <span class="token punctuation">&#123;</span> class: <span class="token string">'video-container'</span> <span class="token punctuation">&#125;</span>, iframeTag, <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>module.exports <span class="token operator">=</span> bibiTag<span class="token punctuation">;</span></pre></td></tr></table></figure><p>前三步图示</p><p><img data-src="https://i0.hdslb.com/bfs/album/06c7d28b90cf3ed20111875af6b96c07a64a0be9.png" alt="存放文件的标签插件的位置" /></p><h3 id="使用"><a class="anchor" href="#使用">#</a> 使用</h3><p>直接根据语法使用即可，建议使用 b 站官方的分享链接，不然打开文章时可能会直接跳转到 b 站，复制 src 里的内容</p><p><img data-src="https://i0.hdslb.com/bfs/album/c26e0772dc5d995867ad512b9cf53b9edafc1687.png" alt="复制src中的内容" /></p><p>效果</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span>--swig￼1--<span class="token operator">></span></pre></td></tr></table></figure><h3 id="缺点"><a class="anchor" href="#缺点">#</a> 缺点</h3><p>只能以默认 360p 的分辨率播放视频，若想切换分辨率则会自动跳转到 b 站。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://asuhe.fun/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由</title>
    <link href="https://asuhe.fun/2021/11/22/2021-11-22-Vue%E8%B7%AF%E7%94%B1/"/>
    <id>https://asuhe.fun/2021/11/22/2021-11-22-Vue%E8%B7%AF%E7%94%B1/</id>
    <published>2021-11-22T13:49:01.000Z</published>
    <updated>2022-03-04T08:56:40.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本使用"><a class="anchor" href="#基本使用">#</a> 基本使用</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// ../router/index.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">'routes'</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 注册路由</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    mode<span class="token operator">:</span><span class="token string">'history'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    routes</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">//routes.js 路由表文件</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../pages/Home'</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        component<span class="token operator">:</span>Home</pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        redirect<span class="token operator">:</span>Home <span class="token comment">// 默认选中 Home 路由组件</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">//main.js 在全局文件中使用路由器</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'../Router'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    name<span class="token operator">:</span><span class="token string">'app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    eq<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    components<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        router</pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>当我们在 <code>main.js</code>  中注册了 <code>router</code> ，我们就可以在任何一个组件（包括非路由组件）中使用 <code>$route</code>  和 <code>$router</code>  对象了。</p><p><code>$route</code>  对象是局部路由信息对象，它包含了当前路由组件里的信息，包括 <code>params</code> 、 <code>query</code>  参数等等，我们可以用它来获取路由组件的参数</p><p><code>$router</code>  对象是全局的路由器对象，全局就一个。它包含了很多属性和方法（push、replace、go 等等），可以让整个应用都可以拥有路由功能。编程式导航就利用了这个对象来实现动态跳转。</p><p><code>&lt;router-view&gt;</code>  标签标明了切换路由组件时，路由组件的显示位置。路由导航有两种模式：一种是声明式路由导航，另一种是编程式路由导航。使用 <code>&lt;router-link to=&quot;path&quot;&gt;</code>  显示声明路由导航位置就是声明式导航，这种方式适合固定部位导航如顶部的注册登录按钮等，一旦页面要生成的声明式导航过多那么页面就会变的十分卡顿。当链接过多时推荐使用编程式导航来生成导航链接，编程式导航还可以利用事件委托进一步优化页面性能。使用编程式导航时我们只需要给 DOM 元素添加 <code>click</code>  事件，在这个事件触发的函数里我们可以用 <code>$router.push</code>  或 <code>$router.replace</code>  这两个函数完成路由跳转。这两种方式的唯一的区别就是 <code>push</code>  方法生成的链接没有历史浏览记录，无法回退。当需要回退功能时可以使用 <code>replace</code> 。</p><h2 id="路由模式"><a class="anchor" href="#路由模式">#</a> 路由模式</h2><p><code>vue-router</code>  有两种路由方式，分别是 <code>hash</code>  模式和 <code>history</code>  模式。一般默认使用 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。在 <code>hash</code>  模式中， <code>URL</code>  路径上会有一个 <code>#</code> 标识符， <code>#</code> 标识符和后面的 <code>URL</code>  片段被称为 <code>hash</code> 。它有以下一些特点：</p><ul><li>在第一个 <code>#</code> 后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。</li><li>单单改变 #后的部分，浏览器只会滚动到相应位置，不会重新加载网页。</li><li>每一次改变 #后的部分，都会在浏览器的访问历史中增加一个记录，使用 &quot;后退&quot; 按钮，就可以回到上一个位置。</li><li>可通过 window.location.hash 属性读取 hash 值，并且 window.location.hash 这个属性可读可写。</li><li>使用 window.addEventListener (&quot;hashchange&quot;, fun) 可以监听 hash 的变化</li></ul><p>而 <code>history</code>  模式是采用 <code>HTML5</code>  标准的 History。当你使用 <code>history</code>  模式时，URL 就像正常的 url，例如  <code>http://yoursite.com/user/id</code> ，路径中不会出现 <code>#</code> 。这种模式需要后台的支持，若后台没有做相应处理，则该种模式直接使用 <code>URL</code>  路径访问会无法访问到对应资源。</p><p>两种模式的区别：</p><ul><li><code>hash</code>  模式相对 <code>history</code>  模式兼容性更好点</li><li><code>hash</code>  模式中 <code>#</code> 以后的东西都不会被当作路径发送给后端服务器， <code>history</code>  模式里整个 <code>url</code>  都会被当作请求路径发送给后端服务器，这可能导致刷新页面时，如果没有专门配置 404 页面会导致请求了没有的路径时页面空白<ul><li><code>history</code>  模式需要后端服务器的支持</li></ul></li></ul><h2 id="缓存路由组件"><a class="anchor" href="#缓存路由组件">#</a> 缓存路由组件</h2><p>我们都知道当切换路由时原本的路由会被销毁，有时候我们不希望切换路由时原组件被销毁。这时就可以使用路由缓存技术。我们需要在放置 <code>&lt;router-view&gt;</code>  的组件里使用 <code>&lt;keep-alive&gt;</code>  包裹，这样所有在该视图里展示的路由组件都会被缓存。若我们不想所有路由组件被缓存我们可以使用 <code>&lt;keep-alive include=&quot;组件名&quot;&gt;</code>  来指定缓存的路由组件，需要缓存多个时可以使用数组的形式 <code>&lt;keep-alive :include=&quot;['组件名1','组件名2']&quot;&gt;</code> 。让不展示的路由组件保持挂载，不被销毁</p><h2 id="两个路由组件独有的生命周期钩子"><a class="anchor" href="#两个路由组件独有的生命周期钩子">#</a> 两个路由组件独有的生命周期钩子</h2><ul><li>activeated：路由组件被激活（展示）时触发</li><li>deactivated：路由组件失活（隐藏）时触发</li></ul><p>当路由组件被 <code>keep-live</code>  但又不被展示时，我们可以使用这两个钩子来做一些事情。例如停用定时器等等</p><h2 id="路由守卫"><a class="anchor" href="#路由守卫">#</a> 路由守卫</h2><p>路由守卫可以分为三大类：全局路由守卫、独享路由守卫和组件路由守卫。路由守卫使用的场景通常是需要鉴权的时候，例如有些页面需要登录才能查看，有些页面只能从规定的页面去跳转。</p><p>全局路由守卫和独享路由守卫的概念是类似的，只不过全局路由守卫是作用于全局，任何一个组件跳转都要通过全局路由守卫。 <code>beforeEach</code>  和 <code>afterEach</code>  就是提供给我们的两个用于操作组件路由匹配动作前后的函数，其中在所有的守卫中仅 <code>afterEach</code>  没有 <code>next</code>  参数，其它守卫都有 <code>to、from、next</code>  这三个参数。** 这两个函数我理解为类似于 <code>beforeMonted</code>  和 <code>mounted</code>  这两个生命周期钩子，它们分别在路由规则匹配前后工作。** 而独享路由守卫仅有一个匹配前的函数 <code>beforeEnter</code>  供我们使用。</p><p>组件路由守卫有三个函数 <code>beforeRouterEnter</code> 、 <code> beforeRouteUpdate</code>  和 <code> beforeRouteLeave</code> 。<strong>组件路由守卫都是在组件通过路由规则匹配才能生效的，若不是通过路由规则跳转的则守卫不会被执行。</strong></p><ul><li><p><code>beforeRouterEnter</code>  在渲染该组件的对应路由被 confirm 前调用，并且不能获取组件实例  <code>this</code>  因为当守卫执行前，组件实例还没被创建。</p></li><li><p><code>beforRouterUpdate</code>  在当前路由改变，但是该组件被复用时调用。举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。它里面可以访问组件实例  <code>this</code> 。</p></li><li><p><code>beforeRouteLeave</code>  导航离开该组件的对应路由时调用，这里的导航离开指的是不显示该组件要去往其它组件时的场景， 可以访问组件实例  <code>this</code></p></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://asuhe.fun/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>手撸bind、apply、call</title>
    <link href="https://asuhe.fun/2021/11/21/2021-11-21-%E6%89%8B%E6%92%B8bind%E3%80%81apply%E3%80%81call/"/>
    <id>https://asuhe.fun/2021/11/21/2021-11-21-%E6%89%8B%E6%92%B8bind%E3%80%81apply%E3%80%81call/</id>
    <published>2021-11-21T11:55:16.000Z</published>
    <updated>2022-02-25T16:21:52.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="call"><a class="anchor" href="#call">#</a> call</h2><ul><li>功能：将函数 this 指向更改为第一个传入的形参对象，并调用函数本身</li><li>参数：<ul><li><strong>thisArg</strong>：可选的。在 <em> <code>function</code> </em> 函数运行时使用的  <code>this</code>  值。请注意， <code>this</code>  可能不是该方法看到的实际值：如果这个函数处于<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RyaWN0X21vZGU=">非严格模式</span>下，则指定为  <code>null</code>  或  <code>undefined</code>  时会自动替换为指向全局对象，原始值会被包装。</li><li><strong>arg1, arg2, ...</strong>：可选的。指定的参数列表。</li></ul></li><li>返回值：使用调用者提供的  <code>this</code>  值和参数调用该函数的返回值。若该方法没有返回值，则返回  <code>undefined</code> 。</li></ul><h3 id="es5写法"><a class="anchor" href="#es5写法">#</a> ES5 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 拿到传入的第一个参数</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">var</span> thisArg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 转换 arguments 为数组</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token string">'Symbol'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">var</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="es6写法"><a class="anchor" href="#es6写法">#</a> ES6 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 将方法定义在 Fuction 的 prototype 上，这样任何一个函数对象都可以使用该方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 判断第一个传入的形参是否为空</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>thisArg <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> thisArg <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> window<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 保存调用该方法的 this，该 this 指向的也就是调用 myCall 方法的那个函数对象本身</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用 Symbol 做唯一标识符，防止与源函数对象上的属性名冲突而产生覆盖</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 调用源函数</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 清理属性名，使原来传入的对象其恢复原样</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 返回改变 this 后源函数调用结果</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="apply"><a class="anchor" href="#apply">#</a> apply</h2><ul><li><p>功能：同 call，将函数 this 指向更改为第一个传入的形参对象，并调用函数本身</p></li><li><p>参数：</p><ul><li><strong>thisArg</strong>：可选的。在 <em> <code>func</code> </em> 函数运行时使用的  <code>this</code>  值。</li><li><strong>argsArray</strong>：可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给  <code>func</code>  函数。如果该参数的值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"> <code>null</code> </a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"> <code>undefined</code> </a>，则表示不需要传入任何参数。</li></ul></li><li><p>返回值：使用调用者提供的  <code>this</code>  值和参数调用该函数的返回值。若该方法没有返回值，则返回  <code>undefined</code> 。</p></li></ul><h3 id="es5写法-2"><a class="anchor" href="#es5写法-2">#</a> ES5 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 拿到传入的第一个参数</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">var</span> thisArg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 转换 arguments 为数组</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token string">'Symbol'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">var</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="es6写法-2"><a class="anchor" href="#es6写法-2">#</a> ES6 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 步骤基本和 call 一样，唯一的区别就是第二个参数是给源函数使用的参数数组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span>argsArray</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>thisArg <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> thisArg <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> window<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 调用源函数，将参数组数展开</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>argsArray<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="bind"><a class="anchor" href="#bind">#</a> bind</h2><ul><li>功能：将函数 this 指向更改为第一个传入的形参对象，而其余参数将作为返回的新函数的参数，供调用时使用。</li><li>参数：<ul><li><strong>thisArg</strong>：调用绑定函数时作为  <code>this</code>  参数传递给目标函数的值。</li><li><strong>arg1, arg2, ...</strong>：当目标函数被调用时，被预置入绑定函数的参数列表中的参数。</li></ul></li><li>返回值：返回一个原函数的拷贝，并拥有指定的  <code>this</code>  值和初始参数。</li></ul><h3 id="es5写法-3"><a class="anchor" href="#es5写法-3">#</a> ES5 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> thisArg <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="es6写法-3"><a class="anchor" href="#es6写法-3">#</a> ES6 写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span><span class="token operator">...</span>args1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>thisArg <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> thisArg <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> window<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span>args1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://asuhe.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://asuhe.fun/tags/javascript/"/>
    
    <category term="手撸源码" scheme="https://asuhe.fun/tags/%E6%89%8B%E6%92%B8%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
