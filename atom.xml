<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Born in poverty, died of numbness</title>
  
  
  <link href="https://asuhe.fun/atom.xml" rel="self"/>
  
  <link href="https://asuhe.fun/"/>
  <updated>2023-08-19T14:51:54.059Z</updated>
  <id>https://asuhe.fun/</id>
  
  <author>
    <name>Asuhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git快速上手指北（二）</title>
    <link href="https://asuhe.fun/asuhe/3728f9d8.html"/>
    <id>https://asuhe.fun/asuhe/3728f9d8.html</id>
    <published>2023-04-07T13:02:54.000Z</published>
    <updated>2023-08-19T14:51:54.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>工作里习惯用 <code>git</code>  命令行进行代码提交，但是用来用去一直都是只会 <code>push</code> 、 <code>pull</code> 、 <code>checkout</code>  等最基本的操作。还是有一些常用的命令操作不太记得，在此记录一下留一个备份以便日后查看。</p><h2 id="目标"><a class="anchor" href="#目标">#</a> 目标</h2><p>本文目标是介绍几个经典场景下 <code>git</code>  命令行的运用，通过本文的你将可以学会如下操作：</p><ul><li>修改历史 <code>commit</code>  的描述信息</li><li>合并多个 <code>commit</code></li><li>对分支进行重命名</li><li>推荐的 <code>commit</code>  规范</li></ul><h2 id="修改历史commit"><a class="anchor" href="#修改历史commit">#</a> 修改历史 <code>commit</code></h2><h3 id="修改最近一次的commit"><a class="anchor" href="#修改最近一次的commit">#</a> 修改最近一次的 <code>commit</code></h3><h4 id="方法一"><a class="anchor" href="#方法一">#</a> 方法一</h4><p>有时我们想对刚刚提交的 <code>commit</code>  信息进行修改，那么此时我们可以将版本退回到上一次 <code>commit</code>  的状态，然后再重新提交一次 <code>commit</code> 。</p><p>先使用 <code>git log</code>  命令查看 <code>commit</code>  记录，复制想要回退版本的 <code>HEAD值</code> 。在进行 <code>git reset HEAD值</code> 就可以进行版本的回退。回退以后重新 <code>commit</code>  就 OK 啦。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> log <span class="token comment"># 查看 commit 记录</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> reset HEAD值 <span class="token comment"># 回退版本</span></pre></td></tr></table></figure><p>需要注意的是 <code>git reset</code>  命令是取开区间的。什么意思呢，就是 <code>git</code>  会把状态回退到你所取的 <code>HEAD值</code> 的那个版本，在该 <code>HEAD值</code> 以后的 <code>commit</code>  都会被回退，<strong>但并不包括该 <code>HEAD值</code> 的版本。</strong></p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230407213022783.png" alt="image-20230407213022783" /></p><h4 id="方法二"><a class="anchor" href="#方法二">#</a> 方法二</h4><p>有时候我们有些改动提交到了暂存区，而此时我们又想在不动暂存区的东西的前提下，对最近一次提交的 commit 进行修改。那么此时我们可以使用 <code>git commit --amend</code>  命令。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> commit --amend <span class="token comment"># 修改最近的一条 commit</span></pre></td></tr></table></figure><p>这种方法的好处是不会修改 <code>commit</code>  的 <code>HEAD值</code> ，只是单纯修改 <code>commit</code>  信息。适用于我们上面所说的场景。<strong>推荐使用。</strong></p><p>执行该条命令后我们会直接进入 <code>vim</code>  的界面，想要在 <code>vim</code>  的进行编辑我们只需要将光标移动到想要插入字符的位置然后按 <code>i</code>  进入 <code>vim</code>  的插入模式。</p><p><code>commit</code>  修改完成后，按 <code>ESC键</code> 退出插入模式，进入命令模式。命令模式下按 <code>:</code>  可进行命令的输入。</p><p><code>:q</code> ，直接退出不保持修改。</p><p><code>:wq</code> ，保存修改并退出。此时我们 <code>:wq</code>  保存退出即可。</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230407214416961.png" alt="image-20230407214416961" /></p><h3 id="修改多条commit"><a class="anchor" href="#修改多条commit">#</a> 修改多条 <code>commit</code></h3><p>如果需要修改多条 <code>commit</code>  的描述信息，那么上面的方法就不太合适了。</p><p>我们可以使用 <code>git rebase -i HEAD</code>  命令来进行修改多条 <code>commit</code> 。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> rebase -i HEAD值</pre></td></tr></table></figure><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230415120304113.png" alt="image-20230415120304113" /></p><p>再次进入到熟悉的 <code>vim</code>  操作界面，根据提示我们可以将需要修改的 <code>commit</code>  前面的 <code>pick</code>  改成 <code>reword</code>  或者 <code>r</code>  即可完成 <code>commit</code>  的修改。</p><p><code>git rebase -i</code>  不止可以这样使用。它还有几种修改选择：</p><ul><li><strong>pick</strong>：保留该 commit</li><li><strong>reword</strong>：保留该 commit，但我需要修改该 commit 的 Message</li><li><strong>edit</strong>：保留该 commit, 但我要停下来修改该提交 (包括修改文件)</li><li><strong>squash</strong>：将该 commit 和前一个 commit 合并</li><li><strong>fixup</strong>：将该 commit 和前一个 commit 合并，但我不要保留该提交的注释信息</li><li><strong>exec</strong>：执行 shell 命令</li><li><strong>drop</strong>：丢弃这个 commit</li></ul><h2 id="重命名git分支"><a class="anchor" href="#重命名git分支">#</a> 重命名 <code>git</code>  分支</h2><p>有时我们想要重命名我们所在的分支，为了实现这个需求，下面我将介绍两种方法来重命名分支。</p><h3 id="方法一-2"><a class="anchor" href="#方法一-2">#</a> 方法一</h3><p>切换到我们需要重命名的分支上，然后使用 <code>-m</code>  参数重命名分支</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> branch -m new-branch-name</pre></td></tr></table></figure><h3 id="方法二-2"><a class="anchor" href="#方法二-2">#</a> 方法二</h3><p>在任意分支上，直接使用 <code>-m</code>  参数重命名分支</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> branch -m old-branch-name new-branch-name</pre></td></tr></table></figure><h2 id="推荐的commit-规范"><a class="anchor" href="#推荐的commit-规范">#</a> 推荐的 <code>commit</code>  规范</h2><p>参考比较流行的 <code>AngularJS</code>  的规范，这里我推荐一些 <code>commit</code>  信息的填写规范。</p><ul><li><strong>feat:</strong> 新增页面或功能</li><li><strong>fix:</strong> bug 修复</li><li><strong>docs:</strong> 只改动了文档相关的内容</li><li><strong>style:</strong> 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</li><li><strong>build:</strong> 构 造 工 具的 或 者 外 部 依 赖 的 改 动 ， 例 如 <code>webpack</code> ， <code>npm</code> ， <code>pom</code></li><li><strong>refactor:</strong> 代码重构时使用，重构（既不是新增功能，也不是修改 bug 的代码变动）</li><li><strong>revert:</strong> 执行  <code>git revert</code>  回退类型的提交信息</li><li><strong>test:</strong> 添加测试或者修改现有测试</li><li><strong>perf:</strong> 性能提升改动</li><li><strong>ci:</strong> 对 CI 配置文件和脚本的更改</li><li><strong>choreL:</strong> 不修改  <code>src </code> 或者  <code>test </code> 的其余修改，例如构建过程或辅助工具的变动</li><li><strong>hotfix:</strong> 紧急修复，</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Tools" scheme="https://asuhe.fun/categories/Tools/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境下安装MySQL &amp; PHP环境</title>
    <link href="https://asuhe.fun/asuhe/9fa73a0.html"/>
    <id>https://asuhe.fun/asuhe/9fa73a0.html</id>
    <published>2023-04-05T08:23:44.000Z</published>
    <updated>2023-04-07T13:57:34.967Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a class="anchor" href="#背景">#</a> 背景</h2><p>最近朋友叫我帮忙起一个 Nginx + PHP 的项目，因为一直做的前端工作。对于后端服务怎么起来没太多了解。今天就从安装 MySQL 数据库开始，摸索一下后端搭建。</p><h2 id="先决条件"><a class="anchor" href="#先决条件">#</a> 先决条件</h2><ul><li>系统环境：Ubuntu</li><li>用户权限：root</li></ul><p>理论上用 apt 包管理器安装东西的都可以直接套用该教程，不是 <code>apt</code>  的理论上就把 <code>apt</code>  安装命令换一下就行。</p><h2 id="目标"><a class="anchor" href="#目标">#</a> 目标</h2><ul><li>安装 5.6 版本的 MySQL</li><li>安装 7.2 版本的 PHP</li></ul><h2 id="安装mysql"><a class="anchor" href="#安装mysql">#</a> 安装 MySQL</h2><h3 id="更新apt仓库"><a class="anchor" href="#更新apt仓库">#</a> 更新 apt 仓库</h3><p>使用 <code>apt</code>  命令更新包仓库。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> upgrade</pre></td></tr></table></figure><p>尝试直接下载，看你系统里的下载源有没有包括你需要的版本。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> <span class="token function">install</span> mysql-server-5-6</pre></td></tr></table></figure><p>若成功，则直接结束该步骤。若为安装成功，则添加下载源步骤。</p><h3 id="添加下载源"><a class="anchor" href="#添加下载源">#</a> 添加下载源</h3><h4 id="使用wget手动安装"><a class="anchor" href="#使用wget手动安装">#</a> 使用 wget 手动安装</h4><p>使用 <code>wget</code>  添加 apt 的 MySQL 仓库。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">wget</span> https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</pre></td></tr></table></figure><p>注意 <code>wget</code>  是一个 <code>Linux</code>  系统上（window 版本正在支持 ing）的网络下载软件，部分 <code>Linux</code>  系统会自带这个软件，若提示 <code>wget</code>  命令找不到，我们则需要再安装一下 <code>wget</code> 。更多关于<a href="(https://www.gnu.org/software/wget/)"> <code>wget</code> </a> 的介绍。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token comment"># 安装 wget</span></pre></td></tr></table></figure><p>添加成功后你会见到提示如图：</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230405165215341.png" alt="image-20230405165215341" /></p><p>该种方式的为下载好包进行手动安装（网上大多数资料都是用这个方法），后续请看<span class="exturl" data-url="aHR0cHM6Ly9jb21wdXRpbmdmb3JnZWVrcy5jb20vaG93LXRvLWluc3RhbGwtbXlzcWwtb24tdWJ1bnR1LWZvY2FsLw==">这里</span>。我觉得这个方式比较麻烦就不进行过多介绍了。</p><h4 id="使用apt自动安装"><a class="anchor" href="#使用apt自动安装">#</a> 使用 apt 自动安装</h4><p><strong>除了以上方法，我们还可以使用自带的命令添加源。推荐使用自带命令添加源。</strong></p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>add-apt-repository <span class="token string">'deb http://archive.ubuntu.com/ubuntu trusty universe'</span></pre></td></tr></table></figure><p>添加源完成后我们可以去源的配置文件 <code>/etc/apt/sources.list</code>  里查看。如果你的 <code>add-apt-repository</code>  命令失败了或者有问题，那么也可以直接去编辑 <code>/etc/apt/sources.list</code>  文件添加源。</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230405170728080.png" alt="image-20230405170728080" /></p><p>添加好了以后我们需要更新一下。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> update</pre></td></tr></table></figure><p>由于系统的安全策略，我们可能会因为没有公钥认证，导致不能使用这个源来更新。因为我的系统已经添加过公钥了，此处用 <code>monodb</code>  演示操作都是一样的。</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230405172133678.png" alt="image-20230405172133678" /></p><p>此时我们需要添加公钥，将上面 <code>NO_PUBKEY</code>  后面的字符串复制下来。执行以下命令添加公钥签名：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 68818C72E52529D4</pre></td></tr></table></figure><p>添加签名后再执行 <code>apt update</code>  更新一下。</p><p>该步骤参考资料点击<span class="exturl" data-url="aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xMzkzMzgxL3VuYWJsZS10by1hZGQtb25kcmVqLXJlcG9zaXRvcnktYXB0LWluLXVidW50dS0yMC0wNA==">这里</span>。</p><h4 id="查看apt源里有哪些mysql56版本的东西可供安装"><a class="anchor" href="#查看apt源里有哪些mysql56版本的东西可供安装">#</a> 查看 apt 源里，有哪些 MySQL5.6 版本的东西可供安装</h4><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> search mysql <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">5.6</span></pre></td></tr></table></figure><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230405172857651.png" alt="image-20230405172857651" /></p><p>安装 5.6 版本的服务器和客户端</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> <span class="token function">install</span> mysql-server-5.6 mysql-client-5.6</pre></td></tr></table></figure><p>到这里就大功告成了！可以开始愉快地使用了。</p><p>在安装过程中会弹出界面叫你设置数据库 root 用户的用户密码，记得设置就好了。</p><h3 id="使用命令行连接数据库"><a class="anchor" href="#使用命令行连接数据库">#</a> 使用命令行连接数据库</h3><p>连接数据库前我们需要启动 <code>MySQL</code>  服务器。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">service</span> mysql start <span class="token comment"># 启动</span></pre></td></tr></table></figure><p>检查一下起来没有。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">service</span> mysql status <span class="token comment"># 查看 mysql 服务器的状态</span></pre></td></tr></table></figure><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230405173928103.png" alt="image-20230405173928103" /></p><h4 id="创建数据库"><a class="anchor" href="#创建数据库">#</a> 创建数据库</h4><p>使用用户账号密码直接连接，因为我们刚刚安装好数据库，里面没有创建任何一个数据。我们直接进入就可以了。这里推荐查看官方教程。<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2Nvbm5lY3RpbmcuaHRtbA==">连接数据库教程</span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2RhdGFiYXNlLXVzZS5odG1s">创建数据教程</span>。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>mysql --host<span class="token operator">=</span>localhost（数据库地址，我们本地起的也没改端口所以默认localhost） --user<span class="token operator">=</span>用户名（刚刚安装好都是有root用户） --password<span class="token operator">=</span>设置的密码</pre></td></tr></table></figure><h4 id="使用sql脚本创建表"><a class="anchor" href="#使用sql脚本创建表">#</a> 使用 sql 脚本创建表</h4><p><strong>前置条件：</strong></p><ul><li>数据库里面有一个已经存在的数据库，本例中为 <code>asuhe</code></li><li>可用的 SQL 脚本，本例中为 <code>test.sql</code></li></ul><p>这里介绍如何使用现成的数据库脚本来创建数据库的表。其实也很简单，具体命令如下：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>mysql -u username<span class="token punctuation">(</span>数据库用户名<span class="token punctuation">)</span> -p password（用户密码） asuhe（目标数据库） <span class="token operator">&lt;</span> test.sql（sql脚本路径）</pre></td></tr></table></figure><p>该步骤参考资料点击<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA3NjkzNDQvY3JlYXRlLW15c3FsLWRhdGFiYXNlLXdpdGgtc3FsLWZpbGU=">这里</span>。</p><h3 id="卸载mysql"><a class="anchor" href="#卸载mysql">#</a> 卸载 MySQL</h3><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> remove mysql-client mysql-server -y</pre></td></tr></table></figure><p>该步骤参考资料，点击<span class="exturl" data-url="aHR0cHM6Ly9waG9lbml4bmFwLmNvbS9rYi91bmluc3RhbGwtbXlzcWw=">这里</span>。</p><h2 id="安装php"><a class="anchor" href="#安装php">#</a> 安装 PHP</h2><p>安装 PHP 的步骤和 MySQL 类似啦，都是先更新一下 <code>apt</code>  仓库的软件列表。这里不再过多赘述。</p><h3 id="安装前置依赖"><a class="anchor" href="#安装前置依赖">#</a> 安装前置依赖</h3><p>安装 PHP 我们需要一些前置依赖来帮我们更好地使用命令行自动安装。执行一下命令安装依赖：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> <span class="token function">install</span> software-properties-common ca-certificates lsb-release apt-transport-https</pre></td></tr></table></figure><h3 id="添加php下载源"><a class="anchor" href="#添加php下载源">#</a> 添加 PHP 下载源</h3><p>这里其实和安装 MySQL 类似，都是使用命令来自动添加仓库源。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>add-apt-repository ppa:ondrej/php</pre></td></tr></table></figure><p>与 MySQL 相同，若你的 <code>add-apt-repository</code>  没法正常用或者报错。可以手动去 <code>sources.list</code>  添加 <code>apt</code>  的源。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">vim</span> /etc/apt/sources.list</pre></td></tr></table></figure><p>添加该行。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>deb https://ppa.launchpadcontent.net/ondrej/php/ubuntu focal main</pre></td></tr></table></figure><p>该步骤<span class="exturl" data-url="aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xMzkzMzgxL3VuYWJsZS10by1hZGQtb25kcmVqLXJlcG9zaXRvcnktYXB0LWluLXVidW50dS0yMC0wNA==">参考资料</span>。</p><h3 id="安装需要的php版本"><a class="anchor" href="#安装需要的php版本">#</a> 安装需要的 PHP 版本</h3><p>安装 7.2 版本。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> <span class="token function">install</span> php7.2</pre></td></tr></table></figure><p>检查有没有安装好。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>php -v</pre></td></tr></table></figure><p>OK，到这里基本都完成了。</p><h2 id="参考资料"><a class="anchor" href="#参考资料">#</a> 参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3NldGMuY29tL2FyY2hpdmVzLzIwNDM2Lmh0bWwjdWJ1bnR1LWluc3RhbGwtbXlzcWw1Ng==">安装 MySQL</span></p><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNhZG1pbi5uZXQvaG93LXRvLWluc3RhbGwtcGhwLW9uLXVidW50dS0yMi0wNC8=">安装 PHP</span></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://asuhe.fun/categories/Linux/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>如何在Node.js中使用ES6模块化语法</title>
    <link href="https://asuhe.fun/asuhe/5f30bb4e.html"/>
    <id>https://asuhe.fun/asuhe/5f30bb4e.html</id>
    <published>2023-03-25T15:46:00.000Z</published>
    <updated>2023-04-07T13:57:34.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>众所周知，在 Node 中不能直接使用 ES6 模块。通常情况下是这样的，但是如果我们非要用 ES6 模块那也是可以滴。下面我就介绍两种在 Node 环境下使用 ES6 模块的方法。不过在此之前，你必须保证项目中 Node 的版本在 14 以上。</p><h2 id="方法一修改文件后缀名"><a class="anchor" href="#方法一修改文件后缀名">#</a> 方法一：修改文件后缀名</h2><p>在 Node 项目中使用 ES6 模块最简单的方法就是将 <code>.js</code>  文件的扩展名替换为 <code>.mjs</code> 。Node 在编译 <code>.mjs</code>  文件时，将会使用 <code>ES6模块化规范</code> 来处理代码，而不是使用默认的 <code>CommonJS模块化规范</code> 。同时，你也可以用 <code>.cjs</code>  文件扩展名告诉 Node 使用 <code>CommonJS模块化规范</code> 处理代码。简而言之，你可以通过文件扩展名来告诉 Node 使用哪种模块化规范来处理代码，默认使用的是 <code>CommonJS</code> 。</p><h3 id="在es6模块化的文件中导入commonjs模块"><a class="anchor" href="#在es6模块化的文件中导入commonjs模块">#</a> 在 ES6 模块化的文件中导入 CommonJS 模块</h3><p>Node 支持在 <code>ES6模块</code> 中导入 <code>CommonJS模块</code> 。例如：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// a.mjs</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">'b'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>test<span class="token punctuation">.</span><span class="token function">helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world!</span></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// b.cjs</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function-variable function">helloworld</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>但是反过来，在 <code>CommonJS模块</code> 中导入 <code>ES6模块</code> 在 Node 中不支持。如果非要在 <code>CommonJS模块</code> 中使用 <code>ES6模块</code> ，我们可以借助一些编译器来帮助我们把 <code>ES6模块</code> 翻译成 <code>CommonJS模块</code> ，从而实现导入。</p><h2 id="方法二配置packagejson文件"><a class="anchor" href="#方法二配置packagejson文件">#</a> 方法二：配置 Package.json 文件</h2><p>如果想要在整个项目中都使用 <code>ES6模块化规范</code> ，一个一个更改文件扩展名太费劲了。我们可以通过在项目的 <code>package.json</code>  文件中添加 <code>&quot;type&quot;: &quot;module&quot;</code> 。例如：</p><pre><code class="language-JSON">// package.json&#123;  &quot;name&quot;: &quot;ESM_Module&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;This is a test project&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;type&quot;: &quot;module&quot;, // 添加类型说明  &quot;scripts&quot;: &#123;    &quot;start&quot;: &quot;node index.js&quot;  &#125;,&#125;</code></pre><p>当我们在 <code>package.json</code>  中添加 <code>&quot;type&quot;: &quot;module&quot;</code>  时，所有的文件都会被 Node 当作 ES6 模块文件来处理，除非该文件的扩展名为 <code>.cjs</code> 。 <code>node_modules</code>  文件夹中的依赖文件还是使用 <code>CommonJS</code>  模块化规范处理，不会受到影响。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>防盗链原理</title>
    <link href="https://asuhe.fun/asuhe/6a18b1b9.html"/>
    <id>https://asuhe.fun/asuhe/6a18b1b9.html</id>
    <published>2023-03-25T13:35:52.000Z</published>
    <updated>2023-04-07T13:57:34.966Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为防盗链"><a class="anchor" href="#何为防盗链">#</a> 何为防盗链</h2><p>防盗链是一种用于保护站点内容的技术，通常用于防止其它网站在未经授权的情况下使用本站链接或者嵌入本站内容。图片、视频、音频等资源是最常见的会做防盗链处理的资源。因为这些资源的传输会占用比较大的带宽资源，一是会拖慢源站速度，二是增加源站的带宽负担却不给源站带来任何访问或点击。为了避免这种资源盗用的行为，许多网站都会做防盗链处理，阻止薅羊毛保护自己资源的安全。</p><p>例如本站的文章图床就是 B 站，白嫖 B 站嘿嘿。右击鼠标，审查文章图片元素，我们可以看见图片链接来自 B 站。代码大概如下</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://article.biliimg.com/bfs/article/cab8d12175592664b2e18008c81b0e47681f46fd.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230325220138555.png" alt="image-20230325220138555" /></p><h2 id="防盗链的技术手段"><a class="anchor" href="#防盗链的技术手段">#</a> 防盗链的技术手段</h2><p>防盗链基本都是在服务端做处理的。** 当客户端请求资源时，服务器根据客户端请求中携带的某种约定好的标识来确定请求来自我们授权过资源的站点。** 目前较为普遍采用的就是 HTTP 请求头中的 <code>referrer</code>  来判断请求来源。也有其它的方案来进行防盗链处理如：</p><h3 id="token-防盗链"><a class="anchor" href="#token-防盗链">#</a> Token 防盗链</h3><p>通过设置 Token 密钥，配合签名过期时间来控制资源内容的访问时限。Token 防盗链采用 md5 算法，将密钥、过期时间、文件路径等信息所计算的 md5 值加入到 URL 中，当客户端在验证请求时，除了验证过期时间，同时还会验证该 md5 值是否匹配，对于不匹配的 md5，说明 URL 被篡改，即使请求未过期也会禁止服务。</p><h3 id="user-agent-防盗链"><a class="anchor" href="#user-agent-防盗链">#</a> User-Agent 防盗链</h3><p>每一个客户端都拥有自己的专属 User-Agent，我们可以抓包请求头查询到 User-Agent ，然后将自己的 User-Agent 加入白名单，或者将其他想要禁止的客户端 User-Agent 加入黑名单，从而保证用户只从自己允许的客户端下载内容。</p><p>防盗链的方法有很多，但是基本逻辑都是一样的。<strong>其关键点在于如何鉴别请求资源的客户端的身份，鉴权成功就返回资源。</strong></p><h2 id="破解防盗链"><a class="anchor" href="#破解防盗链">#</a> 破解防盗链</h2><p>有了上面明确的基本思考方向，那么破解防盗链的方法也就有头绪。** 既然防盗链的关键是身份识别，那么我们想办法绕过身份识别不就可以了。** 下面介绍一种现在最常用的 <code>referrer</code>  防盗链方法的破解。</p><p><code>referrer</code>  防盗链是利用 HTTP 请求头里的 <code>referrer</code>  参数来进行客户端身份识别的，服务器可以设置校验这个字段信息。通常服务器的设置是有这个字段信息则进行校验，没有 <code>referrer</code>  字段则默认通过校验。即不强制校验 <code>referrer</code>  字段。利用这个特性我们可以将我们请求中的 <code>referrer</code>  去掉以达到破解防盗链的效果。</p><h3 id="referrer-policy"><a class="anchor" href="#referrer-policy">#</a> Referrer-Policy</h3><p>Referrer-Policy 是 HTTP 请求头部的一个字段，它用于表示该次请求使用的 <code>referrer</code>  策略。</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230325223458311.png" alt="image-20230325223458311" /></p><p>它有以下几种值：</p><pre><code>Referrer-Policy: no-referrerReferrer-Policy: no-referrer-when-downgradeReferrer-Policy: originReferrer-Policy: origin-when-cross-originReferrer-Policy: same-originReferrer-Policy: strict-originReferrer-Policy: strict-origin-when-cross-originReferrer-Policy: unsafe-url</code></pre><p>关于字段的具体解释，点击<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1JlZmVycmVyLVBvbGljeQ==">这里</span>查看。</p><h4 id="使用meta标签设定文档的referrer-policy"><a class="anchor" href="#使用meta标签设定文档的referrer-policy">#</a> 使用 meta 标签设定文档的 Referrer-Policy</h4><p>在网页的头部设置 meta 标签可以指定整个文档的资源请求 <code>referrer</code>  策略。例如设置资源请求不携带 <code>referrer</code> 。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-referrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>关于 meta 标签的更多用法，点击<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRNTC9FbGVtZW50L21ldGE=">这里</span>查看。</p><p>需要注意的是使用 <code>meta</code>  标签设定文档的 referrer 策略，在 <code>css</code>  样式中并不生效。什么意思，看下面代码：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-referrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'http://article.biliimg.com/bfs/article/cab8d12175592664b2e18008c81b0e47681f46fd.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>按理来说我们给文档设置了 <code>referrer</code>  策略为 <code>no-referrer</code> ，图片请求的 HTTP 头不应携带 <code>referrer</code>  头部，但是实际上它还是会携带 <code>referrer</code> 。也就是说如果我们在 <code>css</code>  样式中引用了有防盗链保护的资源，那么它将不会被 <code>meta</code>  标签设定的 <code>referrer</code>  策略影响。</p><h4 id="单独给某个元素标签的请求设定referrer-policy"><a class="anchor" href="#单独给某个元素标签的请求设定referrer-policy">#</a> 单独给某个元素标签的请求设定 Referrer-Policy</h4><p>在元素上将  <code>rel</code>  属性设置为 <code> noreferrer</code> 。例如：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noreferrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>不过该方法只适用于特定的几个标签，其它的标签不支持 <code>rel</code>  属性。支持 <code>rel</code>  属性的标签有： <code>&lt;a&gt;</code> 、 <code>&lt;area&gt;</code> 、 <code>&lt;link&gt;</code> 。</p><p>还有一些元素标签支持使用 <code>referrerpolicy</code>  属性，为其单独设置 Referrer-Policy 策略。例如：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span> <span class="token attr-name">referrerpolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>origin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>支持 <code>referrerpolicy</code>  属性的标签有： <code>&lt;a&gt;</code> 、 <code>&lt;area&gt;</code> 、 <code>&lt;link&gt;</code> 、 <code>&lt;script&gt;</code> 、 <code>&lt;iframe&gt;</code> 、 <code>&lt;img&gt;</code> 。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://asuhe.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>文件上传原理</title>
    <link href="https://asuhe.fun/asuhe/e71b1b82.html"/>
    <id>https://asuhe.fun/asuhe/e71b1b82.html</id>
    <published>2022-12-15T05:03:14.000Z</published>
    <updated>2023-04-07T13:57:34.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浏览器文件上传原理"><a class="anchor" href="#浏览器文件上传原理">#</a> 浏览器文件上传原理</h1><p>现代网站的前端上传文件的流程主要是利用 <code>input</code>  标签读取到文件，再利用 <code>ajax</code>  将文件的数据发送到后端服务器。</p><p>因为 web 程序的运行环境是在浏览器里，在这个流程中 web 应用无法像直接运行在操作系统里的程序那样直接操作用户计算机上的文件。以前的做法是利用 <code>&lt;input type=&quot;file&quot;&gt;</code>  把文件放到一个表单中提交。而以前提交表单通常需要刷新页面，现代 web 应用发送数据基本都是利用 <code>ajax</code>  异步提交、获取数据。所以以前利用表单提交数据的方法做法就不太合适了。</p><p>为了解决 <code>js</code>  在浏览器环境中运行无法操作用户计算机文件的痛点，浏览器增加了 File API 和 Blob API 以增强 <code>js</code>  访问文件的能力。</p><h2 id="file-api"><a class="anchor" href="#file-api">#</a> File API</h2><p>HTML5 在 DOM 的事件对象上添加了 files 数组，这个集合里保存了一组 File 对象，用来标明用户选中的文件。File 对象中的属性保存着选中文件的相关信息。通过 <code>Event</code>  对象的 <code>target</code>  对象里的 <code>files</code>  属性我们可以访问到 File 对象。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputBox<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> inputBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElemetById</span><span class="token punctuation">(</span><span class="token string">'inputBox'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>inputBox<span class="token punctuation">.</span><span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> selectedFile <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>selectedFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115133040378.png" alt="image-20230115133040378" /></p><p>File 对象部分属性说明</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><strong>name</strong></td><td>文件名称</td></tr><tr><td><strong>size</strong></td><td>以字节为单位计算的文件大小</td></tr><tr><td><strong>type</strong></td><td>文件的 MIME 类型</td></tr><tr><td>lastModified</td><td>文件最后修改时间的时间戳</td></tr><tr><td>lastModifiedDate</td><td>文件最后修改的时间</td></tr></tbody></table><h2 id="filereader类型"><a class="anchor" href="#filereader类型">#</a> FileReader 类型</h2><p>FileReader 通常用于读取文件，它是一种异步读取文件的 API。它类似于 <code>XMLHttpRequest</code> ，只不过它是从本地计算机上读取数据，而不是通过网络读取远程计算机上的数据。</p><p><strong> <code>FileReader</code> </strong> 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File"> <code>File</code> </a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"> <code>Blob</code> </a> 对象指定要读取的文件或数据。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115134232538.png" alt="image-20230115134232538" /></p><p>FileReader 部分属性说明</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>error</td><td>返回读取文件时的错误信息。</td></tr><tr><td>readyState</td><td>表示文件读取的状态。0：reader 已创建；1：读取中；2：读取方法被调用。</td></tr><tr><td><strong>result</strong></td><td>返回读取的文件内容。</td></tr><tr><td><strong>onload</strong></td><td>事件。当文件读取成功时，触发该事件。若 error 事件被触发，则该事件不会被触发。</td></tr><tr><td>onloadstart</td><td>事件。开始读取文件时，触发该事件。</td></tr><tr><td>onprogress</td><td>事件。文件读取时，每过 50ms 触发一次该事件。</td></tr><tr><td><strong>onloadend</strong></td><td>事件。当文件读取完成时，触发该事件，无论文件读取成功与否。</td></tr><tr><td><strong>onerror</strong></td><td>事件。当文件读取失败时，触发该事件。</td></tr><tr><td>onabort</td><td>事件。取消文件读取时触发该事件。</td></tr></tbody></table><p>FileReader 类型提供了几个读取文件数据的方法分别用于不同场景。</p><h3 id="readastext"><a class="anchor" href="#readastext">#</a> readAsText()</h3><p><code>readAsText</code>  方法可以将 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0Jsb2I=">Blob</span> 或者 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0ZpbGU=">File</span> 对象转根据特殊的编码格式转化为内容 (字符串形式)，这个方法是异步的，</p><p><code>readAsText</code>  执行完以后会将 <code>readyState</code>  属性改为 2，表示文件读取完成。</p><p>函数签名</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>instance <span class="token keyword">of</span> FileReader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>blob<span class="token punctuation">[</span><span class="token punctuation">,</span> encoding<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用实例</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>BlobObj<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="readasdataurl"><a class="anchor" href="#readasdataurl">#</a> readAsDataURL()</h3><p><code>readAsDataURL</code>  方法可以将 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0Jsb2I=">Blob</span> 或者 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0ZpbGU=">File</span> 对象转化为 base64 编码的字符串，这个方法也是异步的。</p><p><code>readAsDataURL</code>  执行完以后会将 <code>readyState</code>  属性改为 2，表示文件读取完成。</p><p>函数签名</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>instance <span class="token keyword">of</span> FileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用实例</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>BlobObj<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="readasbinarystring废除"><a class="anchor" href="#readasbinarystring废除">#</a> readAsBinaryString ()（废除）</h3><p><code>readAsBinaryString</code>  方法可以将 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0Jsb2I=">Blob</span> 或者 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0ZpbGU=">File</span> 对象转化为原始文件的二进制格式。</p><p><code>readAsBinaryString</code>  执行完以后会将 <code>readyState</code>  属性改为 2，表示文件读取完成。</p><p>函数签名</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>instance <span class="token keyword">of</span> FileReader<span class="token punctuation">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用实例</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>reader<span class="token punctuation">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>BlobObj<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="readasarraybuffer"><a class="anchor" href="#readasarraybuffer">#</a> readAsArrayBuffer()</h3><p>用于替代 <code>readAsBinaryString</code> 。</p><h3 id="abort"><a class="anchor" href="#abort">#</a> abort()</h3><p>该方法可以取消 FileReader 的读取操作，触发之后 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readyState"> <code>readyState</code> </a> 为已完成（DONE），值为 2。</p><p>函数签名</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>instanceOfFileReader<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用实例</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> reader<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="blob类型"><a class="anchor" href="#blob类型">#</a> Blob 类型</h2><p><code>Blob</code>  对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream"> <code>ReadableStream</code> </a> 来用于数据操作。</p><p>Blob 表示的不一定是 JavaScript 原生格式的数据。<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File"> <code>File</code> </a> 接口基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"> <code>Blob</code> </a>，继承了 blob 的功能并将其扩展以支持用户系统上的文件。</strong></p><h2 id="实现一个简单的图片上传"><a class="anchor" href="#实现一个简单的图片上传">#</a> 实现一个简单的图片上传</h2><ul><li>实现多张图片上传并限制图片大小小于 2MB</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputBox<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/*<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> inputBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"inputBox"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">checkImgSize</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> limitSize <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> file<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> limitSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>inputBox<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">const</span> selectedFiles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> isPass <span class="token operator">=</span> selectedFiles<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>checkImgSize<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isPass<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请确保每张图片的大小都小于2MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// do something</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Charles基础教程</title>
    <link href="https://asuhe.fun/asuhe/7ac30d69.html"/>
    <id>https://asuhe.fun/asuhe/7ac30d69.html</id>
    <published>2022-11-14T13:28:41.000Z</published>
    <updated>2023-04-07T13:57:34.960Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为工作上开发移动端的应用，而移动端并没有像 Chrome 那样好用的调试工具去查看网络请求的信息，所以需要利用抓包来进行网络请求的监控调试。在此介绍一些 Charles 抓包工具的基础使用，以作备份。</p><h2 id="基础抓包"><a class="anchor" href="#基础抓包">#</a> 基础抓包</h2><p>本文以抓 ios 手机上的流量为例。安卓手机的基本步骤也是同理。</p><h3 id="基本流程"><a class="anchor" href="#基本流程">#</a> 基本流程</h3><p>抓包基本流程：</p><ul><li>确保手机与抓包的电脑连接在同一局域网下</li><li>抓包电脑开启 http 代理，并设置好本机的端口号</li><li>手机设计好代理服务器为抓包电脑的 ip 和端口</li></ul><h3 id="图例"><a class="anchor" href="#图例">#</a> 图例</h3><ul><li>设置电脑代理的端口，以 <code>192.168.6.238:8888</code>  为例<ul><li>打开 Charles。</li><li>Proxy -&gt; Proxy Setting。设置端口号</li></ul></li></ul><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/setProxy.png" alt="setProxy" /></p><ul><li>手机设置代理服务器的地址与端口号<ul><li>找到代理服务器 IP 以及端口</li><li>设置代理</li></ul></li></ul><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/lookIp.png" alt="lookIp" /></p><h2 id="https抓包"><a class="anchor" href="#https抓包">#</a> Https 抓包</h2><ul><li><p>根据提示在手机上安装好证书 ssl</p></li><li><p>charles 开启 http 抓包</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115104052948.png" alt="image-20230115104052948" /></p></li></ul><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115104402665.png" alt="image-20230115104402665" /></p><h2 id="mock数据"><a class="anchor" href="#mock数据">#</a> Mock 数据</h2><ul><li>选中要 mock 的接口右键</li><li>映射为本地接口或者远程接口</li></ul><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115104730170.png" alt="image-20230115104730170" /></p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115105028625.png" alt="image-20230115105028625" /></p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115105358136.png" alt="image-20230115105358136" /></p><h2 id="http拦截并修改后再发送数据"><a class="anchor" href="#http拦截并修改后再发送数据">#</a> http 拦截并修改后再发送数据</h2><ul><li>选中要拦截的接口右键</li><li>设置断点</li></ul><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115104852689.png" alt="image-20230115104852689" /></p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/image-20230115104934941.png" alt="image-20230115104934941" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具使用" scheme="https://asuhe.fun/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>设计模式概述</title>
    <link href="https://asuhe.fun/asuhe/bb7571ed.html"/>
    <id>https://asuhe.fun/asuhe/bb7571ed.html</id>
    <published>2022-11-06T14:05:21.000Z</published>
    <updated>2023-04-07T13:57:34.961Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="何为设计模式"><a class="anchor" href="#何为设计模式">#</a> 何为设计模式</h2><p>说起设计模式很多人就以为设计模式就是那 23 种设计模板，设计思路。其实不是的。在我看来设计模式应该把设计与模式拆分开来看待。设计是设计，指用按某种思路、原则或标准去实现功能达到目的。我将其称之为方法。而模式，指实现功能、达到目的的手段，是在设计原则指导下用以具体实操的手段。设计是方法、原则，模式是手段、实现。就如 ECMAScript 和 Javascript 的关系。<strong>23 种设计模式本质上就是在编程语言抽象能力不足的情况下，应对某些场景的最佳实践。</strong></p><h2 id="设计原则"><a class="anchor" href="#设计原则">#</a> 设计原则</h2><p>设计原则有很多，有不同分类。设计原则并不是不可违背的，就像有时候为了性能不得不牺牲代码可读性一样，是否遵循某条设计原则取决于我们对目标收益的衡量。</p><p>现在大多数的设计原则都是基于面向对象的思想提出的。所以其对面向对象有非常强的指导性，但这并不表示只有面向对象才适用这些设计原则。</p><p>既然讲到了设计原则，那么就必须讲讲最流行的 SOLID 设计的原则。SOLID 意思为固体，但是它其实是五个原则缩写而成。</p><h3 id="single-responsibility-principle"><a class="anchor" href="#single-responsibility-principle">#</a> Single Responsibility Principle</h3><p>S：单一职责原则（Single Responsibility Principle）。单一职责原则简称 SRP ，顾名思义，就是一个类只负责一个职责。一个程序或者一个类就只负责做好一件事，把这件事情做到极致。功能过于复杂的就将其拆分开，各个部分保持独立，不依赖外部，以便后面可以组合。这种思路就类似于当今的流水线、各国的全球化分工、前后端分离。</p><h3 id="open-closed-principle"><a class="anchor" href="#open-closed-principle">#</a> Open / Closed Principle</h3><p>O：开放封闭原则（Open / Closed Principle）。开放封闭原则简称 OCP，它的开放指对扩展保持开放，封闭指对修改保持封闭，即可扩展 (extension)，不可修改 (modification)。所谓对扩展开放就是若想要扩展一个类的功能，应该是开放的、容易的。而想要修改原有功能是封闭的、困难的。该规则的 “封闭” 部分规定，一旦模块被开发和测试完成，代码被修改的原因应该只有修复 bug 这一种情况。 “开放” 部分说，您应该能够扩展现有代码（而不是修改之前的代码）以引入新功能。与 SRP 一样，该原理通过限制对现有代码的更改来降低引入新错误的风险。</p><h3 id="liskov-substitution-principle"><a class="anchor" href="#liskov-substitution-principle">#</a> Liskov Substitution Principle</h3><p>L：里氏替换原则（Liskov Substitution Principle）。里氏替换原则简称 LSP，它强调的是一个对象在其出现的任何地方，都要可以用子类的实例做替换，而程序不出错。即子类可以覆盖父类的所有功能。父类能干的，子类要都能干。子类能干父类却不一定能干。这个原则是与面向对象语言的 继承 特性密切相关的。LSP 原则最重要的一点就是：避免子类重写父类中已经实现的方法。这就是 LSP 原则的本质。子类应该避免对父类方法进行重写，如果需要增加个性化，就应该对父类进行扩展，而不是重写，否则也会违背 OCP 原则。</p><h3 id="interface-segregation-principle"><a class="anchor" href="#interface-segregation-principle">#</a> Interface Segregation Principle</h3><p>I：接口隔离原则（Interface Segregation Principle）。ISP 表示接口应该保持单一独立，维持单一职责。这一点和 SRP 类似，但其不同之处是 ISP 强调一个类对另外一个类的依赖性应当是建立在最小的接口上的，达到最小依赖性。这一点是以 SRP 为基础。它还强调客户端不应该依赖它不需要的接口。如果一个类实现一个接口，但这个接口中有它不需要的方法，那么就需要把这个接口拆分，把它需要的方法提取出来，组成一个新的接口让这个类去实现，这就是接口隔离原则。简而言之，就是说，接口中的所有方法对其实现的子类都是有用的。否则，就将接口继续细分。可以把 ISP 理解为 SRP 的强化版。</p><h3 id="dependency-inversion-principle"><a class="anchor" href="#dependency-inversion-principle">#</a> Dependency Inversion Principle</h3><p>D：依赖倒置原则（Dependency Inversion Principle）。DIP 强调高级模块不应该依赖于低级模块，两者都应该依赖于抽象。抽象不应该依赖于细节。细节应该依赖于抽象。什么意思呢？简而言之就是要多用接口、针对接口编程，而不是针对具体实现细节编程。类似于学习中我们要针对概念进行学习、理解，最终的目的是理解抽象的概念。而不是去背诵对概念的文字描述、定义。</p><p><div class="video-container"><iframe src="https://www.youtube.com/embed/R-WnUpl49zg" frameborder="0" loading="lazy" allowfullscreen></iframe></div></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="设计模式" scheme="https://asuhe.fun/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="编程思想" scheme="https://asuhe.fun/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式急速上手</title>
    <link href="https://asuhe.fun/asuhe/5a90a05f.html"/>
    <id>https://asuhe.fun/asuhe/5a90a05f.html</id>
    <published>2022-11-05T16:56:43.000Z</published>
    <updated>2023-04-07T13:57:34.959Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="正则表达式急速上手"><a class="anchor" href="#正则表达式急速上手">#</a> 正则表达式急速上手</h1><p>正则表达式，即 Regular Expressions，缩写为 Regex 或 Regexp，是在正则表达式语法框架内创建的字符串。您可以用正则表达式轻松管理数据，执行查找、匹配或编辑等命令。正则表达式适用于 Python、SQL、JavaScript、R、Google Analytics、Google Data Studio 等编程语言和整个编程过程。</p><h2 id="基本匹配"><a class="anchor" href="#基本匹配">#</a> 基本匹配</h2><p>我们想要查找的字符或单词可以直接输入，就像搜索一样。例如匹配文本中的 curious:</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"I have no special talents. I am only passionately curious."</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">curious</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['curious']</span></pre></td></tr></table></figure><h2 id="基础元字符"><a class="anchor" href="#基础元字符">#</a> 基础元字符</h2><h3 id=""><a class="anchor" href="#">#</a> .</h3><p><code>.</code> ： <code>.</code>  允许匹配任何字符，包括特殊字符和空格。它可以匹配任何一个单个的字符。</p><blockquote><p>在同一个正则表达式里允许使用多个 <code>.</code>  字符，它们既可以连续出现（一个接着一个如： <code>..</code>  将匹配任意两个字符），它也可以间隔着出现在模式的不同位置。</p><p>如果我们需要匹配 <code>.</code>  本身，则需要在。前面加上一个转义字符 <code>\</code></p></blockquote><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"OK. !"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['O','K',' ','!']</span></pre></td></tr></table></figure><h3 id="-2"><a class="anchor" href="#-2">#</a> []</h3><p><code>[]</code> ： <code>[]</code>  表示一个字符集。如果一个词中的字符可以是各种字符，我们就将所有的可选字符写进中括号 <code>[]</code>  中。</p><p>例如，为了查找文本中的所有单词，我们需要编写表达式，在  <code>[]</code>  中相邻地输入字符 a、e、i、o、u。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"bar ber bir bor bur"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">b[aeiou]r</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'bar', 'ber', 'bir', 'bor', 'bur' ]</span></pre></td></tr></table></figure><p>为了查找指定范围的字母，我们需要将起始字母和结束字母写进 <code>[]</code>  中，中间用连字符 <code>-</code>  分隔。它区分大小写。例如编写一个表达式，匹配 e 和 h 之间所有的小写字母，包括它们本身。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[e-h]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'e', 'f', 'g', 'h' ]</span></pre></td></tr></table></figure><p>为了查找指定范围的数字，我们需要在 <code>[]</code>  中输入起始和结束数字，中间用连字符  <code>- </code> 分隔。例如编写一个表达式，匹配 3 到 6 之间的所有数字，包括它们本身。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"0123456789"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[3-6]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ '3', '4', '5', '6' ]</span></pre></td></tr></table></figure><h3 id="-3"><a class="anchor" href="#-3">#</a> ^</h3><p><code>^</code> ： <code>^</code>  表示取反。正常的匹配模式可以理解为白名单， <code>^</code>  就类似于将该字符设为黑名单模式。</p><p>为了查找下方文本的所有单词（ber 和 bor 除外），请在 [] 中的 ^ 后面并排输入 e 和 o。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"bar ber bir bor bur"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">b[^eo]r</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['bar','bir','bur']</span></pre></td></tr></table></figure><h2 id="重复匹配"><a class="anchor" href="#重复匹配">#</a> 重复匹配</h2><h3 id="-4"><a class="anchor" href="#-4">#</a> +</h3><p><code>+</code> ： <code>+</code>  表示一个字符可以出现一次或多次。</p><p>例如，表示 e 在下方文本中出现一次或多次。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"br ber beer"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">be+r</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'ber', 'beer' ]</span></pre></td></tr></table></figure><h3 id="-5"><a class="anchor" href="#-5">#</a> *</h3><p><code>*</code> ： <code>*</code>  表示一个字符完全不匹配或可以匹配多次。</p><p>例如，表示字母 e 在下方文本中不出现，只出现 1 次或者并排出现多次。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"br ber beer"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">be*r</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'br', 'ber', 'beer' ]</span></pre></td></tr></table></figure><h3 id="-6"><a class="anchor" href="#-6">#</a> ?</h3><p><code>?</code> ： <code>?</code>  表示一个字符是可选的。</p><p>例如，表示下方文本中的字母 u 是可选的。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"color, colour"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">colo?r</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'color' ]</span></pre></td></tr></table></figure><h3 id="-7"><a class="anchor" href="#-7">#</a> {}</h3><p><code>&#123;&#125;</code> ： <code>&#123;&#125;</code>  表示一个字符出现的次数，我们在该字符的末尾，将它出现的次数写进大括号 <code>&#123;&#125;</code>  中。</p><p>如 {n}。例如，表示下方文本中的字母 e 只能出现 2 次。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"ber beer beeer beeeer"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">be&#123;2&#125;r</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'beer' ]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 利用 &#123;&#125; 限定字符可以出现次数的范围</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">be&#123;2,4&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'beer', 'beeer', 'beeeer' ]</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 可以利用 &#123;&#125; 限定该字符至少应该出现几次，只需要在区间数字的后一位留空</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">be&#123;3,&#125;r</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [ 'beeer', 'beeeer' ]</span></pre></td></tr></table></figure><h2 id="修饰符"><a class="anchor" href="#修饰符">#</a> 修饰符</h2><h2 id="分组匹配"><a class="anchor" href="#分组匹配">#</a> 分组匹配</h2><h3 id="-8"><a class="anchor" href="#-8">#</a> ()</h3><p><code>()</code> ： <code>()</code>  可以对一个表达式进行分组，并用这些分组来引用或执行一些规则。本质上它是扩大修饰符的作用域，因为通常情况下修饰字符只会作用于它前一个字符中。</p><p>为了给表达式分组，我们需要将文本包裹在 () 中。现在为下方文本中的 haa 构造分组。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"ha-ha,haa-haa"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(haa)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'haa', 'haa' ]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 除此我们还可以通过引用分组的形式来避免重复书写相同的分组</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ha)-\1,(haa)-\2</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'ha-ha,haa-haa' ]</span></pre></td></tr></table></figure><h3 id="-9"><a class="anchor" href="#-9">#</a> (?😃</h3><p><code>(?: )</code> ：  <code>(?: )</code>  表示非捕获分组。它对可以表达式进行分组，并确保它不被引用捕获。</p><p>例如，下面有两个分组，但我们用 \1 引用的第一个组实际上是指向第二个组，因为第一个是未被捕获的分组。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"ha-ha,haa-haa"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ha)-ha,(haa)-\1</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'ha-ha,haa-haa' ]</span></pre></td></tr></table></figure><h3 id="-10"><a class="anchor" href="#-10">#</a> |</h3><p><code>|</code> ： <code>|</code>  竖线允许一个表达式包含多个不同的分支。所有分支用 <code>|</code>  分隔。和在字符层面上运作的字符集 [abc] 不同，分支在表达式层面上运作。</p><p>例如，下面的表达式同时匹配 cat 和 Cat。在末尾添加另一个 |，并输入 rat 以匹配所有单词。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"cat Cat rat"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(C|c)at|rat</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'cat', 'Cat', 'rat' ]</span></pre></td></tr></table></figure><h2 id="位置匹配"><a class="anchor" href="#位置匹配">#</a> 位置匹配</h2><h3 id="b"><a class="anchor" href="#b">#</a> \b</h3><p><code>\b</code> ： <code>\b</code>  表示这个位置的字符是一个能够用于构成单词的字符（字母、数字、下划线，也就是在 <code>\w</code>  范围内的字符）。</p><p>例如，匹配 cat 单词，但是不匹配包含 cat 这三个字符的内容。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"The cat scattered his food all over the room"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bcat\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'cat' ]</span></pre></td></tr></table></figure><h3 id="b-2"><a class="anchor" href="#b-2">#</a> \B</h3><p><code>\B</code> ： <code>\B</code>  表示这个位置的字符是并非为 <code>\w</code>  范围内的字符，和 <code>\b</code>  取反。</p><h3 id="-11"><a class="anchor" href="#-11">#</a> ^</h3><p><code>^</code> ： <code>^</code>  放在行首可以定义字符串的开头。</p><p>例如：我们用 [0-9] 查找数字，若仅查找行首的数字，可以在表达式前面加上 ^。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1. 3 eggs, beaten</pre></td></tr><tr><td data-num="2"></td><td><pre>2. 1 tsp sunflower oil</pre></td></tr><tr><td data-num="3"></td><td><pre>3. 1 tsp butter</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ '1', '2', '3' ]</span></pre></td></tr></table></figure><h3 id="-12"><a class="anchor" href="#-12">#</a> $</h3><p><code>$</code> ： <code>$</code>  用于定义字符串的结尾。</p><p>我们可以在 html 的后面添加  <code>$</code> ，来查找仅在行末出现的 html。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://domain.com/what-is-html.html</pre></td></tr><tr><td data-num="2"></td><td><pre>https://otherdomain.com/html-elements</pre></td></tr><tr><td data-num="3"></td><td><pre>https://website.com/html5-features.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">html$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'html', 'html' ]</span></pre></td></tr></table></figure><p>最后推荐一个练习网站<span class="exturl" data-url="aHR0cHM6Ly9yZWdleGxlYXJuLmNvbS96aC1jbi9sZWFybg=="> RegexLearn</span>。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Web Workers简介</title>
    <link href="https://asuhe.fun/asuhe/b9660a40.html"/>
    <id>https://asuhe.fun/asuhe/b9660a40.html</id>
    <published>2022-09-11T02:48:35.000Z</published>
    <updated>2023-04-07T13:57:34.956Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="web-workers"><a class="anchor" href="#web-workers">#</a> Web Workers</h1><p>因为 Javascript 从设计之初就是单线程的，所以它没有原生支持多线程操作。它没有办法在浏览器 UI 线程之外运行代码。Web Workers API 改变了这种状况，它引入了一个接口，能够使代码运行且不占用浏览器 UI 线程的时间。作为 HTML5 最初的一部分，Web Workers API 已经被分离出去称为独立的规范。</p><p>Web Workers 给 Web 应用带来的潜在的巨大性能提升，因为每个 Worker 都在自己的线程中运行代码。这意味着 Worker 运行代码不仅不会影响浏览器 UI，也不会影响其它 Worker 中运行的代码。</p><h2 id="worker运行环境"><a class="anchor" href="#worker运行环境">#</a> Worker 运行环境</h2><p>由于 Web Workers 没有绑定 UI 线程，这也意味着它们不能访问浏览器的许多资源。Javascript 和 UI 共享同一线程的部分原因是它们之间互相访问频繁，因此这些任务失控回导致糟糕的用户体验。Web Workers 从外部线程中修改 DOM 会导致用户界面出现错误。但是每个 Web Worker 都有自己的全局运行环境，其功能只是 javascript 特性的一个子集。Web Worker 运行环境如下部分组成：</p><ul><li>navigator 对象，只包含四个属性：appName、appVersion、userAgent 和 platform</li><li>location 对象，与 window.location 相同只是所有属性都是只读的</li><li>self 对象，指向全局 worker 对象</li><li>importScript 方法，用来加载 Worker 所用到的外部 Javascript 文件</li><li>所有 ECMAScript 对象，如 Object、Array、Date、Math 等</li><li>XMLHttpRequest 构造器</li><li>setTimeout 和 setInterval 方法</li><li>close 方法，它能够立即停止 Worker 运行</li></ul><p>Web Worker 有着不同的全局运行环境，因此你无法从 Javascript 的代码中创建它。使用它需要一个完全独立的 js 文件，里面包含 Worker 中运行代码。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"test.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这个代码一但执行，将为这个文件创建一个新的线程和一个新的 Worker 运行环境。该文件会被异步下载，直到文件被下载并执行完成后才会启动此 Worker</p><h2 id="与worker通信"><a class="anchor" href="#与worker通信">#</a> 与 Worker 通信</h2><p>Worker 与网页代码通过事件接口通信。网页代码可以使用 <code>postMessage()</code>  方法给 Worker 传递数据，它接受一个参数。此外 Worker 中有用于接收信息的 <code>onmessage</code>  事件处理器。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"test.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello,world</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"Asuhe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>Worker 内通过触发 <code>message</code>  事件来接收数据。Worker 可以通过自己的 <code>postMessage()</code>  方法来把数据传递回页面。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Asuhe</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这种方式是它们之间通信的唯一方式。</p><p>允许传递基本类型的数据和对象。其它类型的数据不允许被传递。</p><h2 id="worker加载外部文件"><a class="anchor" href="#worker加载外部文件">#</a> Worker 加载外部文件</h2><p>Worker 通过 <code>importScript()</code>  方法加载外部 js 文件，该方法可以接受一个或多个 js 文件的 url 作为参数。它的调用过程是阻塞式的，直到所有文件成功加载并执行后才会继续运行后续其它代码。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>V8的GC机制</title>
    <link href="https://asuhe.fun/asuhe/d9ee3f42.html"/>
    <id>https://asuhe.fun/asuhe/d9ee3f42.html</id>
    <published>2022-09-01T02:48:35.000Z</published>
    <updated>2023-04-07T13:57:34.964Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="v8的gc机制"><a class="anchor" href="#v8的gc机制">#</a> V8 的 GC 机制</h1><h2 id="v8对js使用内存的限制"><a class="anchor" href="#v8对js使用内存的限制">#</a> V8 对 JS 使用内存的限制</h2><p>V8 引擎在执行 JS 的过程中限制了 JS 可以使用内存的大小。通常在 32 位系统下，JS 可以使用的内存大小约为 0.7GB 而 64 位系统下约为 1.4GB。当我们一直申请内存，JS 所使用内存超过这个限制时就会报错。造成这个问题的主要原因在于 JavaScript 对象基本上都是通过 V8 自己的方式来进行分配和管理的。</p><p><strong>在 V8 中，所有的 JavaScript 对象都是通过堆来进行分配的。</strong> 当我们在代码中声明变量并赋值时，所使用对象的内存就分配在堆中。至于 V8 为何要限制堆的大小，表层原因为 V8 最初为浏览器而设计，不太可能遇到用大量内存的场景。对于网页来说，V8 的限制值已经绰绰有余。</p><p>深层原因是 V8 的垃圾回收机制的限制。** 按官方的说法，以 1.5 GB 的垃圾回收堆内存为例，V8 做一次小的垃圾回收需要 50 毫秒以上，做一次非增量式的垃圾回收甚至要 1 秒以上。这是垃圾回收中引起 JavaScript 线程暂停执行的时间，在这样的时间花销下，应用的性能和响应能力都会直线下降。 ** 这样的情况不仅仅后端服务无法接受，前端浏览器也无法接受。因此，在当时的考虑下直接限制堆内存大小是一个好的选择。</p><p>当然，这个限制也不是不能打开，V8 依然提供了选项让我们使用更多的内存。Node 在启动时可以传递 <code>--max-old-space-size</code>  或 <code>--max-new-space-size</code>  来调整内存限制的大小，示例如下：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>node --max-old-space-size<span class="token operator">=</span><span class="token number">1700</span> test.js <span class="token comment"># 单位为 MB</span></pre></td></tr><tr><td data-num="2"></td><td><pre>node --max-new-space-size<span class="token operator">=</span><span class="token number">1024</span> test.js <span class="token comment"># 单位为 KB 上述参数在 V8 初始化时生效，一旦生效就不能再动态改变。</span></pre></td></tr></table></figure><p>如果遇到 Node 无法分配足够内存给 JavaScript 对象的情况，可以用这个办法来放宽 V8 默认的内存限制，避免在执行过程中稍微多用了一些内存就轻易崩溃。</p><h2 id="gc策略"><a class="anchor" href="#gc策略">#</a> GC 策略</h2><p>**V8 的垃圾回收策略主要基于分代式垃圾回收机制。** 在自动垃圾回收的演变过程中，人们发现没有一种垃圾回收算法能够胜任所有的场景。因为在实际的应用中，对象的生存周期长短不一，不同的算法只能针对特定情况具有最好的效果。为此，统计学在垃圾回收算法的发展中产生了较大的作用，现代的垃圾回收算法中按对象的存活时间将内存的垃圾回收进行不同的分代，然后分别对不同分代的内存施以更高效的算法。</p><h3 id="分代式垃圾回收"><a class="anchor" href="#分代式垃圾回收">#</a> 分代式垃圾回收</h3><p><strong>在 V8 中 JavaScript 对象被分为新生代和老生代。新生代通常是一些生命周期较短的对象，而老生代则通常是新生代经过一轮 GC 后仍然存活的对象晋升而来。</strong></p><p>前面我们提及的 <code>--max-old-space-size</code>  命令行参数可以用于设置老生代内存空间的最大值， <code>--max-new-space-size</code>  命令行参数则用于设置新生代内存空间的大小的。</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/202211052310591.jpg" alt="V8中GC管理的内存" /></p><h4 id="新生代gc"><a class="anchor" href="#新生代gc">#</a> 新生代 GC</h4><p>在分代的基础上，V8 新生代中的对象主要通过 Scavenge 算法进行垃圾回收。在 Scavenge 的具体实现中，主要采用了 Cheney 算法，该算法由 C. J. Cheney 于 1970 年首次发表在 ACM 论文上。</p><p>Scavange 算法将新生代堆分为两部分，分别叫 from-space 和 to-space，工作方式也很简单，就是将 from-space 中存活的活动对象复制到 to-space 中，并将这些对象的内存有序的排列起来，然后将 from-space 中的非活动对象的内存进行释放，完成之后，将 from space 和 to space 进行互换，这样可以使得新生代中的这两块区域可以重复利用。</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/202211052313142.jpg" alt="新生代内存空间" /></p><p>Scavenge 的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但 Scavenge 由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的表现。它是典型的以空间换时间的算法。</p><p>当一个对象经过多次复制依然存活时，它将会被认为是生命周期较长的对象。这种较长生命周期的对象随后会被移动到老生代中，采用新的算法进行管理。对象从新生代中移动到老生代中的过程称为晋升。</p><p>对象晋升的条件主要有两个，一个是对象是否经历过 Scavenge 回收，一个是 To 空间的内存占用比超过限制（25%）。</p><p>在默认情况下，V8 的对象分配主要集中在 From 空间中。对象从 From 空间复制到 To 空间时，会检查它的内存地址。以判断这个对象是否已经经历了一次 Scavenge 回收。若已经历过了，则将该对象晋升至老生代内存空间。</p><p><img data-src="https://image-bed-for-article.oss-cn-hangzhou.aliyuncs.com/images/uplevel.jpg" alt="uplevel" /></p><p>设置 25% 这个限制值的原因是当这次 Scavenge 回收完成后，这个 To 空间将变成 From 空间，接下来的内存分配将在这个空间中进行。如果占比过高，会影响后续的内存分配。</p><p>对象晋升后，将会在老生代的内存空间中存活，由老生代的 GC 算法进行处理。</p><p>由于 Scavenge 是典型的牺牲空间换取时间的算法，所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge 非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。</p><h4 id="老生代gc"><a class="anchor" href="#老生代gc">#</a> 老生代 GC</h4><p>对象晋升后，将会在老生代空间中作为存活周期较长的对象来对待，接受新的回收算法处理。对于老生代中的对象，由于存活对象占较大比重，再采用 Scavenge 的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。这两个问题导致应对生命周期较长的对象时 Scavenge 会显得捉襟见肘。为此，<strong>V8 在老生代中主要采用了 Mark-Sweep 和 Mark-Compact 相结合的方式进行垃圾回收。</strong></p><h5 id="mark-sweep"><a class="anchor" href="#mark-sweep">#</a> Mark-Sweep</h5><p>Mark-Sweep 是标记清除的意思，它分为标记和清除两个阶段。与 Scavenge 复制活着的对象不同，Mark-Sweep 在标记阶段遍历堆中的所有对象，并标记活着的对象，在随后的清除阶段中，只清除没有被标记的对象。可以看出，Scavenge 中只复制活着的对象，而 Mark-Sweep 只清理死亡对象。活对象在新生代中只占较小部分，死对象在老生代中只占较小部分，这是两种回收方式能高效处理的原因。</p><p>Mark-Sweep 算法最大的问题就是在进行一次标记清理回收后，会产生内存碎片，内存空间会出现不连续的状态。这种内存碎片会对后续内存分配造成影响。例如要分配一个 100MB 大小的对象，此时总体空闲的内存空间大小为 150MB 但是并没有一个连续的 100MB 大小的内存空间，这就会导致内存分配失败。这种情况会导致提前触发 GC 是程序停顿，而此次的 GC 是不必要的。为了解决 Mark-Sweep 的问题，所以 Mark-Compact 被提出。</p><h5 id="mark-compact"><a class="anchor" href="#mark-compact">#</a> Mark-Compact</h5><p>Mark-Compact 是标记整理的意思，是在 Mark-Sweep 的基础上演变而来的。它们的差别在于对象在标记为死亡后，在整理的过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。这样就可以减少内存碎片。总体上的思路就是将小碎片移动、合并成一个大块的内存空间。</p><p>这里将 Mark-Sweep 和 Mark-Compact 结合着介绍不仅仅是因为两种策略是递进关系，在 V8 的回收策略中两者是结合使用的。</p><h4 id="gc停顿处理"><a class="anchor" href="#gc停顿处理">#</a> GC 停顿处理</h4><p>为了避免出现 JavaScript 应用逻辑与垃圾回收器看到的不一致的情况，垃圾回收的 3 种基本算法都需要将应用逻辑暂停下来，待执行完垃圾回收后再恢复执行应用逻辑，这种行为被称为 “全停顿”（stop-the-world）。</p><p>在 V8 的分代式垃圾回收中，一次小垃圾回收只收集新生代，由于新生代默认配置得较小，且其中存活对象通常较少，所以即便它是全停顿的影响也不大。但 V8 的老生代通常配置得较大，且存活对象较多，全堆垃圾回收（full 垃圾回收）的标记、清理、整理等动作造成的停顿就会比较可怕，需要设法改善。</p><p>为了降低全堆垃圾回收带来的停顿时间，V8 先从标记阶段入手，将原本要一口气停顿完成的动作改为增量标记（incremental marking），也就是拆分为许多小 “步进”，每做完一 “步进” 就让 JavaScript 应用逻辑执行一小会儿，垃圾回收与应用逻辑交替执行直到标记阶段完成。</p><p>V8 后续还引入了延迟清理（lazy sweeping）与增量式整理（incremental compaction），让清理与整理动作也变成增量式的。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript基础</title>
    <link href="https://asuhe.fun/asuhe/b18b9acc.html"/>
    <id>https://asuhe.fun/asuhe/b18b9acc.html</id>
    <published>2022-07-24T02:36:46.000Z</published>
    <updated>2023-04-07T13:57:34.973Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="javascript基础"><a class="anchor" href="#javascript基础">#</a> Javascript 基础</h1><h2 id="数据类型"><a class="anchor" href="#数据类型">#</a> 数据类型</h2><p>在 <code>javascript</code>  中数据值的类型可以分为两大类，分别是基本类型和引用类型。基本类型都存储在栈内存上，而引用类型通常都存储在堆内存上。</p><h3 id="基本类型"><a class="anchor" href="#基本类型">#</a> 基本类型</h3><p>基本数据类型有七大类：</p><ul><li><p>Number：number 类型包括了整数类型和浮点数类型，所有的数字类型都可以用 number 表示</p></li><li><p>Boolean：boolean 类型就只有两个值，true 和 false。通常用于条件判断</p></li><li><p>String：string 类型表示字符串</p></li><li><p>Null：null 类型一般用于给一个准备设置为引用类型的数据赋初始值，如 <code>var a = null</code> ，表示变量 <code>a</code>  在后面可能会被赋予一个引用类型的值</p></li><li><p>Undefined：undefined 类型用于给变量当默认值，如 <code>var a;console.log(a)</code> ，此时会输出 <code>undefined</code> ，我们没有在声明变量后给一个初始值时 js 引擎会给它默认添加 <code>undefined</code>  作为默认值</p><blockquote><p>undefined 在 JavaScript 中不是一个保留字，它作为一个属性挂载在 Windows 对象上，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p></blockquote></li><li><p>Symbol：symbol 类型被设计之初是用于解决命名冲突问题，用它作为标识符永远不会与其他变量冲突。如 <code>console.log(Symbol(1)===Symbol(1))</code> ，输出 false。即便传入的变量都为 1，获取的结果也是不同的</p></li><li><p>BigInt：BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</p></li></ul><p>基本数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储</p><h3 id="引用类型"><a class="anchor" href="#引用类型">#</a> 引用类型</h3><p>除了基本类型以外的类型都是引用类型，如 Array、Object、Function。</p><p>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</p><h2 id="类型判断"><a class="anchor" href="#类型判断">#</a> 类型判断</h2><h3 id="typeof"><a class="anchor" href="#typeof">#</a> typeof</h3><p><code>typeof</code>  一般用于判断基本数据类型，但是它在判断 <code>null</code>  时会被判断为 object</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// number</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// boolean</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// string</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// object    </span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// function</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// object</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// object</span></pre></td></tr></table></figure><h3 id="instanceof"><a class="anchor" href="#instanceof">#</a> instanceof</h3><p><code>instanceof</code>  一般用于判断引用数据类型，它的运行原理是判断其在原型链中是否能够找到该类型的原型</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false </span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false </span></pre></td></tr><tr><td data-num="4"></td><td><pre> </pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// true</span></pre></td></tr></table></figure><p><code>instanceof</code>  简单实现</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> left <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">let</span> leftProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> rightProto <span class="token operator">=</span> right<span class="token operator">?.</span>prototype</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>leftProto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>leftProto <span class="token operator">===</span> rightProto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      leftProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>leftProto<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="constructor"><a class="anchor" href="#constructor">#</a> constructor</h3><p><code>constructor</code>  有两个作用，一是判断数据的类型，二是对象实例通过  <code>constructor</code>  对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型， <code>constructor</code>  就不能用来判断数据类型了</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="objectprototypetostringcall"><a class="anchor" href="#objectprototypetostringcall">#</a> Object.prototype.toString.call()</h3><p><code>Object.prototype.toString.call()</code>  使用 Object 对象的原型方法 toString 来判断数据类型</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> </pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>同样是检测对象 obj 调用 toString 方法，obj.toString () 的结果和 Object.prototype.toString.call (obj) 的结果不一样，这是为什么？</p><p>这是因为 toString 是 Object 的原型方法，而 Array、function 等<strong>类型作为 Object 的实例，都重写了 toString 方法</strong>。不同的对象类型调用 toString 方法时，根据原型链的知识，调用的是对应的重写之后的 toString 方法（function 类型返回内容为函数体的字符串，Array 类型返回元素组成的字符串…），而不会去调用 Object 上原型 toString 方法（返回对象的具体类型），所以采用 obj.toString () 不能得到其对象类型，只能将 obj 转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用 Object 原型上的 toString 方法。</p><h3 id="判断数组"><a class="anchor" href="#判断数组">#</a> 判断数组</h3><ul><li>通过 Object.prototype.toString.call () 做判断</li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Array'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>通过原型链做判断</li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>通过 ES6 的 Array.isArray () 做判断</li></ul><pre><code>Array.isArray(obj);</code></pre><ul><li>通过 instanceof 做判断</li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span></pre></td></tr></table></figure><ul><li>通过 Array.prototype.isPrototypeOf</li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="类型转换"><a class="anchor" href="#类型转换">#</a> 类型转换</h2><h3 id="和"><a class="anchor" href="#和">#</a> == 和 ===</h3><p>对于  <code>==</code>  来说，如果对比双方的类型<strong>不一样</strong>，就会进行<strong>类型转换</strong>。假如对比  <code>x</code>  和  <code>y</code>  是否相同，就会进行如下判断流程：</p><ol><li>首先会判断两者类型是否 ** 相同，** 相同的话就比较两者的大小；</li><li>类型不相同的话，就会进行类型转换；</li><li>会先判断是否在对比  <code>null</code>  和  <code>undefined</code> ，是的话就会返回  <code>true</code></li><li>判断两者类型是否为  <code>string</code>  和  <code>number</code> ，是的话就会将字符串转换为  <code>number</code></li></ol><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">'1'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>      ↓</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">1</span> <span class="token operator">==</span>  <span class="token number">1</span></pre></td></tr></table></figure><ol start="6"><li>判断其中一方是否为  <code>boolean</code> ，是的话就会把  <code>boolean</code>  转为  <code>number</code>  再进行判断</li></ol><pre><code>'1' == true        ↓'1' ==  1        ↓ 1  ==  1</code></pre><ol start="7"><li>判断其中一方是否为  <code>object</code>  且另一方为  <code>string</code> 、 <code>number</code>  或者  <code>symbol</code> ，是的话就会把  <code>object</code>  转为原始类型再进行判断</li></ol><pre><code>'1' == &#123; name: 'js' &#125;        ↓'1' == '[object Object]'</code></pre><p>其流程图如下：</p><p><img data-src="https://cdn.nlark.com/yuque/0/2021/png/1500604/1615475217180-eabe8060-a66a-425d-ad4c-37c3ca638a68.png" alt="image" /></p><h3 id="其他类型到数值类型的转换规则"><a class="anchor" href="#其他类型到数值类型的转换规则">#</a> 其他类型到数值类型的转换规则</h3><ul><li>Undefined 类型的值转换为 NaN。</li><li>Null 类型的值转换为 0。</li><li>Boolean 类型的值，true 转换为 1，false 转换为 0。</li><li>String 类型的值转换如同使用 Number () 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</li><li>Symbol 类型的值不能转换为数字，会报错。</li><li>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</li></ul><p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有 valueOf () 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString () 的返回值（如果存在）来进行强制类型转换。</p><p>如果 valueOf () 和 toString () 均不返回基本类型值，会产生 TypeError 错误。</p><h3 id="其他类型到布尔类型的转换规则"><a class="anchor" href="#其他类型到布尔类型的转换规则">#</a> 其他类型到布尔类型的转换规则</h3><p>以下这些是假值：</p><ul><li>undefined</li><li>null</li><li>false</li><li>+0、-0 和 NaN</li><li>&quot;&quot;</li></ul><p>假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。</p><h2 id="变量类型"><a class="anchor" href="#变量类型">#</a> 变量类型</h2><h3 id="var"><a class="anchor" href="#var">#</a> var</h3><p>在全局作用域下声明的 <code>var</code>  变量会有变量提升，同时它会被挂载到 <code>window</code>  对象上作为一个属性</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>asuhe<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> asuhe <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></pre></td></tr></table></figure><p>![image-20220708145618892](/Users/admin/Library/Application Support/typora-user-images/image-20220708145618892.png)</p><h3 id="let"><a class="anchor" href="#let">#</a> let</h3><p><code>let</code>  声明的变量其作用域会绑定在最近的 <code>&#123;&#125;</code>  花括号里面，而且不存在变量提升。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 作用域绑定</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span> <span class="token comment">// inner 10</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"outer"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span> <span class="token comment">// ReferenceError</span></pre></td></tr></table></figure><p>同时对于函数作用域内的同名变量会有 <code>暂时性死区</code> 的效果， <code>暂时性死区</code> 和没有变量提升配合起来会屏蔽变量作用域的查找</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// ReferenceError</span></pre></td></tr></table></figure><h3 id="const"><a class="anchor" href="#const">#</a> const</h3><p><code>const</code>  变量基本特点和 <code>let</code>  一致，但是 <code>const</code>  所指向的那个值不允许被修改，因此 <code>const</code>  在声明之初一定要赋予一个初始值</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> a <span class="token comment">// SyntaxError</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="4"></td><td><pre>b <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// TypeError</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> n<span class="token operator">:</span><span class="token number">30</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>c<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">40</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token comment">// 40</span></pre></td></tr></table></figure><h2 id="函数"><a class="anchor" href="#函数">#</a> 函数</h2><h3 id="函数声明"><a class="anchor" href="#函数声明">#</a> 函数声明</h3><p>函数声明有函数提升的效果，而函数声明表达式则没有</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 因为函数提升，所以函数可以在声明前被调用</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3 </span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="函数声明表达式"><a class="anchor" href="#函数声明表达式">#</a> 函数声明表达式</h3><p>函数声明表达式没有函数提升效果，所以必须在赋值完成后才能调用</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 无函数提升</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// TypeError 此时 foo 为 undefined</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr></table></figure><h3 id="this指向"><a class="anchor" href="#this指向">#</a> this 指向</h3><p>在使用 <code>function</code>  关键字声明的函数中， <code>this</code>  指向的是其调用者</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>f<span class="token operator">:</span>foo<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  a<span class="token operator">:</span><span class="token number">20</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 20</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 10</span></pre></td></tr></table></figure><p>匿名函数没有自己的 <code>this</code> ，匿名函数中的 <code>this</code>  是匿名函数定义时的上层作用域的 <code>this</code></p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function-variable function">f</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  a<span class="token operator">:</span><span class="token number">10</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span></pre></td></tr><tr><td data-num="6"></td><td><pre>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 20</span></pre></td></tr></table></figure><h3 id="匿名函数"><a class="anchor" href="#匿名函数">#</a> 匿名函数</h3><ol><li><p>匿名函数只有一个形参时，可以省略（），且在函数体只有一句时可以省略 {} 并将该语句结果返回</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span> n<span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr></table></figure></li><li><p>匿名函数没有自己的 <code>this</code> ，因此也不能使用 <code>call</code> 、 <code>apply</code> 、 <code>bind</code>  等方法来改变 <code>this</code>  指向</p></li><li><p>由于箭头函数时没有自己的 this 的，且 this 指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> <span class="token function-variable function">Student</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// TypeError</span></pre></td></tr></table></figure></li><li><p>箭头函数没有自己的 arguments 对象。在箭头函数中访问 arguments 实际上获得的是它外层函数的 arguments 值</p></li><li><p>箭头函数没有 prototype</p></li><li><p>箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</p></li></ol><h2 id="作用域-作用域链"><a class="anchor" href="#作用域-作用域链">#</a> 作用域 &amp;&amp; 作用域链</h2><p>在 ES6 以前 javascript 并没有像其他语言一样拥有 <code>块级作用域</code> 的概念，仅有函数作用域和全局作用域这两种作用域。例如：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 20</span></pre></td></tr></table></figure><p>而在 ES6 新增了 <code>let</code> 、 <code>const</code>  关键字后，由这两种关键字声明的变量其作用域会绑定在其最近的 <code>&#123;&#125;</code>  内。例如：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// ReferenceError</span></pre></td></tr></table></figure><p>在 JavaScript 里面，函数、块、模块都可以形成作用域（一个存放变量的独立空间），他们之间可以相互嵌套，作用域之间会形成引用关系，这条链叫做作用域链。</p><p>当我们去查找一个变量 a 时，若这个变量 a 不在本级作用域中那么它会继续往它的上级作用域中去寻找该变量的声明。若最后找不到就报错。</p><h3 id="闭包"><a class="anchor" href="#闭包">#</a> 闭包</h3><p><strong>闭包就是在一个变量对象里持有另一个变量对象里内容的引用</strong>，这时就会产生闭包。常见的表现形式就是，内部函数持有外部函数的变量，我们可以通过返回内部函数去让更外层的作用域能够访问到内部函数的父函数里的变量。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="常用对象对象方法"><a class="anchor" href="#常用对象对象方法">#</a> 常用对象 &amp;&amp; 对象方法</h2><h3 id="array对象"><a class="anchor" href="#array对象">#</a> Array 对象</h3><h4 id="静态方法"><a class="anchor" href="#静态方法">#</a> 静态方法</h4><h5 id="arrayfrom"><a class="anchor" href="#arrayfrom">#</a> Array.from</h5><p><code>Array.from()</code>  从一个可迭代对象或类数组对象中，创建一个新的数组实例。<strong>它实现的是浅拷贝。</strong></p><p>参数：</p><p>arrayLike：一个可迭代对象或类数组对象</p><p>mapFn（可选）：遍历函数</p><p>thisArg（可选）：执行遍历函数时的 this 指针</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"asuhe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ["a", "s", "u", "h", "e"]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [2,4,5,6]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 传入遍历函数</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [3,5,6,7]</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 传入 this 参数</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span><span class="token number">666</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Map<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 666 666 666 [3,4,5]</span></pre></td></tr></table></figure><h5 id="arrayisarray"><a class="anchor" href="#arrayisarray">#</a> Array.isArray</h5><p>判断一个变量是否为数组</p><p>参数：</p><p>value：需要判断的变量</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">666</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token string">"asuhe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h5 id="arrayof"><a class="anchor" href="#arrayof">#</a> Array.of</h5><p>根据传入的参数创建一个数组，浅拷贝</p><p>参数：</p><p>elementN：传入的参数可以为可变数量，传多少个就创建多长的数组</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">666</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> test <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'asuhe'</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token comment">// [1, 2, "asuhe", Object &#123; a: 666 &#125;]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">777</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token comment">// [1, 2, "asuhe", Object &#123; a: 777 &#125;]</span></pre></td></tr></table></figure><h4 id="实例方法"><a class="anchor" href="#实例方法">#</a> 实例方法</h4><h5 id="concat"><a class="anchor" href="#concat">#</a> concat</h5><p>合并多个参数，返回一个新数组。浅拷贝</p><p>参数：</p><p>valueN：参数可以为数组，也可以为普通参数。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> array3 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array3<span class="token punctuation">)</span> <span class="token comment">// ["a", "b", "c", "d", "e", "f",666]</span></pre></td></tr></table></figure><h5 id="filter"><a class="anchor" href="#filter">#</a> filter</h5><p>过滤出回调函数返回值为 true 的元素，返回一个符合条件的新数组。</p><p>参数：</p><p>callbackFn：遍历的回调</p><p>thisArg（可选）：回调执行时的 this</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> element<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 5, 7]</span></pre></td></tr></table></figure><h5 id="every"><a class="anchor" href="#every">#</a> every</h5><p>当所有的元素都通过了回调函数的条件时，返回一个 true 的布尔值，否则返回 false。</p><p>参数：</p><p>callbackFn：遍历的回调</p><p>thisArg（可选）：回调执行时的 this</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> e<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h4 id="some"><a class="anchor" href="#some">#</a> some</h4><p>当数组中有一个元素通过了回调函数的条件时，返回一个 true 的布尔值，否则返回 false。</p><p>参数：</p><p>callbackFn：遍历的回调</p><p>thisArg（可选）：回调执行时的 this</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> e<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h5 id="reduce"><a class="anchor" href="#reduce">#</a> reduce</h5><p>根据遍历函数的返回值，一直传递给下次遍历函数。一般用于计算总和</p><p>参数：</p><p>callbackFn：遍历的回调</p><p>initialValue（可选）：回调执行时的 this</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> initialValue <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preValue<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span> <span class="token operator">=></span> preValue<span class="token operator">+</span>e<span class="token punctuation">,</span>initialValue <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 15</span></pre></td></tr></table></figure><h3 id="object对象"><a class="anchor" href="#object对象">#</a> Object 对象</h3><h4 id="静态方法-2"><a class="anchor" href="#静态方法-2">#</a> 静态方法</h4><h5 id="objectkeys"><a class="anchor" href="#objectkeys">#</a> Object.keys</h5><p>返回一个数组，数组内容为对象中所有的可枚举属性的 key 值</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  b<span class="token operator">:</span><span class="token string">"asuhe"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  hhh<span class="token operator">:</span><span class="token number">666</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token operator">:</span><span class="token string">"sphinx"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ["a", "b", "hhh"]</span></pre></td></tr></table></figure><h5 id="objectgetprototypeof"><a class="anchor" href="#objectgetprototypeof">#</a> Object.getPrototypeOf</h5><p>获取一个对象的隐式原型</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span><span class="token string">"asuhe"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span><span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> objProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProto <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h5 id="objectcreate"><a class="anchor" href="#objectcreate">#</a> Object.create</h5><p>使用传入的对象作为 <code>prototype</code> ，创建一个新的对象</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>name<span class="token operator">:</span><span class="token string">"asuhe"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span><span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h5 id="objectassign"><a class="anchor" href="#objectassign">#</a> Object.assign</h5><p>从源对象中，合并源对象的可枚举属性进目标对象，并返回修改后的对象</p><p>参数：</p><p>target：需要修改的目标对象</p><p>source：提供可枚举属性来源的源对象</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span><span class="token string">"asuhe"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span><span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  gender<span class="token operator">:</span><span class="token string">"male"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// &#123; name: "asuhe", age: 16, gender: "male" &#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h2 id="逻辑中断"><a class="anchor" href="#逻辑中断">#</a> 逻辑中断</h2><h3 id=""><a class="anchor" href="#">#</a> &amp;&amp;</h3><p><code>&amp;&amp;</code>  逻辑与，当前一个条件判断为真时，才会继续执行后一个条件，并返回表达式的值</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 7</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></pre></td></tr></table></figure><h3 id="-2"><a class="anchor" href="#-2">#</a> ||</h3><p><code>||</code>  逻辑或，当前一个条件判断为假时，才会继续执行后一个条件，并返回表达式的值</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 5</span></pre></td></tr></table></figure><h3 id="-3"><a class="anchor" href="#-3">#</a> ？ ：</h3><p><code>? :</code>  三目运算符，当条件值为 true 时，返回第一个表达式的值，否则返回第二个表达式的值</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">4</span> <span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 7</span></pre></td></tr></table></figure><h2 id="原型链"><a class="anchor" href="#原型链">#</a> 原型链</h2><ul><li>所有对象都有一个隐式原型 <code>__proto__</code></li><li>所有函数对象都有一个原型 <code>prototype</code></li><li>以某函数为构造函数， <code>new</code>  出实例的隐式原型 <code>__proto__</code> 都会指向该函数的原型 <code>prototype</code></li><li>所有函数对象都是 <code>Function</code>  的实例，包括 <code>Function</code>  自身</li><li>所有函数对象的 <code>prototype</code>  都是 <code>Object</code>  的实例</li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> a<span class="token operator">+</span>b</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/07/12/snmKAgt8XkfTbSM.png" alt="终极原型链" /></p><h2 id="异步编程"><a class="anchor" href="#异步编程">#</a> 异步编程</h2><h3 id="event-loop"><a class="anchor" href="#event-loop">#</a> event-loop</h3><p>事件循环模型示意图</p><p><img data-src="https://s2.loli.net/2022/07/12/yUMJtAuW38Fv7x9.png" alt="事件循环模型" /></p><h3 id="promise"><a class="anchor" href="#promise">#</a> Promise</h3><h3 id="task-microtask"><a class="anchor" href="#task-microtask">#</a> Task &amp;&amp; Microtask</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxfRE9NX0FQSS9NaWNyb3Rhc2tfZ3VpZGU=">Microtask</span></p><p>MDN 中 Task（宏任务）的描述：</p><blockquote><p>A <strong>task</strong> is any JavaScript code which is scheduled to be run by the standard mechanisms such as initially starting to run a program, an event callback being run, or an interval or timeout being fired. These all get scheduled on the <strong>task queue</strong>.</p></blockquote><p>MDN 中 Microtask（微任务）的描述：</p><blockquote><p>At first the difference between microtasks and tasks seems minor. And they are similar; both are made up of JavaScript code which gets placed on a queue and run at an appropriate time. However, whereas the event loop runs only the tasks present on the queue when the iteration began, one after another, it handles the microtask queue very differently.</p></blockquote><p>两者不同之处的 MDN 描述：</p><blockquote><p>There are two key differences.</p><p>First, each time a task exits, the event loop checks to see if the task is returning control to other JavaScript code. If not, it runs all of the microtasks in the microtask queue. The microtask queue is, then, processed multiple times per iteration of the event loop, including after handling events and other callbacks.</p><p>Second, if a microtask adds more microtasks to the queue by calling <a href="https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask"> <code>queueMicrotask()</code> </a>, those newly-added microtasks <em>execute before the next task is run</em>. That's because the event loop will keep calling microtasks until there are none left in the queue, even if more keep getting added.</p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://asuhe.fun/categories/JavaScript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="https://asuhe.fun/asuhe/599b70c0.html"/>
    <id>https://asuhe.fun/asuhe/599b70c0.html</id>
    <published>2022-07-24T02:35:55.000Z</published>
    <updated>2023-04-07T13:57:34.970Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css基础"><a class="anchor" href="#css基础">#</a> CSS 基础</h1><h2 id="布局单位"><a class="anchor" href="#布局单位">#</a> 布局单位</h2><p>常用的布局单位包括像素（ <code>px</code> ），百分比（ <code>%</code> ）， <code>em</code> ， <code>rem</code> ， <code>vw/vh</code> 。</p><p><strong>（1）像素</strong>（ <code>px</code> ）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS 像素和物理像素：</p><ul><li><strong>CSS 像素</strong>：为 web 开发者提供，在 CSS 中使用的一个抽象单位；</li><li><strong>物理像素</strong>：只与设备的硬件密度有关，任何设备的物理像素都是固定的。</li></ul><p><strong>（2）百分比</strong>（ <code>%</code> ），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。</p><p><strong>（3）em 和 rem</strong> 相对于 px 更具灵活性，它们都是相对长度单位，它们之间的区别：<strong>em 相对于父元素，rem 相对于根元素。</strong></p><ul><li><strong>em：</strong> 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸 (默认 16px)。(相对父元素的字体大小倍数)。</li><li><strong>rem：</strong> rem 是 CSS3 新增的一个相对单位，相对于根元素（html 元素）的 font-size 的倍数。<strong>作用</strong>：利用 rem 可以实现简单的响应式布局，可以利用 html 元素中字体的大小与屏幕间的比值来设置 font-size 的值，以此实现当屏幕分辨率变化时让元素也随之变化。</li></ul><p><strong>（4）vw/vh</strong> 是与视图窗口有关的单位，vw 表示相对于视图窗口的宽度，vh 表示相对于视图窗口高度，除了 vw 和 vh 外，还有 vmin 和 vmax 两个相关的单位。</p><ul><li>vw：相对于视窗的宽度，视窗宽度是 100vw；</li><li>vh：相对于视窗的高度，视窗高度是 100vh；</li><li>vmin：vw 和 vh 中的较小值；</li><li>vmax：vw 和 vh 中的较大值；</li></ul><p><strong>vw/vh</strong> 和百分比很类似，两者的区别：</p><ul><li>百分比（ <code>%</code> ）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate 等)</li><li>vw/vm：相对于视窗的尺寸</li></ul><h2 id="盒模型"><a class="anchor" href="#盒模型">#</a> 盒模型</h2><p>判断一个元素的大小时有两种盒模型，一种是 IE 盒模型，另一种是标准盒模型。盒子的大小由 <code>margin</code> 、 <code>border</code> 、 <code>padding</code> 、 <code>content</code>  四部分组成。</p><p>在 IE 盒模型中如果我们给一个元素设置了 <code>height</code>  和 <code>width</code>  时，这些值会包括 <code>content</code> 、 <code>padding</code> 、 <code>border</code> 。如：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.box</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">backgroundcolor</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603600820555-dc6ed390-d47e-412b-942a-857bbe5f280d.png?x-oss-process=image%2Fresize%2Cw_746#align=left&amp;display=inline&amp;height=368&amp;margin=%5Bobject%20Object%5D&amp;originHeight=462&amp;originWidth=791&amp;size=0&amp;status=done&amp;style=none&amp;width=630" alt="img" /></p><p>在标准盒模型中，如果我们给一个元素设置了宽高属性，这些值的只会包括 <code>content</code> 。</p><p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603600820746-e10daafa-451a-454e-9705-f8c358769d5b.png#align=left&amp;display=inline&amp;height=366&amp;margin=%5Bobject%20Object%5D&amp;originHeight=455&amp;originWidth=746&amp;size=0&amp;status=done&amp;style=none&amp;width=600" alt="image" /></p><ul><li>标准盒模型的 width 和 height 属性的范围只包含了 content，</li><li>IE 盒模型的 width 和 height 属性的范围包含了 border、padding 和 content。</li></ul><p>可以通过修改元素的 box-sizing 属性来改变元素的盒模型：</p><ul><li><code>box-sizing: content-box</code>  表示标准盒模型（默认值）</li><li><code>box-sizing: border-box</code>  表示 IE 盒模型（怪异盒模型）</li></ul><p>在书写 html 进行页面布局的过程中，我们经常使用 <code>float</code> 、 <code>postion</code>  属性进行布局。float 只能在块级元素中使用，若在内联元素里使用时会失效。使用 float 时，对应的标签会脱离标准文档流，一个盒子</p><h2 id="选择器"><a class="anchor" href="#选择器">#</a> 选择器</h2><table><thead><tr><th><strong>选择器</strong></th><th><strong>格式</strong></th><th><strong>优先级权重</strong></th></tr></thead><tbody><tr><td>id 选择器</td><td>#id</td><td>100</td></tr><tr><td>类选择器</td><td>.classname</td><td>10</td></tr><tr><td>属性选择器</td><td>a[ref=“eee”]</td><td>10</td></tr><tr><td>伪类选择器</td><td>li:last-child</td><td>10</td></tr><tr><td>标签选择器</td><td>div</td><td>1</td></tr><tr><td>伪元素选择器</td><td>li::after</td><td>1</td></tr><tr><td>相邻兄弟选择器</td><td>h1+p</td><td>0</td></tr><tr><td>子选择器</td><td>ul&gt;li</td><td>0</td></tr><tr><td>后代选择器</td><td>li a</td><td>0</td></tr><tr><td>通配符选择器</td><td>*</td><td>0</td></tr></tbody></table><p>对于选择器的<strong>优先级</strong>：</p><ul><li>标签选择器、伪元素选择器：1</li><li>类选择器、伪类选择器、属性选择器：10</li><li>id 选择器：100</li><li>内联样式：1000</li></ul><p><strong>注意事项：</strong></p><ul><li><code>!important</code>  声明的样式的优先级最高；</li><li>如果优先级相同，则最后出现的样式生效；</li><li><strong>继承得到的样式的优先级最低</strong>；</li><li>通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；</li><li><strong>样式表的来源不同时，优先级顺序为：内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式。</strong></li></ul><h2 id="文本溢出处理"><a class="anchor" href="#文本溢出处理">#</a> 文本溢出处理</h2><ul><li>单行文本溢出</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            // 溢出隐藏</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>      // 溢出用省略号显示</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>         // 规定段落中的文本不进行换行</pre></td></tr></table></figure><ul><li>多行文本溢出</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            // 溢出隐藏</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>     // 溢出用省略号显示</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>         // 作为弹性伸缩盒子模型显示。</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span> // 设置伸缩盒子的子元素排列方式：从上到下垂直排列</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span>        // 显示的行数</pre></td></tr></table></figure><p>注意：由于上面的三个属性都是 CSS3 的属性，不是所有浏览器都可以兼容，所以要在前面加一个 <code>-webkit-</code>  来兼容一部分浏览器。</p><h2 id="定位布局"><a class="anchor" href="#定位布局">#</a> 定位 &amp; 布局</h2><h3 id="浮动"><a class="anchor" href="#浮动">#</a> 浮动</h3><p><strong>浮动的定义：</strong> 非 IE 浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。</p><p><strong>浮动的特点:</strong></p><ul><li><p>脱离标准文档流</p><blockquote><p>脱离文档流的特点：</p><ul><li>块元素：<ul><li>块元素不再独占一行</li><li>盒模型的宽高都默认由内容撑开</li></ul></li><li>行内元素：<ul><li>行内元素浮动后特点变成块元素，可以设置宽高</li></ul></li></ul></blockquote></li><li><p>当水平空间不够时，浮动元素会自动挤向下一行</p></li><li><p>浮动元素的高度不会超过其兄弟浮动浮动元素的高度</p></li><li><p>浮动不会遮盖文字，文字会环绕在浮动元素旁边</p></li><li><p>浮动元素不会脱离父元素</p></li><li><p>若浮动元素上一个元素未设置浮动，则浮动元素无法上移</p></li></ul><p><strong>浮动的工作原理：</strong></p><ul><li>浮动元素脱离文档流，不占据空间（引起 “高度塌陷” 现象）</li><li>浮动元素碰到包含它的边框或者其他浮动元素的边框停留</li></ul><p>浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现 “高度塌陷”。</p><p><strong>浮动元素引起的问题？</strong></p><ul><li>父元素的高度无法被撑开，影响与父元素同级的元素</li><li>与浮动元素同级的非浮动元素会跟随其后</li><li>若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构</li></ul><p><strong>清除浮动的方式如下：</strong></p><ul><li>给父级 div 定义 <code>height</code>  属性</li><li>最后一个浮动元素之后添加一个空的 div 标签，并添加 <code>clear:both</code>  样式</li><li>包含浮动元素的父级标签添加 <code>overflow:hidden</code>  或者 <code>overflow:auto</code></li><li>使用 :after 伪元素。由于 IE6-7 不支持 :after，使用 zoom:1 触发 hasLayout**</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.clearfix::after</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token selector">.clearfix</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="bfc"><a class="anchor" href="#bfc">#</a> BFC</h3><p>先来看两个相关的概念：</p><ul><li>Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个 Box 就是我们所说的盒模型。</li><li>Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NTU19GbG93X0xheW91dC9JbnRyb190b19mb3JtYXR0aW5nX2NvbnRleHRz">块格式化上下文（Block Formatting Context，BFC）</span>是 Web 页面的可视化 CSS 渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p><p>通俗来讲：BFC 是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发 BFC 的条件，则 BFC 中的元素布局不受外部影响。</p><p><strong>创建 BFC 的条件：</strong></p><ul><li>根元素：body；</li><li>元素设置浮动：float 除 none 以外的值；</li><li>元素设置绝对定位：position (absolute、fixed)；</li><li>display 值为：inline-block、table-cell、table-caption、flex 等；</li><li>overflow 值为非 visible；</li></ul><p><strong>BFC 的特点：</strong></p><ul><li>垂直方向上，自上而下排列，和文档流的排列方式一致。</li><li>在 BFC 中上下相邻的两个容器的 margin 会重叠</li><li>计算 BFC 的高度时，需要计算浮动元素的高度</li><li>BFC 区域不会与浮动的容器发生重叠</li><li>BFC 是独立的容器，容器内部元素不会影响外部元素</li><li>每个元素的左 margin 值和容器的左 border 相接触</li></ul><p><strong>BFC 的作用：</strong></p><ul><li><strong>解决 margin 的重叠问题</strong>：由于 BFC 是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个 BFC，就解决了 margin 重叠的问题。</li><li><strong>解决高度塌陷的问题</strong>：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为 0。解决这个问题，只需要把父元素变成一个 BFC。常用的办法是给父元素设置 <code>overflow:hidden</code> 。</li><li><strong>创建自适应两栏布局</strong>：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.left</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token selector">.right</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>     <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>&lt;div class=<span class="token string">"left"</span>>&lt;/div></pre></td></tr><tr><td data-num="14"></td><td><pre>&lt;div class=<span class="token string">"right"</span>>&lt;/div></pre></td></tr></table></figure><h3 id="margin重叠问题"><a class="anchor" href="#margin重叠问题">#</a> margin 重叠问题</h3><p><strong>问题描述：</strong></p><p>两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，<strong>浮动的元素和绝对定位</strong>这种脱离文档流的元素的外边距不会折叠。重叠只会出现在<strong>垂直方向</strong>。</p><p><strong>计算原则：</strong></p><p>折叠合并后外边距的计算原则如下：</p><p><strong>兄弟元素</strong></p><ul><li>如果两者都是正数，那么就去最大者</li><li>如果是一正一负，就会取两者之和</li><li>两个都是负值时，取绝对值大的那个</li></ul><p><strong>父子元素</strong></p><ul><li>父子元素相邻外边距，子元素的会传递给父元素（上外边距）</li></ul><p><strong>解决办法：</strong></p><p>对于折叠的情况，主要有两种：<strong>兄弟之间重叠</strong>和<strong>父子之间重叠</strong></p><p>（1）兄弟之间重叠</p><ul><li>底部元素变为行内盒子： <code>display: inline-block</code></li><li>底部元素设置浮动： <code>float</code></li><li>底部元素的 position 的值为 <code>absolute/fixed</code></li></ul><p>（2）父子之间重叠</p><ul><li>父元素加入： <code>overflow: hidden</code></li><li>父元素添加透明边框： <code>border:1px solid transparent</code></li><li>子元素变为行内盒子： <code>display: inline-block</code></li><li>子元素加入浮动属性或定位</li></ul><h3 id="position属性"><a class="anchor" href="#position属性">#</a> position 属性</h3><p>position 有以下属性值：</p><table><thead><tr><th>属性值</th><th>概述</th></tr></thead><tbody><tr><td>absolute</td><td>生成绝对定位的元素，相对于 static 定位以外的一个父元素进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。</td></tr><tr><td>relative</td><td>生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。</td></tr><tr><td>fixed</td><td>生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。</td></tr><tr><td>static</td><td>默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。</td></tr><tr><td>inherit</td><td>规定从父元素继承 position 属性的值</td></tr></tbody></table><p>前面三者的定位方式如下：</p><ul><li>**relative：** 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。</li></ul><p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694939-58dfe7f7-2fc9-45e5-9961-a953f95496a7.png#align=left&amp;display=inline&amp;height=105&amp;margin=%5Bobject%20Object%5D&amp;originHeight=105&amp;originWidth=448&amp;size=0&amp;status=done&amp;style=stroke&amp;width=447" alt="img" /></p><p>**fixed：** 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。</p><p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694841-89472ba9-b236-4098-802f-c3c26ff49466.png#align=left&amp;display=inline&amp;height=117&amp;margin=%5Bobject%20Object%5D&amp;originHeight=135&amp;originWidth=516&amp;size=0&amp;status=done&amp;style=stroke&amp;width=446" alt="img" /></p><p>**absolute：** 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了 <code>position:relative/absolute/fixed</code>  的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：</p><p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694882-589670e0-cd52-41d4-a3ed-4ebbdfc88f32.png#align=left&amp;display=inline&amp;height=142&amp;margin=%5Bobject%20Object%5D&amp;originHeight=183&amp;originWidth=576&amp;size=0&amp;status=done&amp;style=stroke&amp;width=446" alt="img" /></p><p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694842-2764d9ed-d5fe-45f4-8ede-34a73d237f94.png#align=left&amp;display=inline&amp;height=118&amp;margin=%5Bobject%20Object%5D&amp;originHeight=137&amp;originWidth=516&amp;size=0&amp;status=done&amp;style=stroke&amp;width=446" alt="img" /></p><h3 id="position-float-display的关系"><a class="anchor" href="#position-float-display的关系">#</a> position &amp; float &amp; display 的关系</h3><p>（1）首先判断 display 属性是否为 none，如果为 none，则 position 和 float 属性的值不影响元素最后的表现。</p><p>（2）然后判断 position 的值是否为 absolute 或者 fixed，如果是，则 float 属性失效，并且 display 的值应该被设置为 table 或者 block，具体转换需要看初始转换值。</p><p>（3）如果 position 的值不为 absolute 或者 fixed，则判断 float 属性的值是否为 none，如果不是，则 display 的值则按上面的规则转换。注意，如果 position 的值为 relative 并且 float 属性的值存在，则 relative 相对于浮动后的最终位置定位。</p><p>（4）如果 float 的值为 none，则判断元素是否为根元素，如果是根元素则 display 属性按照上面的规则转换，如果不是，则保持指定的 display 属性值不变。</p><p>总的来说，可以把它看作是一个类似优先级的机制，&quot;position:absolute&quot; 和 &quot;position:fixed&quot; 优先级最高，有它存在的时候，浮动不起作用，'display' 的值也需要调整；其次，元素的 'float' 特性的值不是 &quot;none&quot; 的时候或者它是根元素的时候，调整 'display' 的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，'display' 特性值同设置值。</p><h3 id="flex布局"><a class="anchor" href="#flex布局">#</a> flex 布局</h3><p>Flex 是 FlexibleBox 的缩写，意为 &quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。行内元素也可以使用 Flex 布局。注意，设为 Flex 布局以后，<strong>子元素的 float、clear 和 vertical-align 属性将失效</strong>。采用 Flex 布局的元素，称为 Flex 容器（flex container），简称 &quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称 &quot;项目&quot;。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。</p><p>以下 6 个属性设置在<strong>容器上</strong>：</p><ul><li>flex-direction 属性决定主轴的方向（即项目的排列方向）。</li><li>flex-wrap 属性定义，如果一条轴线排不下，如何换行。</li><li>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。</li><li>justify-content 属性定义了项目在主轴上的对齐方式。</li><li>align-items 属性定义项目在交叉轴上如何对齐。</li><li>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li></ul><p>以下 6 个属性设置在<strong>项目上</strong>：</p><ul><li>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</li><li>flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</li><li>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</li><li>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。</li><li>flex 属性是 flex-grow，flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。</li><li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="css" scheme="https://asuhe.fun/categories/css/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>react脚手架配置代理</title>
    <link href="https://asuhe.fun/asuhe/1db0eb3.html"/>
    <id>https://asuhe.fun/asuhe/1db0eb3.html</id>
    <published>2022-07-01T14:53:12.000Z</published>
    <updated>2023-04-07T13:57:34.974Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="react脚手架配置代理总结"><a class="anchor" href="#react脚手架配置代理总结">#</a> react 脚手架配置代理总结</h1><h2 id="方法一"><a class="anchor" href="#方法一">#</a> 方法一</h2><blockquote><p>在 package.json 中追加如下配置</p></blockquote><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token property">"proxy"</span><span class="token operator">:</span><span class="token string">"http://localhost:5000"</span></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，前端请求资源时可以不加任何前缀。</li><li>缺点：不能配置多个代理。</li><li>工作方式：上述方式配置代理，当请求了 3000 不存在的资源时，那么该请求会转发给 5000 （优先匹配前端资源）</li></ol><h2 id="方法二"><a class="anchor" href="#方法二">#</a> 方法二</h2><ol><li><p>第一步：创建代理配置文件</p><pre><code>在src下创建配置文件：src/setupProxy.js</code></pre></li><li><p>编写 setupProxy.js 配置具体代理规则：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api1'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//api1 是需要转发的请求 (所有带有 /api1 前缀的请求都会转发给 5000)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      target<span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span> <span class="token comment">// 配置转发目标地址 (能返回数据的服务器地址)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 控制服务器接收到的请求头中 host 字段的值</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token comment">/*</pre></td></tr><tr><td data-num="9"></td><td><pre>      changeOrigin 设置为 true 时，服务器收到的请求头中的 host 为：localhost:5000</pre></td></tr><tr><td data-num="10"></td><td><pre>      changeOrigin 设置为 false 时，服务器收到的请求头中的 host 为：localhost:3000</pre></td></tr><tr><td data-num="11"></td><td><pre>      changeOrigin 默认值为 false，但我们一般将 changeOrigin 值设为 true</pre></td></tr><tr><td data-num="12"></td><td><pre>      */</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api1'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span> <span class="token comment">// 去除请求前缀，保证交给后台服务器的是正常请求地址 (必须配置)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api2'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>      target<span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api2'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li></ol><p>说明：</p><ol><li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li><li>缺点：配置繁琐，前端请求资源时必须加前缀。</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="React" scheme="https://asuhe.fun/categories/React/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础(三)</title>
    <link href="https://asuhe.fun/asuhe/51bfefea.html"/>
    <id>https://asuhe.fun/asuhe/51bfefea.html</id>
    <published>2022-06-28T13:33:48.000Z</published>
    <updated>2023-04-07T13:57:34.958Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="路由"><a class="anchor" href="#路由">#</a> 路由</h1><p>在 <code>React</code>  中可以使用 <code>react-router-dom</code>  来实现前端路由功能。它使用分别暴露暴露出一些组件以供我们使用。</p><p>常用的内置路由组件有：</p><ul><li><p>&lt;BrowserRouter&gt;</p><blockquote><p>用 BrowserRouter 标签包裹整个页面，使页面有一个全局的管理路由关系的路由器。并将路由的模式设置为常规路由模式，类似于 Vue 中 history 模式</p></blockquote></li><li><p>&lt;HashRouter&gt;</p><blockquote><p>HashRouter 标签和 BrowserRouter 一样，只是路由模式变更为 hash 模式</p></blockquote></li><li><p>&lt;Route&gt;</p><blockquote><p>Route 标签是控制路由组件的显示和隐藏，并且可以使用 <code>exact=&#123;true&#125;</code>  将路由匹配模式设置为精准匹配，而不是默认的模糊匹配。若该路由下还有子路由，则不能使用精准匹配模式</p></blockquote></li><li><p>&lt;Redirect&gt;</p><blockquote><p>Redirect 标签是设置一个默认的重定向路由，我们可以使用它设定默认路由。当所有路由匹配失败时，也会重定向到该路由</p></blockquote></li><li><p>&lt;Link&gt;</p><blockquote><p>Link 标签是用于更改地址栏的路径，当我们点击该标签时地址栏的路径就会变成该标签的路径</p></blockquote></li><li><p>&lt;NavLink&gt;</p><blockquote><p>NavLink 标签能够设定导航的默认样式，利用 <code>activeClassName=&quot;指定样式类&quot;</code>  可以将导航标签的样式设置为指定的类的样式</p></blockquote></li><li><p>&lt;Switch&gt;</p><blockquote><p>Switch 标签的功能是将原本路由的全匹配模式改为匹配完即终止，默认当匹配到多个 Route 标签时会将所有的匹配到的路由组件展示，使用 Switch 包裹则当匹配到第一 Route 时即停止往下匹配</p></blockquote></li></ul><p>例如我们要实现一个页面的路由切换，那你能利用 <code>&lt;Link&gt;</code>  和 <code>&lt;Route&gt;</code>  组件将路由组件和跳转标签关联起来。</p><pre><code class="language-react">// index.jsx// 使用history模式路由import React from 'react'import ReactDOM from 'react-dom'import App from './App'import &#123;BrowserRouter&#125; from 'react-router-dom'ReactDOM.render(&lt;BrowserRouter&gt;&lt;App/&gt;&lt;/BrowserRouter&gt;,document.getElementById('root'))</code></pre><pre><code class="language-react">// app.jsx// 需求：点击标签跳转到about页面,并启用replace模式和精准匹配// 设置默认页面为404//设置初次匹配到即停止import React, &#123; Component &#125; from 'react'import Home from './components/Home'import About from './components/About'import DefaultPage from './components/404'import &#123;NavLink,Route,Redirect,Switch&#125; from 'react-router-dom'export default class App extends Component &#123;render()&#123;        return (            &lt;div&gt;                &lt;ul&gt;                    &lt;li&gt;                        &lt;NavLink to=&quot;/about&quot; activeClassName=&quot;demo&quot; replace=&#123;true&#125;&gt;AboutPage&lt;/NavLink&gt;                        &lt;NavLink to=&quot;/home&quot; activeClassName=&quot;demo&quot;&gt;HomePage&lt;/NavLink&gt;                    &lt;/li&gt;                &lt;/ul&gt;                &lt;div&gt;                    &lt;Switch&gt;                        &lt;Route path=&quot;/about&quot; exact=&#123;true&#125;&gt;&lt;/Route&gt;                        &lt;Route path=&quot;/home&quot;&gt;&lt;/Route&gt;                        &lt;Redirect to=&quot;/about&quot;&gt;                    &lt;/Switch&gt;                &lt;/div&gt;              &lt;/div&gt;        )    &#125;&#125;</code></pre><h2 id="路由传参"><a class="anchor" href="#路由传参">#</a> 路由传参</h2><p>有时候我们想在路由跳转的时候携带一些参数给对应的路由组件，路由组件可以根据传递过来的参数发送网络请求。在 <code>React</code>  当中有总共有三种路由传参的方式，分别是：</p><ul><li>params 传参</li><li>search 传参</li><li>state 传参</li></ul><h3 id="params传参"><a class="anchor" href="#params传参">#</a> params 传参</h3><p><code>params</code>  传参就是利用地址栏里的 <code>params</code>  参数进行参数的传递，例如组件 A 给组件 B 传递两个 params 参数 <code>id</code>  和 <code>name</code></p><pre><code class="language-react">// A.jsximport React,&#123;Component&#125; from 'react'import &#123;Link,Route,Router&#125; from 'react-router-dom'import B from &quot;./B.jsx&quot;export default class A extends Component &#123;    state = &#123;        id:&quot;001&quot;,        name:&quot;asuhe&quot;    &#125;    render()&#123;        return (            &lt;div&gt;                &lt;div&gt;                    &lt;Link to=&#123;`/b/$&#123;this.state.id&#125;/$&#123;this.state.name&#125;`&#125;&gt;click&lt;/Link&gt;                &lt;/div&gt;                &lt;div&gt;                    &#123;/* react-router-dom v6版本以下写法 */&#125;                    &#123;/* &lt;Route path=&quot;/b/:id/:name&quot; component=&#123;B&#125; /&gt; */&#125;                    &lt;Routes&gt;                        &lt;Route path=&quot;/b/:id/:name&quot; element=&#123;&lt;B&gt;&lt;/B&gt;&#125; /&gt;                    &lt;/Routes&gt;                &lt;/div&gt;            &lt;/div&gt;        )    &#125;&#125;</code></pre><p>而在组件 B 中，我们可以在 props 中接收到多个属性对象，传入的 params 参数我们可以在组件 B 的 props 对象中的 match 里的 params 中获取。</p><pre><code class="language-react">// B.jsximport React,&#123;Component&#125; from &quot;react&quot;export default class B extends Component &#123;    render()&#123;        console.log(this.props)    &#125;&#125;</code></pre><h4 id="react-router-dom-v5x"><a class="anchor" href="#react-router-dom-v5x">#</a> react-router-dom v5.x</h4><pre><code class="language-react">//路由链接(携带参数)：&lt;Link to='/demo/test/tom/18'&#125;&gt;详情&lt;/Link&gt; //或 &lt;Link to=&#123;&#123; pathname:'/demo/test/tom/18' &#125;&#125;&gt;详情&lt;/Link&gt;//注册路由(声明接收)：&lt;Route path=&quot;/demo/test/:name/:age&quot; component=&#123;Test&#125;/&gt;    //接收参数：this.props.match.params</code></pre><h4 id="react-router-dom-v6x"><a class="anchor" href="#react-router-dom-v6x">#</a> react-router-dom v6.x</h4><pre><code class="language-react">//路由链接(携带参数)：&lt;Link to=&#123;&#123; pathname:`/b/child1/$&#123;id&#125;/$&#123;title&#125;` &#125;&#125;&gt;Child1&lt;/Link&gt;//或 &lt;Link  to=&#123;`/b/child1/$&#123;id&#125;/$&#123;title&#125;`&#125;&gt;Child1&lt;/Link&gt; //注册路由(声明接收)：&lt;Route path=&quot;/b/child1/:id/:title&quot; component=&#123;Test&#125;/&gt;//接收参数：import &#123; useParams &#125; from &quot;react-router-dom&quot;;const params = useParams();//params参数 =&gt; &#123;id: &quot;01&quot;, title: &quot;消息1&quot;&#125;</code></pre><h3 id="search传参"><a class="anchor" href="#search传参">#</a> search 传参</h3><p><code>React</code>  中的 <code>search</code>  传参实际上就是我们传统请求参数中的 <code>query</code>  传参。只是写法稍微有些差异。</p><pre><code class="language-react">// A.jsxrender()&#123;    return(        &lt;div&gt;            &lt;div&gt;                &lt;Link to=&#123;`/b?id=$&#123;this.state.id&#125;&amp;$name=&#123;this.state.name&#125;`&#125;&gt;点击跳转至组件B&lt;/Link&gt;            &lt;/div&gt;            &lt;div&gt;                &lt;Router&gt;                    &lt;Route path=&quot;/b&quot; component=&#123;B&#125;&gt;&lt;/Route&gt;                &lt;/Router&gt;            &lt;/div&gt;        &lt;/div&gt;    )&#125;</code></pre><p>传入的 search 参数我们可以在组件 B 的 props 对象中的 location 里的 search 中获取。</p><h4 id="react-router-dom-v5x-2"><a class="anchor" href="#react-router-dom-v5x-2">#</a> react-router-dom v5.x</h4><pre><code class="language-react">//路由链接(携带参数)：&lt;Link to='/demo/test?name=tom&amp;age=18'&#125;&gt;详情&lt;/Link&gt;//注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;        //接收参数：this.props.location.search//备注：获取到的search是urlencoded编码字符串(例如: ?id=10&amp;name=zhangsan)，需要借助query-string解析参数成对象</code></pre><h4 id="react-router-dom-v6x-2"><a class="anchor" href="#react-router-dom-v6x-2">#</a> react-router-dom v6.x</h4><pre><code class="language-react">//路由链接(携带参数)： &lt;Link className=&quot;nav&quot; to=&#123;`/b/child2?age=20&amp;name=zhangsan`&#125;&gt;Child2&lt;/Link&gt;//注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/b/child2&quot; component=&#123;Test&#125;/&gt;        //接收参数方法1：import &#123; useLocation &#125; from &quot;react-router-dom&quot;;import qs from &quot;query-string&quot;;const &#123; search &#125; = useLocation();//search参数 =&gt; &#123;age: &quot;20&quot;, name: &quot;zhangsan&quot;&#125;//接收参数方法2：import &#123; useSearchParams &#125; from &quot;react-router-dom&quot;;const [searchParams, setSearchParams] = useSearchParams();// console.log( searchParams.get(&quot;id&quot;)); // 12//备注：获取到的search是urlencoded编码字符串(例如: ?age=20&amp;name=zhangsan)，需要借助query-string解析参数成对象</code></pre><h3 id="state传参"><a class="anchor" href="#state传参">#</a> state 传参</h3><p><code>state</code>  传参就是把 <code>&lt;Link&gt;</code>  里面的 <code>to</code>  属性换成一个对象，再将路径和参数信息填入该对象。</p><pre><code class="language-react">// A.jsxrender()&#123;    &lt;div&gt;        &lt;div&gt;            &lt;Link to=&#123;&#123;pathname:"/b",state:&#123;id:this.state.id,name:this.state.name&#125;&#125;&#125;&gt;点击跳转至组件B&lt;/Link&gt;        &lt;/div&gt;        &lt;div&gt;            &lt;Router&gt;                &lt;Route path=&quot;/b&quot; component=&#123;B&#125;&gt;&lt;/Route&gt;            &lt;/Router&gt;        &lt;/div&gt;    &lt;/div&gt;    )&#125;</code></pre><p>传入的 state 参数我们可以在组件 B 的 props 对象中的 location 里的 state 中获取。</p><h4 id="react-router-dom-v5x-3"><a class="anchor" href="#react-router-dom-v5x-3">#</a> react-router-dom v5.x</h4><pre><code class="language-react">//路由链接(携带参数)：&lt;Link to=&#123;&#123;pathname:'/demo/test',state:&#123;name:'tom',age:18&#125;&#125;&#125;&gt;详情&lt;/Link&gt;//注册路由(无需声明，正常注册即可)： &lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;    //接收参数：this.props.location.state//备注：刷新也可以保留住参数</code></pre><h4 id="react-router-dom-v6x-3"><a class="anchor" href="#react-router-dom-v6x-3">#</a> react-router-dom v6.x</h4><pre><code class="language-react">//通过Link的state属性传递参数 &lt;Link     className=&quot;nav&quot;     to=&#123;`/b/child2`&#125;     state=&#123;&#123; id: 999, name: "i love merlin" &#125;&#125;  &gt;    Child2&lt;/Link&gt;//注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/b/child2&quot; component=&#123;Test&#125;/&gt;    //接收参数：import &#123; useLocation &#125; from &quot;react-router-dom&quot;;const &#123; state &#125; = useLocation();//state参数 =&gt; &#123;id: 999, name: &quot;我是asuhe&quot;&#125;//备注：刷新也可以保留住参数</code></pre><h2 id="编程式路由"><a class="anchor" href="#编程式路由">#</a> 编程式路由</h2><p>编程式路由可以允许我们用 <code>javascript</code>  动态生成路由链接</p><h4 id="react-router-dom-v5x-4"><a class="anchor" href="#react-router-dom-v5x-4">#</a> react-router-dom v5.x</h4><pre><code class="language-react">// A.jsxclass A extends Component &#123;    pushRoute = ()=&gt;&#123;        this.props.history.push(&quot;/b&quot;)    &#125;    render()&#123;        return (            &lt;div&gt;                &lt;button onClick=&#123;this.pushRoute&#125;&gt;&lt;/button&gt;                &lt;Route path=&quot;/b&quot; component=&#123;B&#125;/&gt;            &lt;/div&gt;        )    &#125;&#125;</code></pre><h4 id="react-router-dom-v6x-4"><a class="anchor" href="#react-router-dom-v6x-4">#</a> react-router-dom v6.x</h4><pre><code class="language-react">function A &#123;    const navigate = useNavigate()    navigate('b', &#123;        state: &#123;            id: item.id,            content: item.content,            title: item.title        &#125;    &#125;)    return (    &lt;div&gt;            &lt;button onClick=&#123;() =&gt; navigate(-1)&#125;&gt;back&lt;/button&gt;            &lt;button onClick=&#123;() =&gt; navigate(1)&#125;&gt;go&lt;/button&gt;        &lt;/div&gt;    )&#125;</code></pre><h3 id="withrouter"><a class="anchor" href="#withrouter">#</a> withRouter</h3><p>当我想要在非路由组件中使用路由组件中的 <code>push</code> 、 <code>replace</code>  等编程式路由的函数时，就可以使用 <code>withRouter</code>  来获取这些函数。 <code>withRouter</code>  作为一个高阶组件，其作用是将一个组件包裹进 <code>Route</code>  里面，然后 <code>react-router</code>  的三个对象 <code>history,、location、match</code>  就会被放进这个组件的 props 属性中。</p><pre><code class="language-react">import React, &#123; Component &#125; from 'react'import &#123;withRouter&#125; from 'react-router-dom'class C extends Component &#123;back = ()=&gt;&#123;this.props.history.goBack()&#125;  forward =  ()=&gt;&#123;this.props.history.goForward()&#125;render() &#123;return (&lt;div &gt;                &lt;button onClick=&#123;this.back&#125;&gt;回退&lt;/button&gt;                &lt;button onClick=&#123;this.forward&#125;&gt;前进&lt;/button&gt;&lt;/div&gt;)&#125;&#125;export default withRouter(C)</code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="React" scheme="https://asuhe.fun/categories/React/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础(二)</title>
    <link href="https://asuhe.fun/asuhe/2f4ccfc1.html"/>
    <id>https://asuhe.fun/asuhe/2f4ccfc1.html</id>
    <published>2022-06-20T13:07:05.000Z</published>
    <updated>2023-04-07T13:57:34.953Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="生命周期旧"><a class="anchor" href="#生命周期旧">#</a> 生命周期 (旧)</h1><p><code>React</code>  的生命周期可以为两条线，一是初始挂载阶段的生命周期，二是组件状态更新阶段的生命周期。在组件挂载阶段的生命周期只会触发一次，而组件状态更新阶段的生命周期可以多次触发。</p><p>在下图中，左边为挂载阶段的生命周期，右边为状态更新阶段的生命周期。</p><p><img data-src="https://s2.loli.net/2022/06/20/cUF6rflmbZBKMTI.png" alt="Untitled Diagram (1)" /></p><p>特别说明 <code>componentWillRecevieProps</code>  函数只有在父组件给子组件传递 <code>props</code>  时才会被调用。而 <code>shouldComponentUpdate</code>  则一定会被调用，若我们不自己指定则会默认 <code>return true</code> 。</p><h1 id="生命周期新"><a class="anchor" href="#生命周期新">#</a> 生命周期 (新)</h1><p>在 <code>React 16.3</code>  中引入了新的生命周期，在旧版生命周期中删除了 <code>componentWillReceiveProps</code> 、 <code>componentWillMount</code> 、 <code>componentWillUpdate</code>  这三个生命周期。引入了两个新的生命周期 <code>getDerivedStateFromProps</code>  和 <code>getSnapshotBeforeUpdate</code> 。</p><p><img data-src="https://s2.loli.net/2022/06/20/eOzJrV1HxQF9giT.png" alt="React生命周期(新)" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="React" scheme="https://asuhe.fun/categories/React/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础(一)</title>
    <link href="https://asuhe.fun/asuhe/807d54a3.html"/>
    <id>https://asuhe.fun/asuhe/807d54a3.html</id>
    <published>2022-06-14T01:49:23.000Z</published>
    <updated>2023-04-07T13:57:34.941Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="组件声明"><a class="anchor" href="#组件声明">#</a> 组件声明</h1><p><code>React</code>  中声明组件有两种方式，一是函数式组件，就是把一个函数作为组件的构造器；二是 <code>class</code>  组件，即用 <code>ES6</code>  的 <code>class</code>  语法声明一个类作为组件的构造器。在<strong> 16.8 版本</strong>以前函数式组件不能使用组件的 <code>state</code> ， <code>refs</code>  属性等诸多特性，这使得函数式组件只能用来定义一些简单组件，对于复杂一些的组件只能使用 <code>class</code>  组件。而此版本以后 <code>React</code>  加入了 <code>Hook</code> ，使得函数式组件也能够使用组件的其它特性。<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLWludHJvLmh0bWw=">官方文档</span></p><h2 id="函数式组件"><a class="anchor" href="#函数式组件">#</a> 函数式组件</h2><p>函数式组件中我们只能用 <code>props</code>  属性，定义一个函数式组件只需要创建一个开头为大写字母的函数，然后再将函数最后 <code>return</code>  回一个 <code>jsx</code>  标签即可。代码如下：</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="4"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="5"></td><td><pre>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Asuhe<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="class组件"><a class="anchor" href="#class组件">#</a> class 组件</h2><p><code>class</code>  组件要比函数式组件强大的多，它可以完全使用组件三大属性： <code>state</code> 、 <code>props</code> 、 <code>refs</code> 。它还有生命周期函数可供使用，在生命周期函数中我们可以进行许多操作。但创建一个 <code>class</code>  组件需要从 <code>React对象</code> 中继承一个类 <code>React.Component</code> 。代码如下：</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">//render 函数必须要有</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="6"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Asuhe</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="7"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>当我们需要在 <code>class</code>  组件上挂载事件处理函数时有两种方式，一是在 <code>constructor</code>  中重写该事件处理函数，二是利用箭头函数和 class 语法声明函数。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/* 第一种方法 在 jsx 中调用的 this 调用 weather 和设置 state</pre></td></tr><tr><td data-num="3"></td><td><pre>    constructor (props) &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre>        super (props)</pre></td></tr><tr><td data-num="5"></td><td><pre>        this.state = &#123; isHot: true, breeze: ' 微风 ' &#125;</pre></td></tr><tr><td data-num="6"></td><td><pre>        // 关键步骤：将原型上的 changeWeather 挂载载到组件实例对象的 changeWeather 里并更改 this</pre></td></tr><tr><td data-num="7"></td><td><pre>        this.changeWeather = this.changeWeather.bind (this)</pre></td></tr><tr><td data-num="8"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre>    changeWeather () &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>        let &#123;isHot&#125; = this.state</pre></td></tr><tr><td data-num="11"></td><td><pre>        this.setState (&#123;</pre></td></tr><tr><td data-num="12"></td><td><pre>            isHot: !isHot</pre></td></tr><tr><td data-num="13"></td><td><pre>        &#125;)</pre></td></tr><tr><td data-num="14"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>    // 未重写 changeWeather 前，onClick 绑定的 this.changeWeather 相当于</pre></td></tr><tr><td data-num="16"></td><td><pre>    //let a = new Weather ()</pre></td></tr><tr><td data-num="17"></td><td><pre>    //let x = a.changeWeather</pre></td></tr><tr><td data-num="18"></td><td><pre>    //x ()</pre></td></tr><tr><td data-num="19"></td><td><pre>    */</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 第二种方法 不在原型上挂载 changeWeather</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> isHot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> breeze<span class="token operator">:</span> <span class="token string">'微风'</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function-variable function">changeWeather</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> isHot <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            isHot<span class="token operator">:</span> <span class="token operator">!</span>isHot</pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="31"></td><td><pre>                今天天气很</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token operator">:</span> <span class="token string">'凉爽'</span><span class="token punctuation">&#125;</span><span class="token plain-text">,</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>breeze<span class="token punctuation">&#125;</span><span class="token plain-text"></pre></td></tr><tr><td data-num="32"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="组件的三大属性"><a class="anchor" href="#组件的三大属性">#</a> 组件的三大属性</h1><p>组件实例中有很多属性，但比较常用的就三个分别是：state、props、refs。</p><p><img data-src="C:/Users/12071/AppData/Roaming/Typora/typora-user-images/image-20220614101741901.png" alt="image-20220614101741901" /></p><h2 id="state"><a class="anchor" href="#state">#</a> state</h2><p><code>state</code>  属性是用来存储该组件实例的状态的。当我们使用 <code>this.setState</code>  函数去修改 <code>state</code>  时，页面会因为组件状态改变而同步改变。以上面的 <code>MyComponent</code>  组件为例，我们可以给组件定义一个初始状态：</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/* 第一种方式在构造器里初始化状态</pre></td></tr><tr><td data-num="3"></td><td><pre>    constructor (props)&#123;</pre></td></tr><tr><td data-num="4"></td><td><pre>    // 使用了构造器就一定要调用 super 否则 React 报错</pre></td></tr><tr><td data-num="5"></td><td><pre>        super (props)</pre></td></tr><tr><td data-num="6"></td><td><pre>        this.state = &#123;name:'Asuhe'&#125;</pre></td></tr><tr><td data-num="7"></td><td><pre>        // 若不给 super 传 props，则在 constructor 中使用 this.props 可能会出错</pre></td></tr><tr><td data-num="8"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre>    */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 第二种方式</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Asuhe'</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">//render 函数必须要有</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="16"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="17"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="props"><a class="anchor" href="#props">#</a> props</h2><p><code>props</code>  属性是用来接收外部传给组件的数据的，如果我们直接在标签上写数据， <code>props</code>  会自动接收该数据。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">18</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/06/14/wgPRJzb2ThnHcvY.png" alt="image-20220614103444298" /></p><h3 id="限制props的数据类型"><a class="anchor" href="#限制props的数据类型">#</a> 限制 props 的数据类型</h3><p>有时候我们希望限制传入数据的类型，此时我们需要额外加载一个 <code>prop-types.js</code>  包，里面有 <code>PropTyps</code>  对象以供我们使用。示例代码如下：</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求： </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 1.name 属性必须为 string，age 属性必须为 number，sex 属性必须为 string</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 2.sex 属性必须传入</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 3.sex 若未传入则默认值为 male</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        name<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        age<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token comment">//sex 为必须</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        sex<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 设置默认 props 值</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        sex<span class="token operator">:</span> <span class="token string">'male'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="19"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">name:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="20"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">age:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="21"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">sex:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>sex<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="22"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'asuhe'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    age<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// sex: 'male'</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token punctuation">...</span><span class="token attr-value">data</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="refs"><a class="anchor" href="#refs">#</a> refs</h2><p>当我们需要获取标签 or 组件实例时，可以使用 <code>ref</code>  标记。然后就可以在函数中利用 <code>this.refs</code>  找到该组件 or 标签。 <code>ref</code>  有三种形式分别是：字符串类型、回调函数类型和 <code>refs</code>  对象类型。</p><h3 id="字符串类型的ref"><a class="anchor" href="#字符串类型的ref">#</a> 字符串类型的 ref</h3><p>字符串形式的 ref 已经不推荐使用， ref 会被自动收录进组件的 refs 里，如同 props。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function-variable function">showData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> input2<span class="token operator">:</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs</pre></td></tr><tr><td data-num="5"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="10"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="11"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="12"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="13"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/06/14/nJOj3Wa1hBS6YeU.png" alt="image-20220614104753532" /></p><h3 id="回调函数类型的ref"><a class="anchor" href="#回调函数类型的ref">#</a> 回调函数类型的 ref</h3><p>回调函数形式的 ref 会将该标签 DOM 传给回调函数的形参，用 this 接住挂载在组件实例上。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function-variable function">showData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> input2<span class="token operator">:</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="10"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token parameter">a</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> a<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="11"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="12"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token parameter">b</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2 <span class="token operator">=</span> b<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="13"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/06/14/5uGQJHWYjSNCOA9.png" alt="image-20220614104935057" /></p><h3 id="refs对象类型的ref"><a class="anchor" href="#refs对象类型的ref">#</a> refs 对象类型的 ref</h3><p>使用自定义 ref 对象 ref 对象内含 {current: 被 ref 标记的标签实例} 当多个标签使用同一个 ref 对象标记时，仅保留最后一个。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 若要 ref 标记多个标签实例，则需要声明多个属性创建多个 React.createRef</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    myRefs <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function-variable function">showData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> current<span class="token operator">:</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRefs</pre></td></tr><tr><td data-num="7"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="12"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRefs<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="13"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="14"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRefs<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="15"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/06/14/LNQHq2Cpo7lKBbZ.png" alt="image-20220614105049968" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="React" scheme="https://asuhe.fun/categories/React/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python之Selenium库</title>
    <link href="https://asuhe.fun/asuhe/34a3b1fc.html"/>
    <id>https://asuhe.fun/asuhe/34a3b1fc.html</id>
    <published>2022-06-05T09:43:44.000Z</published>
    <updated>2023-04-07T13:57:34.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="selenium基本使用"><a class="anchor" href="#selenium基本使用">#</a> Selenium 基本使用</h1><h2 id="简介"><a class="anchor" href="#简介">#</a> 简介</h2><p><code>Selenium</code>  是一种驱动浏览器的库，它通过调用<span class="exturl" data-url="aHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci93ZWJkcml2ZXItc3BlYy5odG1s"> Webdriver </span>来驱动电脑中的浏览器从而使我们可以获得一个真实的浏览器环境而不是模拟浏览器环境获取网页数据。它提供了一系列 API 来帮助我们获取浏览器中的内容。</p><p>使用它之前需要下载对应浏览器版本的 <code>Webdriver</code> ：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL2EvY2hyb21pdW0ub3JnL2Nocm9tZWRyaXZlci9kb3dubG9hZHM=">Chrome Webdriver</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS90b29scy93ZWJkcml2ZXIv">Edge Webdriver</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvZ2Vja29kcml2ZXIvcmVsZWFzZXM=">FireFox Webdriver</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93ZWJraXQub3JnL2Jsb2cvNjkwMC93ZWJkcml2ZXItc3VwcG9ydC1pbi1zYWZhcmktMTAv">Safari Webdriver</span></li></ul><p>在合适的目录中放置好 <code>Webdriver</code>  后我们就可以通过 <code>Selenium</code>  调用它，从而获取网页内容。</p><p>安装 <code>Selenium</code> ：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>pip <span class="token function">install</span> selenium</pre></td></tr></table></figure><p>前置工作做好后，我们就可以开始抓取网页内容。</p><h2 id="chromedriver-使用"><a class="anchor" href="#chromedriver-使用">#</a> Chromedriver 使用</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 载入需要的库</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 开启浏览器视窗 (Chrome)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 方法一：执行前需要启动 chromedriver.exe 且与该代码文件在相同的工作目录</span></pre></td></tr><tr><td data-num="6"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 方法二：或是直接指定 exe 文件路径</span></pre></td></tr><tr><td data-num="8"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"Desktop\chromedriver"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>若是想要使用以上其他的浏览器，那只要在浏览器的名称上做一些更改。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 调用 FireFox</span></pre></td></tr><tr><td data-num="2"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 调用 Safari</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Safari<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>获得 <code>driver</code>  对象后调用 <code>get</code>  函数传入想要访问网页的 url 即可</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 访问本站</span></pre></td></tr><tr><td data-num="2"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://asuhe.fun"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 关闭浏览器视窗</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="使用selenium控制页面"><a class="anchor" href="#使用selenium控制页面">#</a> 使用 Selenium 控制页面</h2><p>当我们操作页面时，例如点击页面、提交表单，我们需要预先获取到该事件触发的 <code>DOM元素</code> 。类似于使用 javascript 去操纵页面，只是这里的语言换成了 python。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usernameBox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 获得输入框</span></pre></td></tr><tr><td data-num="2"></td><td><pre>element <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"usernameBox"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 填充内容</span></pre></td></tr><tr><td data-num="4"></td><td><pre>element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"hello selenium"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 清除内容</span></pre></td></tr><tr><td data-num="6"></td><td><pre>element<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 点击元素</span></pre></td></tr><tr><td data-num="8"></td><td><pre>element<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>其中 <code>send_keys</code>  函数不仅可以填充内容，还可以模拟所有的键盘操作。当使用非功能性按键如 26 个字母时，直接使用即可。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 载入对应库</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 模拟 ctrl + c</span></pre></td></tr><tr><td data-num="4"></td><td><pre>element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 模拟 ctrl + v</span></pre></td></tr><tr><td data-num="6"></td><td><pre>element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>功能按键字符对照表</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>NULL <span class="token operator">=</span> <span class="token string">'\ue000'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>CANCEL <span class="token operator">=</span> <span class="token string">'\ue001'</span> <span class="token comment"># ^break</span></pre></td></tr><tr><td data-num="3"></td><td><pre>HELP <span class="token operator">=</span> <span class="token string">'\ue002'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>BACKSPACE <span class="token operator">=</span> <span class="token string">'\ue003'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>BACK_SPACE <span class="token operator">=</span> BACKSPACE</pre></td></tr><tr><td data-num="6"></td><td><pre>TAB <span class="token operator">=</span> <span class="token string">'\ue004'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>CLEAR <span class="token operator">=</span> <span class="token string">'\ue005'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>RETURN <span class="token operator">=</span> <span class="token string">'\ue006'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ENTER <span class="token operator">=</span> <span class="token string">'\ue007'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>SHIFT <span class="token operator">=</span> <span class="token string">'\ue008'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>LEFT_SHIFT <span class="token operator">=</span> SHIFT</pre></td></tr><tr><td data-num="12"></td><td><pre>CONTROL <span class="token operator">=</span> <span class="token string">"\ue009"</span></pre></td></tr><tr><td data-num="13"></td><td><pre>LEFT_CONTROL <span class="token operator">=</span> CONTROL</pre></td></tr><tr><td data-num="14"></td><td><pre>ALT <span class="token operator">=</span> <span class="token string">"\ue00a"</span></pre></td></tr><tr><td data-num="15"></td><td><pre>LEFT_ALT <span class="token operator">=</span> ALT</pre></td></tr><tr><td data-num="16"></td><td><pre>PAUSE <span class="token operator">=</span> <span class="token string">"\ue00b"</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ESCAPE <span class="token operator">=</span> <span class="token string">"\ue00c"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>SPACE <span class="token operator">=</span> <span class="token string">"\ue00d"</span></pre></td></tr><tr><td data-num="19"></td><td><pre>PAGE_UP <span class="token operator">=</span> <span class="token string">"\ue00e"</span></pre></td></tr><tr><td data-num="20"></td><td><pre>PAGE_DOWN <span class="token operator">=</span> <span class="token string">"\ue00f"</span></pre></td></tr><tr><td data-num="21"></td><td><pre>END <span class="token operator">=</span> <span class="token string">"\ue010"</span></pre></td></tr><tr><td data-num="22"></td><td><pre>HOME <span class="token operator">=</span> <span class="token string">"\ue011"</span></pre></td></tr><tr><td data-num="23"></td><td><pre>LEFT <span class="token operator">=</span> <span class="token string">"\ue012"</span></pre></td></tr><tr><td data-num="24"></td><td><pre>ARROW_LEFT <span class="token operator">=</span> LEFT</pre></td></tr><tr><td data-num="25"></td><td><pre>UP <span class="token operator">=</span> <span class="token string">"\ue013"</span></pre></td></tr><tr><td data-num="26"></td><td><pre>ARROW_UP <span class="token operator">=</span> UP</pre></td></tr><tr><td data-num="27"></td><td><pre>RIGHT <span class="token operator">=</span> <span class="token string">"\ue014"</span></pre></td></tr><tr><td data-num="28"></td><td><pre>ARROW_RIGHT <span class="token operator">=</span> RIGHT</pre></td></tr><tr><td data-num="29"></td><td><pre>DOWN <span class="token operator">=</span> <span class="token string">"\ue015"</span></pre></td></tr><tr><td data-num="30"></td><td><pre>ARROW_DOWN <span class="token operator">=</span> DOWN</pre></td></tr><tr><td data-num="31"></td><td><pre>INSERT <span class="token operator">=</span> <span class="token string">"\ue016"</span></pre></td></tr><tr><td data-num="32"></td><td><pre>DELETE <span class="token operator">=</span> <span class="token string">"\ue017"</span></pre></td></tr><tr><td data-num="33"></td><td><pre>SEMICOLON <span class="token operator">=</span> <span class="token string">"\ue018"</span></pre></td></tr><tr><td data-num="34"></td><td><pre>EQUALS <span class="token operator">=</span> <span class="token string">"\ue019"</span></pre></td></tr><tr><td data-num="35"></td><td><pre>NUMPAD0 <span class="token operator">=</span> <span class="token string">"\ue01a"</span> <span class="token comment"># number pad keys</span></pre></td></tr><tr><td data-num="36"></td><td><pre>NUMPAD1 <span class="token operator">=</span> <span class="token string">"\ue01b"</span></pre></td></tr><tr><td data-num="37"></td><td><pre>NUMPAD2 <span class="token operator">=</span> <span class="token string">"\ue01c"</span></pre></td></tr><tr><td data-num="38"></td><td><pre>NUMPAD3 <span class="token operator">=</span> <span class="token string">"\ue01d"</span></pre></td></tr><tr><td data-num="39"></td><td><pre>NUMPAD4 <span class="token operator">=</span> <span class="token string">"\ue01e"</span></pre></td></tr><tr><td data-num="40"></td><td><pre>NUMPAD5 <span class="token operator">=</span> <span class="token string">"\ue01f"</span></pre></td></tr><tr><td data-num="41"></td><td><pre>NUMPAD6 <span class="token operator">=</span> <span class="token string">"\ue020"</span></pre></td></tr><tr><td data-num="42"></td><td><pre>NUMPAD7 <span class="token operator">=</span> <span class="token string">"\ue021"</span></pre></td></tr><tr><td data-num="43"></td><td><pre>NUMPAD8 <span class="token operator">=</span> <span class="token string">"\ue022"</span></pre></td></tr><tr><td data-num="44"></td><td><pre>NUMPAD9 <span class="token operator">=</span> <span class="token string">"\ue023"</span></pre></td></tr><tr><td data-num="45"></td><td><pre>MULTIPLY <span class="token operator">=</span> <span class="token string">"\ue024"</span></pre></td></tr><tr><td data-num="46"></td><td><pre>ADD <span class="token operator">=</span> <span class="token string">"\ue025"</span></pre></td></tr><tr><td data-num="47"></td><td><pre>SEPARATOR <span class="token operator">=</span> <span class="token string">"\ue026"</span></pre></td></tr><tr><td data-num="48"></td><td><pre>SUBTRACT <span class="token operator">=</span> <span class="token string">"\ue027"</span></pre></td></tr><tr><td data-num="49"></td><td><pre>DECIMAL <span class="token operator">=</span> <span class="token string">"\ue028"</span></pre></td></tr><tr><td data-num="50"></td><td><pre>DIVIDE <span class="token operator">=</span> <span class="token string">"\ue029"</span></pre></td></tr><tr><td data-num="51"></td><td><pre>F1 <span class="token operator">=</span> <span class="token string">"\ue031"</span></pre></td></tr><tr><td data-num="52"></td><td><pre>F2 <span class="token operator">=</span> <span class="token string">"\ue032"</span></pre></td></tr><tr><td data-num="53"></td><td><pre>F3 <span class="token operator">=</span> <span class="token string">"\ue033"</span></pre></td></tr><tr><td data-num="54"></td><td><pre>F4 <span class="token operator">=</span> <span class="token string">"\ue034"</span></pre></td></tr><tr><td data-num="55"></td><td><pre>F5 <span class="token operator">=</span> <span class="token string">"\ue035"</span></pre></td></tr><tr><td data-num="56"></td><td><pre>F6 <span class="token operator">=</span> <span class="token string">"\ue036"</span></pre></td></tr><tr><td data-num="57"></td><td><pre>F7 <span class="token operator">=</span> <span class="token string">"\ue037"</span></pre></td></tr><tr><td data-num="58"></td><td><pre>F8 <span class="token operator">=</span> <span class="token string">"\ue038"</span></pre></td></tr><tr><td data-num="59"></td><td><pre>F9 <span class="token operator">=</span> <span class="token string">"\ue039"</span></pre></td></tr><tr><td data-num="60"></td><td><pre>F10 <span class="token operator">=</span> <span class="token string">"\ue03a"</span></pre></td></tr><tr><td data-num="61"></td><td><pre>F11 <span class="token operator">=</span> <span class="token string">"\ue03b"</span></pre></td></tr><tr><td data-num="62"></td><td><pre>F12 <span class="token operator">=</span> <span class="token string">"\ue03c"</span></pre></td></tr><tr><td data-num="63"></td><td><pre>META <span class="token operator">=</span> <span class="token string">"\ue03d"</span></pre></td></tr><tr><td data-num="64"></td><td><pre>COMMAND <span class="token operator">=</span> <span class="token string">"\ue03d"</span></pre></td></tr></table></figure><h2 id="页面跳转"><a class="anchor" href="#页面跳转">#</a> 页面跳转</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 前进</span></pre></td></tr><tr><td data-num="2"></td><td><pre>driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 后退</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="https://asuhe.fun/categories/python/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Python之urllib库</title>
    <link href="https://asuhe.fun/asuhe/9552fdc3.html"/>
    <id>https://asuhe.fun/asuhe/9552fdc3.html</id>
    <published>2022-06-05T07:33:03.000Z</published>
    <updated>2023-04-07T13:57:34.939Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="urllib基本使用"><a class="anchor" href="#urllib基本使用">#</a> urllib 基本使用</h1><h2 id="简介"><a class="anchor" href="#简介">#</a> 简介</h2><p><code>urllib</code>  是 python 内置的一个网络库，我们可以直接导入该库，然后使用它去模拟浏览器向服务器发送请求以获取数据。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 导入请求对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="3"></td><td><pre>baseUrl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 通过 baseUrl 发送请求</span></pre></td></tr><tr><td data-num="5"></td><td><pre>respone <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 获取回的 respone 为一个对象，调用 read 方法逐字节读取响应数据</span></pre></td></tr><tr><td data-num="7"></td><td><pre>content <span class="token operator">=</span> respone<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># respone.readline () 仅读取一行内容</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># respone.readlines () 一行一行读取所有内容，返回一个字节流形式的数据的 list</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># content 是字节流的形式存储的数据，所以要转换为 utf-8 字符串</span></pre></td></tr><tr><td data-num="11"></td><td><pre>result <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># 输出最终的 html 文档</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="构造http请求头"><a class="anchor" href="#构造http请求头">#</a> 构造 http 请求头</h2><p>有时候网站会要求识别请求的 <code>UA</code>  来反爬，或者需要爬取登录后才能查看的数据时要携带 <code>cookie</code> 。我们可以使用 <code>urllib</code>  库里带的函数去构造出 <code>http</code>  请求头来绕过。</p><p><img data-src="https://s2.loli.net/2022/06/05/8NesfuQbFAcpWdC.png" alt="image-20220605155834239" /></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="2"></td><td><pre>baseUrl <span class="token operator">=</span> <span class="token string">'https://asuhe.fun'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 构造 http 请求头，携带 UA</span></pre></td></tr><tr><td data-num="4"></td><td><pre>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 将构造好的请求头封装进 Request 对象</span></pre></td></tr><tr><td data-num="8"></td><td><pre>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 发送请求</span></pre></td></tr><tr><td data-num="10"></td><td><pre>respone <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="handler构造请求头"><a class="anchor" href="#handler构造请求头">#</a> handler 构造请求头</h3><p>当我们需要使用 <code>动态cookie</code>  或者 <code>ip代理</code> 等高级功能时，上面构造的请求头已经无法满足。 <code>handler</code>  则可以实现这个功能。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 在上面代码的基础上，使用 handler 对象即可</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 1. 创建 handler 对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPHandler<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 2. 构建 opener 对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 3. 调用 opener 对象的 open 方法请求，传入 request 对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>respone <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="使用代理"><a class="anchor" href="#使用代理">#</a> 使用代理</h3><p>使用代理 ip 访问网站可以提高访问速度，突破网站访问的限制。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="2"></td><td><pre>baseUrl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36'</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 1. 创建 request 对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>baseUrl<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># 2. 创建 ProxyHandler 对象</span></pre></td></tr><tr><td data-num="9"></td><td><pre>proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment"># 设置代理 ip 和端口</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'110.110.110.110:996'</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>proxyHandler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>requers<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span>proxies <span class="token operator">=</span> proxies<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment"># 3. 创建 opener 对象</span></pre></td></tr><tr><td data-num="15"></td><td><pre>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxyHandler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment"># 4. 使用 open 方法访问</span></pre></td></tr><tr><td data-num="17"></td><td><pre>respone <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span></pre></td></tr></table></figure><p>使用代理池</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>proxiesPool <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'110.110.110.110:996'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'111.110.110.110:996'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'112.110.110.110:996'</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> random</pre></td></tr><tr><td data-num="7"></td><td><pre>proxies <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>proxiesPool<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="get和post请求的编码处理"><a class="anchor" href="#get和post请求的编码处理">#</a> get 和 post 请求的编码处理</h2><p>无论是 <code>get</code>  还是 <code>post</code> ，在发送前如果携带参数中有中文或者非 <code>utf-8</code>  字符，则都需要先编码，然后才能发送出去。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 处理单个参数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>baseUrl1 <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?wd='</span></pre></td></tr><tr><td data-num="5"></td><td><pre>query <span class="token operator">=</span> <span class="token string">'明日'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 编码单个参数</span></pre></td></tr><tr><td data-num="7"></td><td><pre>encoded <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>query<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span> <span class="token comment"># %E6%98%8E%E6%97%A5</span></pre></td></tr><tr><td data-num="9"></td><td><pre>respone1 <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl1 <span class="token operator">+</span> encoded<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># 处理多个参数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>baseUrl2 <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>querys <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token string">'wd'</span><span class="token punctuation">:</span><span class="token string">'明日'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'男'</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>querys<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>respone <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl2 <span class="token operator">+</span> data<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="发送post请求"><a class="anchor" href="#发送post请求">#</a> 发送 post 请求</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse</pre></td></tr><tr><td data-num="3"></td><td><pre>baseUrl <span class="token operator">=</span> <span class="token string">'https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">'from'</span><span class="token punctuation">:</span> <span class="token string">'en'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token string">'to'</span><span class="token punctuation">:</span> <span class="token string">'zh'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string">'query'</span><span class="token punctuation">:</span> <span class="token string">'spider'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token string">'transtype'</span><span class="token punctuation">:</span> <span class="token string">'realtime'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token string">'simple_means_flag'</span><span class="token punctuation">:</span> <span class="token string">'3'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token string">'sign'</span><span class="token punctuation">:</span> <span class="token string">'63766.268839'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token string">'122223c8769458b6eb3613362ad8693e'</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'common'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>params <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment"># post 请求的参数必须编码为字节流的形式</span></pre></td></tr><tr><td data-num="16"></td><td><pre>params <span class="token operator">=</span> params<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment"># urllib.request.Request 的 data 参数即为 post 请求携带的参数</span></pre></td></tr><tr><td data-num="18"></td><td><pre>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl<span class="token punctuation">,</span>data <span class="token operator">=</span> params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>respone <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="json处理"><a class="anchor" href="#json处理">#</a> json 处理</h3><p>有时候我们请求网页返回来的是 <code>json</code>  格式的数据，这时我们要使用 <code>json</code>  模块去解析数据</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> json</pre></td></tr><tr><td data-num="2"></td><td><pre>jsonData <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment"># data 为响应的 json 数据</span></pre></td></tr></table></figure><h2 id="异常处理"><a class="anchor" href="#异常处理">#</a> 异常处理</h2><p>若通过 <code>urllib</code>  发送请求产生异常，通常为两种：一种是 <code>URLError</code> ，另一种是 <code>HTTPError</code> 。 <code>URLError</code>  当请求的主机地址错误时会发生， <code>HTTPError</code>  例如当无法连接到主机时，请求携带的参数错误时，都会产生该错误。 <code>HTTPError</code>  是 <code>URLError</code>  的子类。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment"># code</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment"># something</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment"># something</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="https://asuhe.fun/categories/python/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Webpack基础(三)</title>
    <link href="https://asuhe.fun/asuhe/d025e0c6.html"/>
    <id>https://asuhe.fun/asuhe/d025e0c6.html</id>
    <published>2022-05-07T12:44:02.000Z</published>
    <updated>2023-04-07T13:57:34.935Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="webpack中的plugin"><a class="anchor" href="#webpack中的plugin">#</a> webpack 中的 plugin</h1><p><code>Webpack</code>  的另一个核心是 <code>Plugin</code> ， <code>Loader</code>  是用于特定的模块类型进行转换用于处理资源文件，而 <code>Plugin</code>  可以用于执行更加广泛的任务，比如打包优化、资源管理、环境变量注入等。例如：生成 html 文件、将 js/css 文件插入 html 文件中。</p><h2 id="cleanwebpackplugin"><a class="anchor" href="#cleanwebpackplugin">#</a> CleanWebpackPlugin</h2><p><code>CleanWebpackPlugin</code>  的作用就是每次修改了一些配置，重新打包时，自动删除 dist 文件夹。</p><p>安装 <code>CleanWebpackPlugin</code> ：</p><pre><code class="language-sh">npm install clean-webpack-plugin -D</code></pre><p>配置 <code>CleanWebpackPlugin</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.conifg.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> CleanWebpackPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="htmlwebpackplugin"><a class="anchor" href="#htmlwebpackplugin">#</a> HtmlWebpackPlugin</h2><p><code>HtmlWebpackPlugin</code>  的作用就是用于生成 <code>index.html</code>  入口文件。</p><p>安装 <code>HtmlWebpackPlugin</code> ：</p><pre><code class="language-sh">npm install html-webpack-plugin -D</code></pre><p>配置 <code>HtmlWebpackPlugin</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            title<span class="token operator">:</span> <span class="token string">"Asuhe"</span> <span class="token comment">// 给 index.html 文件添加 title 标签内容</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token comment">// 指定我们要使用的模块所在的路径</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token comment">/*</pre></td></tr><tr><td data-num="9"></td><td><pre>            template: "./public/index.html"</pre></td></tr><tr><td data-num="10"></td><td><pre>            */</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>有时候我们想使用自己的模板而不用默认的 <code>html</code>  模板，这时我们就需要修改模板 <code>index.html</code>  文件。<strong>在 <code>html-webpack-plugin</code>  的源码中，有一个 default_index.ejs 模块</strong>，我们若要定义自己的 <code>html</code>  模板只需要用 <code>ejs</code>  的语法修改该文件即可。</p><h2 id="defineplugin"><a class="anchor" href="#defineplugin">#</a> DefinePlugin</h2><p><code>DefinePlugin</code>  是用于定义一些项目中的全局变量的，项目中所有文件都可以读取这些全局变量。它是一个 <code>webpack</code>  内置的插件，不需要单独安装</p><p>配置 <code>DefinePlugin</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> DefinePlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">'"./"'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="copywebpackplugin"><a class="anchor" href="#copywebpackplugin">#</a> CopyWebpackPlugin</h2><p><code>CopyWebpackPlugin</code>  能够实现文件复制功能。使用 <code>CopyWebpackPlugin</code>  可以将指定目录下的文件复制到指定位置</p><p>安装 <code>CopyWebpackPlugin</code> ：</p><pre><code class="language-sh">npm install copy-webpack-plugin -D</code></pre><p>配置 <code>CopyWebpackPlugin</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> plugin</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            patterns<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                    <span class="token keyword">from</span><span class="token operator">:</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token comment">// 设置从哪一个源中开始复制</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                    <span class="token comment">//to: "xxx" 复制到的位置，可以省略，会默认复制到打包的目录下</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    globOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 设置一些额外的选项，其中可以编写需要忽略的文件</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                        ignore<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                            <span class="token string">'**/.DS_Store'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                            <span class="token string">'**/index.html'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                        <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="webpack中的mode"><a class="anchor" href="#webpack中的mode">#</a> webpack 中的 mode</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Webpack" scheme="https://asuhe.fun/categories/Webpack/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Webpack基础(二)</title>
    <link href="https://asuhe.fun/asuhe/aed6c0ed.html"/>
    <id>https://asuhe.fun/asuhe/aed6c0ed.html</id>
    <published>2022-05-07T02:28:26.000Z</published>
    <updated>2023-04-07T13:57:34.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="postcss工具"><a class="anchor" href="#postcss工具">#</a> PostCSS 工具</h1><h2 id="什么是postcss"><a class="anchor" href="#什么是postcss">#</a> 什么是 PostCSS</h2><p><code>PostCSS</code>  是一个<strong>通过 JavaScript 来转换样式的工具</strong>，这个工具可以帮助我们进行一些 CSS 的转换和适配，比如自动添加浏览器前缀、css 样式的重置。但是实现这些工具，我们需要借助于 PostCSS 对应的插件。<strong>主要用来处理浏览器兼容性问题。</strong></p><p>安装 PostCss：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> postcss postcss-cli -D</pre></td></tr></table></figure><p>使用：在 <code>webpack</code>  的配置文件中编写相应的 <code>loader</code>  规则，或者直接在命令行中使用。</p><p>因为 <code>postcss</code>  是独立于 <code>webpack</code>  的，所以在 <code>webpack.config.js</code>  中配置 <code>postcss</code>  前需要安装相应 <code>loader</code> ：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> postcss-loader -D</pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> modules -> rules -> use</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    options<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        postcssOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="autoprefixer"><a class="anchor" href="#autoprefixer">#</a> autoprefixer</h2><p><code>autoprefixer</code>  可以帮助我们生成兼容各种浏览器的 <code>css</code>  代码，它的主要作用就是给 <code>css</code>  代码添加上相应的浏览器前缀。如：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* autoprefixer 处理前 */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">:fullscreen</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.content</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* autoprefixer 处理后 */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">:-ms-fullscreen</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token selector">:fullscreen</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token selector">.content</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>安装 <code>autoprefixer</code> ：</p><pre><code class="language-sh">npm install autoprefixer -D</code></pre><p>单独配置 <code>autoprefixer</code>  在 <code>postcss.config.js</code>  中配置：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// postcss.config.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="postcss-preset-env"><a class="anchor" href="#postcss-preset-env">#</a> postcss-preset-env</h2><p>postcss-preset-env 也是一个 postcss 的插件。它可以帮助我们将一些现代的 CSS 特性，转成大多数浏览器认识的 CSS，并且会根据目标浏览器或者运行时环境添加所需的 polyfill。也包括会自动帮助我们添加 autoprefixer（所以相当于已经内置了 autoprefixer）。</p><p>安装 <code>postcss-preset-env</code> ：</p><pre><code class="language-sh">npm install postcss-preset-env -D</code></pre><p>配置 <code>postcss-preset-env</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// postcss.config.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="加载和处理其它资源"><a class="anchor" href="#加载和处理其它资源">#</a> 加载和处理其它资源</h1><h2 id="file-loader"><a class="anchor" href="#file-loader">#</a> file-loader</h2><p><code>file-loader</code>  的作用就是帮助我们处理 <code>import/require()</code>  方式引入的一个文件资源，并且会将它放到我们输出的文件夹中。</p><p>安装 <code>file-loader</code> ：</p><pre><code class="language-sh">npm install file-loader -D</code></pre><p>配置 <code>file-loader</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> modules -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    use<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        loader<span class="token operator">:</span> <span class="token string">"file-loader"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>有时候我们处理后的文件名称按照一定的规则进行显示： 比如保留原来的文件名、扩展名，同时为了防止重复，包含一个 hash 值等。 这个时候我们可以使用 <code>PlaceHolders</code>  来完成，webpack 给我们提供了大量的 <code>PlaceHolders</code>  来显示不同的内容。</p><p>常用的 placeholder：</p><ul><li>[ext]： 处理文件的扩展名</li><li>[name]：处理文件的名称</li><li>[hash]：文件的内容，使用 MD4 的散列函数处理，生成的一个 128 位的 hash 值（32 个十六进制）</li><li>[contentHash]：在 file-loader 中和 [hash] 结果是一致的（在 webpack 的一些其他地方不一样，后面会讲到）</li><li>[hash:&lt;length&gt;]：截图 hash 的长度，默认 32 个字符太长了</li><li>[path]：文件相对于 webpack 配置文件的路径</li></ul><p>例如将图片文件输出到 <code>/img</code>  下，并且用 <code>文件原名 + hash值前8位 + 扩展名</code> 命名打包好的图片文件。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> modules -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    use<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        loader<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 写法一</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        options<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            name<span class="token operator">:</span> <span class="token string">"img/[name].[hash:8].[ext]"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 写法二</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">/*</pre></td></tr><tr><td data-num="12"></td><td><pre>        options: &#123;</pre></td></tr><tr><td data-num="13"></td><td><pre>            name: "img/[name].[hash:8].[ext]",</pre></td></tr><tr><td data-num="14"></td><td><pre>            outputPath: "img"</pre></td></tr><tr><td data-num="15"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="16"></td><td><pre>        */</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="url-loader"><a class="anchor" href="#url-loader">#</a> url-loader</h2><p><code>url-loader</code>  和 <code>file-loader</code>  的工作方式是相似的，但是可以将较小的文件，转成 base64 的 URI。</p><p>安装 <code>url-loader</code> ：</p><pre><code class="language-sh">npm install url-loader -D</code></pre><p>配置 <code>url-loader</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> modules -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    use<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        loader<span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        options<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            limit<span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 仅将 100Kb 一下的图片转换为 base64</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            name<span class="token operator">:</span> <span class="token string">"[name].[hash:8].[ext]"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            outputPath<span class="token operator">:</span> <span class="token string">"img"</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="asset-module-type"><a class="anchor" href="#asset-module-type">#</a> asset module type</h1><h2 id="介绍"><a class="anchor" href="#介绍">#</a> 介绍</h2><p>在 webpack5 之前，加载非 <code>javascript</code>  或 <code>json</code>  资源我们需要使用一些 loader，比如 <code>raw-loader 、url-loader、file-loader</code> 。<br />在 webpack5 之后，我们可以直接使用资源模块类型（asset module type），来替代上面的这些 loader。</p><p>资源模块类型 (asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p><ul><li>passet/resource 发送一个单独的文件并导出 URL。之前通过使用 file-loader 实现</li><li>passet/inline 导出一个资源的 data URI。之前通过使用 url-loader 实现</li><li>passet/source 导出资源的源代码。之前通过使用 raw-loader 实现</li><li>passet 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源 体积限制实现</li></ul><h2 id="使用"><a class="anchor" href="#使用">#</a> 使用</h2><p>使用 <code>asset module type</code>  我们可以在 <code>rules</code>  中配置：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> module -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|svg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    type<span class="token operator">:</span> <span class="token string">"asset/resource"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>自定义文件输出路径和文件名：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> output</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 方法一</span></pre></td></tr><tr><td data-num="4"></td><td><pre>output<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    filename<span class="token operator">:</span> <span class="token string">"js/bundle.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    path<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    assetModuleFilename<span class="token operator">:</span> <span class="token string">"img/[name].[hash:6][ext]"</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> module -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 方法二 在 rule 中添加一个 generator 属性并设置 filename</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|svg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    type<span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    generator<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        filename<span class="token operator">:</span> <span class="token string">"img/[name].[hash:6][ext]"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 实现 limit 效果</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">/*</pre></td></tr><tr><td data-num="12"></td><td><pre>    parser: &#123;</pre></td></tr><tr><td data-num="13"></td><td><pre>        dataUrlCondition: &#123;</pre></td></tr><tr><td data-num="14"></td><td><pre>            maxSize: 100 * 1024</pre></td></tr><tr><td data-num="15"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="16"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="17"></td><td><pre>    */</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>处理字体文件，用 <code>webpack5</code>  中的 <code>asset/resource</code>  来替代 <code>file-loader</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// // webpack.config.js -> module -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(woff2?|eot|ttf)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    type<span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    generator<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        filename<span class="token operator">:</span> <span class="token string">"font/[name].[hash:6][ext]"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Webpack" scheme="https://asuhe.fun/categories/Webpack/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
