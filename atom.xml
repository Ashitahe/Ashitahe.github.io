<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Born in poverty, died of numbness</title>
  
  
  <link href="https://asuhe.fun/atom.xml" rel="self"/>
  
  <link href="https://asuhe.fun/"/>
  <updated>2022-06-26T15:02:20.742Z</updated>
  <id>https://asuhe.fun/</id>
  
  <author>
    <name>Asuhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React基础(二)</title>
    <link href="https://asuhe.fun/2022/06/20/2022-06-20-React%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
    <id>https://asuhe.fun/2022/06/20/2022-06-20-React%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</id>
    <published>2022-06-20T13:07:05.000Z</published>
    <updated>2022-06-26T15:02:20.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="生命周期旧"><a class="anchor" href="#生命周期旧">#</a> 生命周期 (旧)</h1><p><code>React</code>  的生命周期可以为两条线，一是初始挂载阶段的生命周期，二是组件状态更新阶段的生命周期。在组件挂载阶段的生命周期只会触发一次，而组件状态更新阶段的生命周期可以多次触发。</p><p>在下图中，左边为挂载阶段的生命周期，右边为状态更新阶段的生命周期。</p><p><img data-src="https://s2.loli.net/2022/06/20/cUF6rflmbZBKMTI.png" alt="Untitled Diagram (1)" /></p><p>特别说明 <code>componentWillRecevieProps</code>  函数只有在父组件给子组件传递 <code>props</code>  时才会被调用。而 <code>shouldComponentUpdate</code>  则一定会被调用，若我们不自己指定则会默认 <code>return true</code> 。</p><h1 id="生命周期新"><a class="anchor" href="#生命周期新">#</a> 生命周期 (新)</h1><p>在 <code>React 16.3</code>  中引入了新的生命周期，在旧版生命周期中删除了 <code>componentWillReceiveProps</code> 、 <code>componentWillMount</code> 、 <code>componentWillUpdate</code>  这三个生命周期。引入了两个新的生命周期 <code>getDerivedStateFromProps</code>  和 <code>getSnapshotBeforeUpdate</code> 。</p><p><img data-src="https://s2.loli.net/2022/06/20/eOzJrV1HxQF9giT.png" alt="React生命周期(新)" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="React" scheme="https://asuhe.fun/categories/React/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React基础(一)</title>
    <link href="https://asuhe.fun/2022/06/14/2022-06-14-React%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>https://asuhe.fun/2022/06/14/2022-06-14-React%E5%9F%BA%E7%A1%80(%E4%B8%80)/</id>
    <published>2022-06-14T01:49:23.000Z</published>
    <updated>2022-06-14T02:59:51.357Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="组件声明"><a class="anchor" href="#组件声明">#</a> 组件声明</h1><p><code>React</code>  中声明组件有两种方式，一是函数式组件，就是把一个函数作为组件的构造器；二是 <code>class</code>  组件，即用 <code>ES6</code>  的 <code>class</code>  语法声明一个类作为组件的构造器。在<strong> 16.8 版本</strong>以前函数式组件不能使用组件的 <code>state</code> ， <code>refs</code>  属性等诸多特性，这使得函数式组件只能用来定义一些简单组件，对于复杂一些的组件只能使用 <code>class</code>  组件。而此版本以后 <code>React</code>  加入了 <code>Hook</code> ，使得函数式组件也能够使用组件的其它特性。<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLWludHJvLmh0bWw=">官方文档</span></p><h2 id="函数式组件"><a class="anchor" href="#函数式组件">#</a> 函数式组件</h2><p>函数式组件中我们只能用 <code>props</code>  属性，定义一个函数式组件只需要创建一个开头为大写字母的函数，然后再将函数最后 <code>return</code>  回一个 <code>jsx</code>  标签即可。代码如下：</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="4"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="5"></td><td><pre>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Asuhe<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="class组件"><a class="anchor" href="#class组件">#</a> class 组件</h2><p><code>class</code>  组件要比函数式组件强大的多，它可以完全使用组件三大属性： <code>state</code> 、 <code>props</code> 、 <code>refs</code> 。它还有生命周期函数可供使用，在生命周期函数中我们可以进行许多操作。但创建一个 <code>class</code>  组件需要从 <code>React对象</code> 中继承一个类 <code>React.Component</code> 。代码如下：</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">//render 函数必须要有</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="6"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Asuhe</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="7"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>当我们需要在 <code>class</code>  组件上挂载事件处理函数时有两种方式，一是在 <code>constructor</code>  中重写该事件处理函数，二是利用箭头函数和 class 语法声明函数。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/* 第一种方法 在 jsx 中调用的 this 调用 weather 和设置 state</pre></td></tr><tr><td data-num="3"></td><td><pre>    constructor (props) &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre>        super (props)</pre></td></tr><tr><td data-num="5"></td><td><pre>        this.state = &#123; isHot: true, breeze: ' 微风 ' &#125;</pre></td></tr><tr><td data-num="6"></td><td><pre>        // 关键步骤：将原型上的 changeWeather 挂载载到组件实例对象的 changeWeather 里并更改 this</pre></td></tr><tr><td data-num="7"></td><td><pre>        this.changeWeather = this.changeWeather.bind (this)</pre></td></tr><tr><td data-num="8"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre>    changeWeather () &#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>        let &#123;isHot&#125; = this.state</pre></td></tr><tr><td data-num="11"></td><td><pre>        this.setState (&#123;</pre></td></tr><tr><td data-num="12"></td><td><pre>            isHot: !isHot</pre></td></tr><tr><td data-num="13"></td><td><pre>        &#125;)</pre></td></tr><tr><td data-num="14"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>    // 未重写 changeWeather 前，onClick 绑定的 this.changeWeather 相当于</pre></td></tr><tr><td data-num="16"></td><td><pre>    //let a = new Weather ()</pre></td></tr><tr><td data-num="17"></td><td><pre>    //let x = a.changeWeather</pre></td></tr><tr><td data-num="18"></td><td><pre>    //x ()</pre></td></tr><tr><td data-num="19"></td><td><pre>    */</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 第二种方法 不在原型上挂载 changeWeather</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> isHot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> breeze<span class="token operator">:</span> <span class="token string">'微风'</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function-variable function">changeWeather</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> isHot <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            isHot<span class="token operator">:</span> <span class="token operator">!</span>isHot</pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="31"></td><td><pre>                今天天气很</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token operator">:</span> <span class="token string">'凉爽'</span><span class="token punctuation">&#125;</span><span class="token plain-text">,</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>breeze<span class="token punctuation">&#125;</span><span class="token plain-text"></pre></td></tr><tr><td data-num="32"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="组件的三大属性"><a class="anchor" href="#组件的三大属性">#</a> 组件的三大属性</h1><p>组件实例中有很多属性，但比较常用的就三个分别是：state、props、refs。</p><p><img data-src="C:/Users/12071/AppData/Roaming/Typora/typora-user-images/image-20220614101741901.png" alt="image-20220614101741901" /></p><h2 id="state"><a class="anchor" href="#state">#</a> state</h2><p><code>state</code>  属性是用来存储该组件实例的状态的。当我们使用 <code>this.setState</code>  函数去修改 <code>state</code>  时，页面会因为组件状态改变而同步改变。以上面的 <code>MyComponent</code>  组件为例，我们可以给组件定义一个初始状态：</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/* 第一种方式在构造器里初始化状态</pre></td></tr><tr><td data-num="3"></td><td><pre>    constructor (props)&#123;</pre></td></tr><tr><td data-num="4"></td><td><pre>    // 使用了构造器就一定要调用 super 否则 React 报错</pre></td></tr><tr><td data-num="5"></td><td><pre>        super (props)</pre></td></tr><tr><td data-num="6"></td><td><pre>        this.state = &#123;name:'Asuhe'&#125;</pre></td></tr><tr><td data-num="7"></td><td><pre>        // 若不给 super 传 props，则在 constructor 中使用 this.props 可能会出错</pre></td></tr><tr><td data-num="8"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre>    */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 第二种方式</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'Asuhe'</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">//render 函数必须要有</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="16"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="17"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="props"><a class="anchor" href="#props">#</a> props</h2><p><code>props</code>  属性是用来接收外部传给组件的数据的，如果我们直接在标签上写数据， <code>props</code>  会自动接收该数据。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">18</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/06/14/wgPRJzb2ThnHcvY.png" alt="image-20220614103444298" /></p><h3 id="限制props的数据类型"><a class="anchor" href="#限制props的数据类型">#</a> 限制 props 的数据类型</h3><p>有时候我们希望限制传入数据的类型，此时我们需要额外加载一个 <code>prop-types.js</code>  包，里面有 <code>PropTyps</code>  对象以供我们使用。示例代码如下：</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求： </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 1.name 属性必须为 string，age 属性必须为 number，sex 属性必须为 string</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 2.sex 属性必须传入</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 3.sex 若未传入则默认值为 male</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        name<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        age<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token comment">//sex 为必须</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        sex<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 设置默认 props 值</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        sex<span class="token operator">:</span> <span class="token string">'male'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="19"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">name:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="20"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">age:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="21"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">sex:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>sex<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="22"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'asuhe'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    age<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// sex: 'male'</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>data<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="refs"><a class="anchor" href="#refs">#</a> refs</h2><p>当我们需要获取标签 or 组件实例时，可以使用 <code>ref</code>  标记。然后就可以在函数中利用 <code>this.refs</code>  找到该组件 or 标签。 <code>ref</code>  有三种形式分别是：字符串类型、回调函数类型和 <code>refs</code>  对象类型。</p><h3 id="字符串类型的ref"><a class="anchor" href="#字符串类型的ref">#</a> 字符串类型的 ref</h3><p>字符串形式的 ref 已经不推荐使用， ref 会被自动收录进组件的 refs 里，如同 props。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function-variable function">showData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> input2<span class="token operator">:</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs</pre></td></tr><tr><td data-num="5"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="10"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="11"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="12"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="13"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/06/14/nJOj3Wa1hBS6YeU.png" alt="image-20220614104753532" /></p><h3 id="回调函数类型的ref"><a class="anchor" href="#回调函数类型的ref">#</a> 回调函数类型的 ref</h3><p>回调函数形式的 ref 会将该标签 DOM 传给回调函数的形参，用 this 接住挂载在组件实例上。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function-variable function">showData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> input2<span class="token operator">:</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="10"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token parameter">a</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> a<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="11"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="12"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token parameter">b</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2 <span class="token operator">=</span> b<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="13"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/06/14/5uGQJHWYjSNCOA9.png" alt="image-20220614104935057" /></p><h3 id="refs对象类型的ref"><a class="anchor" href="#refs对象类型的ref">#</a> refs 对象类型的 ref</h3><p>使用自定义 ref 对象 ref 对象内含 {current: 被 ref 标记的标签实例} 当多个标签使用同一个 ref 对象标记时，仅保留最后一个。</p><figure class="highlight jsx"><figcaption data-lang="React JSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 若要 ref 标记多个标签实例，则需要声明多个属性创建多个 React.createRef</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    myRefs <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function-variable function">showData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> current<span class="token operator">:</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRefs</pre></td></tr><tr><td data-num="7"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="12"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRefs<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="13"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="14"></td><td><pre>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRefs<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></pre></td></tr><tr><td data-num="15"></td><td><pre>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2022/06/14/LNQHq2Cpo7lKBbZ.png" alt="image-20220614105049968" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="React" scheme="https://asuhe.fun/categories/React/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>毕业</title>
    <link href="https://asuhe.fun/2022/06/09/2022-06-09-%E6%AF%95%E4%B8%9A/"/>
    <id>https://asuhe.fun/2022/06/09/2022-06-09-%E6%AF%95%E4%B8%9A/</id>
    <published>2022-06-09T04:46:03.000Z</published>
    <updated>2022-06-26T15:01:55.230Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="毕业"><a class="anchor" href="#毕业">#</a> 毕业</h1><p>没有几天就要从学校离开了，回想自己大学这四年的经历，感觉自己经历了许多，思想上也成熟了许多。高中时代的我价值观非常单一，认为成绩就是一切，其它的都是无用的。那时候的我还坚信自己努力就能做到一切，后来发现这只不过是一种傲慢。在大学里我见识到了许多可能性，同时我也感受到了世界的参差，也因此我的价值评价体系变得多元起来，不再以单一的唯成绩论。</p><p>刚刚进入大学的我很快就失去了控制。高中时听英语老师说他进入大学时花了一个学期才适应，我当时还心想有这么夸张吗。而现实很快就给了我反馈，大一上因为面对突如其来的自由，我不知所措，每天奔波于各种杂事中，一直觉得自己好忙但是忙的又不是学习的事情。这直接就导致了我的生活混乱无序，什么事情来了就干什么，没有自己的重心和规划。在那学期出成绩时，C 语言课程设计这门 4 个学分的专业课，我直接得了个 66，而我的室友各个都是 80+。考前我还自认为自己比他们努力，没有窝在寝室里而是多出去外面接触其他人去自习室学习，而他们天天窝在寝室里没有加入任何社团仿佛与外界断绝了联系，就连期末复习也都是在寝室里默默复习的。过完年我意识到不能再这么下去了，面对同学们都各有特长，而我这个乡下人除会了做课本上那点东西啥也不会，而且我还没做到比他们好。大一下我将心思全部扑在学习上，踏上了卷绩点的路，那门 C 语言程序设计也成了我大学成绩单上的唯一 “亮点”。</p><p>因为从小留守的经历，导致我对父母毫无概念。奶奶总说我从七个月大开始就是她带的我，父母生下我没多久就去广东打工了。父母在我的眼里只是一个抽象的概念，每年过年回来带一堆零食的那两个人就是我的父母，而这两个人年后没多久就会匆匆离开，就这样下一年他们又会出现如此往复。所以每当课本上有描写母爱或者父爱的文章时，我的内心对此毫无感觉。每每看到那些描写父爱母爱如何伟大的文章时，我也是完全无感。</p><p>在我上大学之前，我家都是没有自己的房子的。小学时代我住在二伯家，初中时代住在五叔家，高中时代住在三叔家。上大学那年，借助着当时政府鼓励农村人自建房屋给予一定的补助和我的升学宴获得的一些礼金，以及在我奶奶的强力推动下才得以动工。因为自己家没有房子，所以我从未拥有过属于自己一个人的房间。可以说从高中开始，我在学校寄宿的住处条件反而比家里的条件好。每当我大学放寒暑假时我都是最后一个离开寝室的，室友们往往会在考试结束后就马上离开学校，而我会一直待到学校规定的最后离校日。在大学的宿舍里有快速的网络、舒服的空调和一张专属于自己学习的桌子。这些东西我在家都是没有的，家里连一张可以专供学习的桌子都没有，有的只是一张餐桌。</p><p>曾经我以为时间会抚平一切，但后来我才明白时间只是掩埋它、隐藏它。曾经欢乐的、痛苦的回忆都渐渐模糊。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="life" scheme="https://asuhe.fun/categories/life/"/>
    
    
    <category term="live" scheme="https://asuhe.fun/tags/live/"/>
    
  </entry>
  
  <entry>
    <title>Python之Selenium库</title>
    <link href="https://asuhe.fun/2022/06/05/2022-06-05-Python%E4%B9%8BSelenium%E5%BA%93/"/>
    <id>https://asuhe.fun/2022/06/05/2022-06-05-Python%E4%B9%8BSelenium%E5%BA%93/</id>
    <published>2022-06-05T09:43:44.000Z</published>
    <updated>2022-06-26T15:00:26.772Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="selenium基本使用"><a class="anchor" href="#selenium基本使用">#</a> Selenium 基本使用</h1><h2 id="简介"><a class="anchor" href="#简介">#</a> 简介</h2><p><code>Selenium</code>  是一种驱动浏览器的库，它通过调用<span class="exturl" data-url="aHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci93ZWJkcml2ZXItc3BlYy5odG1s"> Webdriver </span>来驱动电脑中的浏览器从而使我们可以获得一个真实的浏览器环境而不是模拟浏览器环境获取网页数据。它提供了一系列 API 来帮助我们获取浏览器中的内容。</p><p>使用它之前需要下载对应浏览器版本的 <code>Webdriver</code> ：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL2EvY2hyb21pdW0ub3JnL2Nocm9tZWRyaXZlci9kb3dubG9hZHM=">Chrome Webdriver</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS90b29scy93ZWJkcml2ZXIv">Edge Webdriver</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvZ2Vja29kcml2ZXIvcmVsZWFzZXM=">FireFox Webdriver</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93ZWJraXQub3JnL2Jsb2cvNjkwMC93ZWJkcml2ZXItc3VwcG9ydC1pbi1zYWZhcmktMTAv">Safari Webdriver</span></li></ul><p>在合适的目录中放置好 <code>Webdriver</code>  后我们就可以通过 <code>Selenium</code>  调用它，从而获取网页内容。</p><p>安装 <code>Selenium</code> ：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>pip <span class="token function">install</span> selenium</pre></td></tr></table></figure><p>前置工作做好后，我们就可以开始抓取网页内容。</p><h2 id="chromedriver-使用"><a class="anchor" href="#chromedriver-使用">#</a> Chromedriver 使用</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 载入需要的库</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 开启浏览器视窗 (Chrome)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 方法一：执行前需要启动 chromedriver.exe 且与该代码文件在相同的工作目录</span></pre></td></tr><tr><td data-num="6"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 方法二：或是直接指定 exe 文件路径</span></pre></td></tr><tr><td data-num="8"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"Desktop\chromedriver"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>若是想要使用以上其他的浏览器，那只要在浏览器的名称上做一些更改。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 调用 FireFox</span></pre></td></tr><tr><td data-num="2"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 调用 Safari</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Safari<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>获得 <code>driver</code>  对象后调用 <code>get</code>  函数传入想要访问网页的 url 即可</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 访问本站</span></pre></td></tr><tr><td data-num="2"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://asuhe.fun"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 关闭浏览器视窗</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="使用selenium控制页面"><a class="anchor" href="#使用selenium控制页面">#</a> 使用 Selenium 控制页面</h2><p>当我们操作页面时，例如点击页面、提交表单，我们需要预先获取到该事件触发的 <code>DOM元素</code> 。类似于使用 javascript 去操纵页面，只是这里的语言换成了 python。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usernameBox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 获得输入框</span></pre></td></tr><tr><td data-num="2"></td><td><pre>element <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"usernameBox"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 填充内容</span></pre></td></tr><tr><td data-num="4"></td><td><pre>element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"hello selenium"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 清除内容</span></pre></td></tr><tr><td data-num="6"></td><td><pre>element<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 点击元素</span></pre></td></tr><tr><td data-num="8"></td><td><pre>element<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>其中 <code>send_keys</code>  函数不仅可以填充内容，还可以模拟所有的键盘操作。当使用非功能性按键如 26 个字母时，直接使用即可。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 载入对应库</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 模拟 ctrl + c</span></pre></td></tr><tr><td data-num="4"></td><td><pre>element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 模拟 ctrl + v</span></pre></td></tr><tr><td data-num="6"></td><td><pre>element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>功能按键字符对照表</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>NULL <span class="token operator">=</span> <span class="token string">'\ue000'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>CANCEL <span class="token operator">=</span> <span class="token string">'\ue001'</span> <span class="token comment"># ^break</span></pre></td></tr><tr><td data-num="3"></td><td><pre>HELP <span class="token operator">=</span> <span class="token string">'\ue002'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>BACKSPACE <span class="token operator">=</span> <span class="token string">'\ue003'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>BACK_SPACE <span class="token operator">=</span> BACKSPACE</pre></td></tr><tr><td data-num="6"></td><td><pre>TAB <span class="token operator">=</span> <span class="token string">'\ue004'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>CLEAR <span class="token operator">=</span> <span class="token string">'\ue005'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>RETURN <span class="token operator">=</span> <span class="token string">'\ue006'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ENTER <span class="token operator">=</span> <span class="token string">'\ue007'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>SHIFT <span class="token operator">=</span> <span class="token string">'\ue008'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>LEFT_SHIFT <span class="token operator">=</span> SHIFT</pre></td></tr><tr><td data-num="12"></td><td><pre>CONTROL <span class="token operator">=</span> <span class="token string">"\ue009"</span></pre></td></tr><tr><td data-num="13"></td><td><pre>LEFT_CONTROL <span class="token operator">=</span> CONTROL</pre></td></tr><tr><td data-num="14"></td><td><pre>ALT <span class="token operator">=</span> <span class="token string">"\ue00a"</span></pre></td></tr><tr><td data-num="15"></td><td><pre>LEFT_ALT <span class="token operator">=</span> ALT</pre></td></tr><tr><td data-num="16"></td><td><pre>PAUSE <span class="token operator">=</span> <span class="token string">"\ue00b"</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ESCAPE <span class="token operator">=</span> <span class="token string">"\ue00c"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>SPACE <span class="token operator">=</span> <span class="token string">"\ue00d"</span></pre></td></tr><tr><td data-num="19"></td><td><pre>PAGE_UP <span class="token operator">=</span> <span class="token string">"\ue00e"</span></pre></td></tr><tr><td data-num="20"></td><td><pre>PAGE_DOWN <span class="token operator">=</span> <span class="token string">"\ue00f"</span></pre></td></tr><tr><td data-num="21"></td><td><pre>END <span class="token operator">=</span> <span class="token string">"\ue010"</span></pre></td></tr><tr><td data-num="22"></td><td><pre>HOME <span class="token operator">=</span> <span class="token string">"\ue011"</span></pre></td></tr><tr><td data-num="23"></td><td><pre>LEFT <span class="token operator">=</span> <span class="token string">"\ue012"</span></pre></td></tr><tr><td data-num="24"></td><td><pre>ARROW_LEFT <span class="token operator">=</span> LEFT</pre></td></tr><tr><td data-num="25"></td><td><pre>UP <span class="token operator">=</span> <span class="token string">"\ue013"</span></pre></td></tr><tr><td data-num="26"></td><td><pre>ARROW_UP <span class="token operator">=</span> UP</pre></td></tr><tr><td data-num="27"></td><td><pre>RIGHT <span class="token operator">=</span> <span class="token string">"\ue014"</span></pre></td></tr><tr><td data-num="28"></td><td><pre>ARROW_RIGHT <span class="token operator">=</span> RIGHT</pre></td></tr><tr><td data-num="29"></td><td><pre>DOWN <span class="token operator">=</span> <span class="token string">"\ue015"</span></pre></td></tr><tr><td data-num="30"></td><td><pre>ARROW_DOWN <span class="token operator">=</span> DOWN</pre></td></tr><tr><td data-num="31"></td><td><pre>INSERT <span class="token operator">=</span> <span class="token string">"\ue016"</span></pre></td></tr><tr><td data-num="32"></td><td><pre>DELETE <span class="token operator">=</span> <span class="token string">"\ue017"</span></pre></td></tr><tr><td data-num="33"></td><td><pre>SEMICOLON <span class="token operator">=</span> <span class="token string">"\ue018"</span></pre></td></tr><tr><td data-num="34"></td><td><pre>EQUALS <span class="token operator">=</span> <span class="token string">"\ue019"</span></pre></td></tr><tr><td data-num="35"></td><td><pre>NUMPAD0 <span class="token operator">=</span> <span class="token string">"\ue01a"</span> <span class="token comment"># number pad keys</span></pre></td></tr><tr><td data-num="36"></td><td><pre>NUMPAD1 <span class="token operator">=</span> <span class="token string">"\ue01b"</span></pre></td></tr><tr><td data-num="37"></td><td><pre>NUMPAD2 <span class="token operator">=</span> <span class="token string">"\ue01c"</span></pre></td></tr><tr><td data-num="38"></td><td><pre>NUMPAD3 <span class="token operator">=</span> <span class="token string">"\ue01d"</span></pre></td></tr><tr><td data-num="39"></td><td><pre>NUMPAD4 <span class="token operator">=</span> <span class="token string">"\ue01e"</span></pre></td></tr><tr><td data-num="40"></td><td><pre>NUMPAD5 <span class="token operator">=</span> <span class="token string">"\ue01f"</span></pre></td></tr><tr><td data-num="41"></td><td><pre>NUMPAD6 <span class="token operator">=</span> <span class="token string">"\ue020"</span></pre></td></tr><tr><td data-num="42"></td><td><pre>NUMPAD7 <span class="token operator">=</span> <span class="token string">"\ue021"</span></pre></td></tr><tr><td data-num="43"></td><td><pre>NUMPAD8 <span class="token operator">=</span> <span class="token string">"\ue022"</span></pre></td></tr><tr><td data-num="44"></td><td><pre>NUMPAD9 <span class="token operator">=</span> <span class="token string">"\ue023"</span></pre></td></tr><tr><td data-num="45"></td><td><pre>MULTIPLY <span class="token operator">=</span> <span class="token string">"\ue024"</span></pre></td></tr><tr><td data-num="46"></td><td><pre>ADD <span class="token operator">=</span> <span class="token string">"\ue025"</span></pre></td></tr><tr><td data-num="47"></td><td><pre>SEPARATOR <span class="token operator">=</span> <span class="token string">"\ue026"</span></pre></td></tr><tr><td data-num="48"></td><td><pre>SUBTRACT <span class="token operator">=</span> <span class="token string">"\ue027"</span></pre></td></tr><tr><td data-num="49"></td><td><pre>DECIMAL <span class="token operator">=</span> <span class="token string">"\ue028"</span></pre></td></tr><tr><td data-num="50"></td><td><pre>DIVIDE <span class="token operator">=</span> <span class="token string">"\ue029"</span></pre></td></tr><tr><td data-num="51"></td><td><pre>F1 <span class="token operator">=</span> <span class="token string">"\ue031"</span></pre></td></tr><tr><td data-num="52"></td><td><pre>F2 <span class="token operator">=</span> <span class="token string">"\ue032"</span></pre></td></tr><tr><td data-num="53"></td><td><pre>F3 <span class="token operator">=</span> <span class="token string">"\ue033"</span></pre></td></tr><tr><td data-num="54"></td><td><pre>F4 <span class="token operator">=</span> <span class="token string">"\ue034"</span></pre></td></tr><tr><td data-num="55"></td><td><pre>F5 <span class="token operator">=</span> <span class="token string">"\ue035"</span></pre></td></tr><tr><td data-num="56"></td><td><pre>F6 <span class="token operator">=</span> <span class="token string">"\ue036"</span></pre></td></tr><tr><td data-num="57"></td><td><pre>F7 <span class="token operator">=</span> <span class="token string">"\ue037"</span></pre></td></tr><tr><td data-num="58"></td><td><pre>F8 <span class="token operator">=</span> <span class="token string">"\ue038"</span></pre></td></tr><tr><td data-num="59"></td><td><pre>F9 <span class="token operator">=</span> <span class="token string">"\ue039"</span></pre></td></tr><tr><td data-num="60"></td><td><pre>F10 <span class="token operator">=</span> <span class="token string">"\ue03a"</span></pre></td></tr><tr><td data-num="61"></td><td><pre>F11 <span class="token operator">=</span> <span class="token string">"\ue03b"</span></pre></td></tr><tr><td data-num="62"></td><td><pre>F12 <span class="token operator">=</span> <span class="token string">"\ue03c"</span></pre></td></tr><tr><td data-num="63"></td><td><pre>META <span class="token operator">=</span> <span class="token string">"\ue03d"</span></pre></td></tr><tr><td data-num="64"></td><td><pre>COMMAND <span class="token operator">=</span> <span class="token string">"\ue03d"</span></pre></td></tr></table></figure><h2 id="页面跳转"><a class="anchor" href="#页面跳转">#</a> 页面跳转</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 前进</span></pre></td></tr><tr><td data-num="2"></td><td><pre>driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 后退</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="https://asuhe.fun/categories/python/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Python之urllib库</title>
    <link href="https://asuhe.fun/2022/06/05/2022-06-05-Python%E4%B9%8Burllib%E5%BA%93/"/>
    <id>https://asuhe.fun/2022/06/05/2022-06-05-Python%E4%B9%8Burllib%E5%BA%93/</id>
    <published>2022-06-05T07:33:03.000Z</published>
    <updated>2022-06-26T15:02:53.675Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="urllib基本使用"><a class="anchor" href="#urllib基本使用">#</a> urllib 基本使用</h1><h2 id="简介"><a class="anchor" href="#简介">#</a> 简介</h2><p><code>urllib</code>  是 python 内置的一个网络库，我们可以直接导入该库，然后使用它去模拟浏览器向服务器发送请求以获取数据。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 导入请求对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="3"></td><td><pre>baseUrl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 通过 baseUrl 发送请求</span></pre></td></tr><tr><td data-num="5"></td><td><pre>respone <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 获取回的 respone 为一个对象，调用 read 方法逐字节读取响应数据</span></pre></td></tr><tr><td data-num="7"></td><td><pre>content <span class="token operator">=</span> respone<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># respone.readline () 仅读取一行内容</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># respone.readlines () 一行一行读取所有内容，返回一个字节流形式的数据的 list</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># content 是字节流的形式存储的数据，所以要转换为 utf-8 字符串</span></pre></td></tr><tr><td data-num="11"></td><td><pre>result <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># 输出最终的 html 文档</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="构造http请求头"><a class="anchor" href="#构造http请求头">#</a> 构造 http 请求头</h2><p>有时候网站会要求识别请求的 <code>UA</code>  来反爬，或者需要爬取登录后才能查看的数据时要携带 <code>cookie</code> 。我们可以使用 <code>urllib</code>  库里带的函数去构造出 <code>http</code>  请求头来绕过。</p><p><img data-src="https://s2.loli.net/2022/06/05/8NesfuQbFAcpWdC.png" alt="image-20220605155834239" /></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="2"></td><td><pre>baseUrl <span class="token operator">=</span> <span class="token string">'https://asuhe.fun'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 构造 http 请求头，携带 UA</span></pre></td></tr><tr><td data-num="4"></td><td><pre>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 将构造好的请求头封装进 Request 对象</span></pre></td></tr><tr><td data-num="8"></td><td><pre>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 发送请求</span></pre></td></tr><tr><td data-num="10"></td><td><pre>respone <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="handler构造请求头"><a class="anchor" href="#handler构造请求头">#</a> handler 构造请求头</h3><p>当我们需要使用 <code>动态cookie</code>  或者 <code>ip代理</code> 等高级功能时，上面构造的请求头已经无法满足。 <code>handler</code>  则可以实现这个功能。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 在上面代码的基础上，使用 handler 对象即可</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 1. 创建 handler 对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPHandler<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 2. 构建 opener 对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 3. 调用 opener 对象的 open 方法请求，传入 request 对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>respone <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="使用代理"><a class="anchor" href="#使用代理">#</a> 使用代理</h3><p>使用代理 ip 访问网站可以提高访问速度，突破网站访问的限制。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="2"></td><td><pre>baseUrl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36'</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 1. 创建 request 对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>baseUrl<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># 2. 创建 ProxyHandler 对象</span></pre></td></tr><tr><td data-num="9"></td><td><pre>proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment"># 设置代理 ip 和端口</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'110.110.110.110:996'</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>proxyHandler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>requers<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span>proxies <span class="token operator">=</span> proxies<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment"># 3. 创建 opener 对象</span></pre></td></tr><tr><td data-num="15"></td><td><pre>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxyHandler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment"># 4. 使用 open 方法访问</span></pre></td></tr><tr><td data-num="17"></td><td><pre>respone <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span></pre></td></tr></table></figure><p>使用代理池</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>proxiesPool <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'110.110.110.110:996'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'111.110.110.110:996'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'112.110.110.110:996'</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> random</pre></td></tr><tr><td data-num="7"></td><td><pre>proxies <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>proxiesPool<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="get和post请求的编码处理"><a class="anchor" href="#get和post请求的编码处理">#</a> get 和 post 请求的编码处理</h2><p>无论是 <code>get</code>  还是 <code>post</code> ，在发送前如果携带参数中有中文或者非 <code>utf-8</code>  字符，则都需要先编码，然后才能发送出去。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 处理单个参数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>baseUrl1 <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?wd='</span></pre></td></tr><tr><td data-num="5"></td><td><pre>query <span class="token operator">=</span> <span class="token string">'明日'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 编码单个参数</span></pre></td></tr><tr><td data-num="7"></td><td><pre>encoded <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>query<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span> <span class="token comment"># %E6%98%8E%E6%97%A5</span></pre></td></tr><tr><td data-num="9"></td><td><pre>respone1 <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl1 <span class="token operator">+</span> encoded<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># 处理多个参数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>baseUrl2 <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>querys <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token string">'wd'</span><span class="token punctuation">:</span><span class="token string">'明日'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'男'</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>querys<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>respone <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl2 <span class="token operator">+</span> data<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="发送post请求"><a class="anchor" href="#发送post请求">#</a> 发送 post 请求</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse</pre></td></tr><tr><td data-num="3"></td><td><pre>baseUrl <span class="token operator">=</span> <span class="token string">'https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">'from'</span><span class="token punctuation">:</span> <span class="token string">'en'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token string">'to'</span><span class="token punctuation">:</span> <span class="token string">'zh'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string">'query'</span><span class="token punctuation">:</span> <span class="token string">'spider'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token string">'transtype'</span><span class="token punctuation">:</span> <span class="token string">'realtime'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token string">'simple_means_flag'</span><span class="token punctuation">:</span> <span class="token string">'3'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token string">'sign'</span><span class="token punctuation">:</span> <span class="token string">'63766.268839'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token string">'122223c8769458b6eb3613362ad8693e'</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'common'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>params <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment"># post 请求的参数必须编码为字节流的形式</span></pre></td></tr><tr><td data-num="16"></td><td><pre>params <span class="token operator">=</span> params<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment"># urllib.request.Request 的 data 参数即为 post 请求携带的参数</span></pre></td></tr><tr><td data-num="18"></td><td><pre>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> baseUrl<span class="token punctuation">,</span>data <span class="token operator">=</span> params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>respone <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="json处理"><a class="anchor" href="#json处理">#</a> json 处理</h3><p>有时候我们请求网页返回来的是 <code>json</code>  格式的数据，这时我们要使用 <code>json</code>  模块去解析数据</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> json</pre></td></tr><tr><td data-num="2"></td><td><pre>jsonData <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment"># data 为响应的 json 数据</span></pre></td></tr></table></figure><h2 id="异常处理"><a class="anchor" href="#异常处理">#</a> 异常处理</h2><p>若通过 <code>urllib</code>  发送请求产生异常，通常为两种：一种是 <code>URLError</code> ，另一种是 <code>HTTPError</code> 。 <code>URLError</code>  当请求的主机地址错误时会发生， <code>HTTPError</code>  例如当无法连接到主机时，请求携带的参数错误时，都会产生该错误。 <code>HTTPError</code>  是 <code>URLError</code>  的子类。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment"># code</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment"># something</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment"># something</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="https://asuhe.fun/categories/python/"/>
    
    
    <category term="tools" scheme="https://asuhe.fun/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Webpack基础(三)</title>
    <link href="https://asuhe.fun/2022/05/07/2022-05-07-Webpack%E5%9F%BA%E7%A1%80(%E4%B8%89)/"/>
    <id>https://asuhe.fun/2022/05/07/2022-05-07-Webpack%E5%9F%BA%E7%A1%80(%E4%B8%89)/</id>
    <published>2022-05-07T12:44:02.000Z</published>
    <updated>2022-05-17T01:49:27.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="webpack中的plugin"><a class="anchor" href="#webpack中的plugin">#</a> webpack 中的 plugin</h1><p><code>Webpack</code>  的另一个核心是 <code>Plugin</code> ， <code>Loader</code>  是用于特定的模块类型进行转换用于处理资源文件，而 <code>Plugin</code>  可以用于执行更加广泛的任务，比如打包优化、资源管理、环境变量注入等。例如：生成 html 文件、将 js/css 文件插入 html 文件中。</p><h2 id="cleanwebpackplugin"><a class="anchor" href="#cleanwebpackplugin">#</a> CleanWebpackPlugin</h2><p><code>CleanWebpackPlugin</code>  的作用就是每次修改了一些配置，重新打包时，自动删除 dist 文件夹。</p><p>安装 <code>CleanWebpackPlugin</code> ：</p><pre><code class="language-sh">npm install clean-webpack-plugin -D</code></pre><p>配置 <code>CleanWebpackPlugin</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.conifg.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> CleanWebpackPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="htmlwebpackplugin"><a class="anchor" href="#htmlwebpackplugin">#</a> HtmlWebpackPlugin</h2><p><code>HtmlWebpackPlugin</code>  的作用就是用于生成 <code>index.html</code>  入口文件。</p><p>安装 <code>HtmlWebpackPlugin</code> ：</p><pre><code class="language-sh">npm install html-webpack-plugin -D</code></pre><p>配置 <code>HtmlWebpackPlugin</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            title<span class="token operator">:</span> <span class="token string">"Asuhe"</span> <span class="token comment">// 给 index.html 文件添加 title 标签内容</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token comment">// 指定我们要使用的模块所在的路径</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token comment">/*</pre></td></tr><tr><td data-num="9"></td><td><pre>            template: "./public/index.html"</pre></td></tr><tr><td data-num="10"></td><td><pre>            */</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>有时候我们想使用自己的模板而不用默认的 <code>html</code>  模板，这时我们就需要修改模板 <code>index.html</code>  文件。<strong>在 <code>html-webpack-plugin</code>  的源码中，有一个 default_index.ejs 模块</strong>，我们若要定义自己的 <code>html</code>  模板只需要用 <code>ejs</code>  的语法修改该文件即可。</p><h2 id="defineplugin"><a class="anchor" href="#defineplugin">#</a> DefinePlugin</h2><p><code>DefinePlugin</code>  是用于定义一些项目中的全局变量的，项目中所有文件都可以读取这些全局变量。它是一个 <code>webpack</code>  内置的插件，不需要单独安装</p><p>配置 <code>DefinePlugin</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> DefinePlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">'"./"'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="copywebpackplugin"><a class="anchor" href="#copywebpackplugin">#</a> CopyWebpackPlugin</h2><p><code>CopyWebpackPlugin</code>  能够实现文件复制功能。使用 <code>CopyWebpackPlugin</code>  可以将指定目录下的文件复制到指定位置</p><p>安装 <code>CopyWebpackPlugin</code> ：</p><pre><code class="language-sh">npm install copy-webpack-plugin -D</code></pre><p>配置 <code>CopyWebpackPlugin</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> plugin</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            patterns<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                    from<span class="token operator">:</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token comment">// 设置从哪一个源中开始复制</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                    <span class="token comment">//to: "xxx" 复制到的位置，可以省略，会默认复制到打包的目录下</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    globOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 设置一些额外的选项，其中可以编写需要忽略的文件</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                        ignore<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                            <span class="token string">'**/.DS_Store'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                            <span class="token string">'**/index.html'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                        <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="webpack中的mode"><a class="anchor" href="#webpack中的mode">#</a> webpack 中的 mode</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Webpack" scheme="https://asuhe.fun/categories/Webpack/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Webpack基础(二)</title>
    <link href="https://asuhe.fun/2022/05/07/2022-05-07-Webpack%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
    <id>https://asuhe.fun/2022/05/07/2022-05-07-Webpack%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</id>
    <published>2022-05-07T02:28:26.000Z</published>
    <updated>2022-06-26T13:56:12.183Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="postcss工具"><a class="anchor" href="#postcss工具">#</a> PostCSS 工具</h1><h2 id="什么是postcss"><a class="anchor" href="#什么是postcss">#</a> 什么是 PostCSS</h2><p><code>PostCSS</code>  是一个<strong>通过 JavaScript 来转换样式的工具</strong>，这个工具可以帮助我们进行一些 CSS 的转换和适配，比如自动添加浏览器前缀、css 样式的重置。但是实现这些工具，我们需要借助于 PostCSS 对应的插件。<strong>主要用来处理浏览器兼容性问题。</strong></p><p>安装 PostCss：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> postcss postcss-cli -D</pre></td></tr></table></figure><p>使用：在 <code>webpack</code>  的配置文件中编写相应的 <code>loader</code>  规则，或者直接在命令行中使用。</p><p>因为 <code>postcss</code>  是独立于 <code>webpack</code>  的，所以在 <code>webpack.config.js</code>  中配置 <code>postcss</code>  前需要安装相应 <code>loader</code> ：</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> postcss-loader -D</pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> modules -> rules -> use</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    options<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        postcssOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="autoprefixer"><a class="anchor" href="#autoprefixer">#</a> autoprefixer</h2><p><code>autoprefixer</code>  可以帮助我们生成兼容各种浏览器的 <code>css</code>  代码，它的主要作用就是给 <code>css</code>  代码添加上相应的浏览器前缀。如：</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* autoprefixer 处理前 */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">:fullscreen</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.content</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* autoprefixer 处理后 */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">:-ms-fullscreen</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token selector">:fullscreen</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token selector">.content</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>安装 <code>autoprefixer</code> ：</p><pre><code class="language-sh">npm install autoprefixer -D</code></pre><p>单独配置 <code>autoprefixer</code>  在 <code>postcss.config.js</code>  中配置：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// postcss.config.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="postcss-preset-env"><a class="anchor" href="#postcss-preset-env">#</a> postcss-preset-env</h2><p>postcss-preset-env 也是一个 postcss 的插件。它可以帮助我们将一些现代的 CSS 特性，转成大多数浏览器认识的 CSS，并且会根据目标浏览器或者运行时环境添加所需的 polyfill。也包括会自动帮助我们添加 autoprefixer（所以相当于已经内置了 autoprefixer）。</p><p>安装 <code>postcss-preset-env</code> ：</p><pre><code class="language-sh">npm install postcss-preset-env -D</code></pre><p>配置 <code>postcss-preset-env</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// postcss.config.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="加载和处理其它资源"><a class="anchor" href="#加载和处理其它资源">#</a> 加载和处理其它资源</h1><h2 id="file-loader"><a class="anchor" href="#file-loader">#</a> file-loader</h2><p><code>file-loader</code>  的作用就是帮助我们处理 <code>import/require()</code>  方式引入的一个文件资源，并且会将它放到我们输出的文件夹中。</p><p>安装 <code>file-loader</code> ：</p><pre><code class="language-sh">npm install file-loader -D</code></pre><p>配置 <code>file-loader</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> modules -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    use<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        loader<span class="token operator">:</span> <span class="token string">"file-loader"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>有时候我们处理后的文件名称按照一定的规则进行显示： 比如保留原来的文件名、扩展名，同时为了防止重复，包含一个 hash 值等。 这个时候我们可以使用 <code>PlaceHolders</code>  来完成，webpack 给我们提供了大量的 <code>PlaceHolders</code>  来显示不同的内容。</p><p>常用的 placeholder：</p><ul><li>[ext]： 处理文件的扩展名</li><li>[name]：处理文件的名称</li><li>[hash]：文件的内容，使用 MD4 的散列函数处理，生成的一个 128 位的 hash 值（32 个十六进制）</li><li>[contentHash]：在 file-loader 中和 [hash] 结果是一致的（在 webpack 的一些其他地方不一样，后面会讲到）</li><li>[hash:&lt;length&gt;]：截图 hash 的长度，默认 32 个字符太长了</li><li>[path]：文件相对于 webpack 配置文件的路径</li></ul><p>例如将图片文件输出到 <code>/img</code>  下，并且用 <code>文件原名 + hash值前8位 + 扩展名</code> 命名打包好的图片文件。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> modules -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    use<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        loader<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 写法一</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        options<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            name<span class="token operator">:</span> <span class="token string">"img/[name].[hash:8].[ext]"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 写法二</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">/*</pre></td></tr><tr><td data-num="12"></td><td><pre>        options: &#123;</pre></td></tr><tr><td data-num="13"></td><td><pre>            name: "img/[name].[hash:8].[ext]",</pre></td></tr><tr><td data-num="14"></td><td><pre>            outputPath: "img"</pre></td></tr><tr><td data-num="15"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="16"></td><td><pre>        */</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="url-loader"><a class="anchor" href="#url-loader">#</a> url-loader</h2><p><code>url-loader</code>  和 <code>file-loader</code>  的工作方式是相似的，但是可以将较小的文件，转成 base64 的 URI。</p><p>安装 <code>url-loader</code> ：</p><pre><code class="language-sh">npm install url-loader -D</code></pre><p>配置 <code>url-loader</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> modules -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    use<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        loader<span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        options<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            limit<span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 仅将 100Kb 一下的图片转换为 base64</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            name<span class="token operator">:</span> <span class="token string">"[name].[hash:8].[ext]"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            outputPath<span class="token operator">:</span> <span class="token string">"img"</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="asset-module-type"><a class="anchor" href="#asset-module-type">#</a> asset module type</h1><h2 id="介绍"><a class="anchor" href="#介绍">#</a> 介绍</h2><p>在 webpack5 之前，加载非 <code>javascript</code>  或 <code>json</code>  资源我们需要使用一些 loader，比如 <code>raw-loader 、url-loader、file-loader</code> 。<br />在 webpack5 之后，我们可以直接使用资源模块类型（asset module type），来替代上面的这些 loader。</p><p>资源模块类型 (asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p><ul><li>passet/resource 发送一个单独的文件并导出 URL。之前通过使用 file-loader 实现</li><li>passet/inline 导出一个资源的 data URI。之前通过使用 url-loader 实现</li><li>passet/source 导出资源的源代码。之前通过使用 raw-loader 实现</li><li>passet 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源 体积限制实现</li></ul><h2 id="使用"><a class="anchor" href="#使用">#</a> 使用</h2><p>使用 <code>asset module type</code>  我们可以在 <code>rules</code>  中配置：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> module -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|svg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    type<span class="token operator">:</span> <span class="token string">"asset/resource"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>自定义文件输出路径和文件名：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> output</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 方法一</span></pre></td></tr><tr><td data-num="4"></td><td><pre>output<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    filename<span class="token operator">:</span> <span class="token string">"js/bundle.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    path<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    assetModuleFilename<span class="token operator">:</span> <span class="token string">"img/[name].[hash:6][ext]"</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js -> module -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 方法二 在 rule 中添加一个 generator 属性并设置 filename</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|svg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    type<span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    generator<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        filename<span class="token operator">:</span> <span class="token string">"img/[name].[hash:6][ext]"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 实现 limit 效果</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">/*</pre></td></tr><tr><td data-num="12"></td><td><pre>    parser: &#123;</pre></td></tr><tr><td data-num="13"></td><td><pre>        dataUrlCondition: &#123;</pre></td></tr><tr><td data-num="14"></td><td><pre>            maxSize: 100 * 1024</pre></td></tr><tr><td data-num="15"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="16"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="17"></td><td><pre>    */</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>处理字体文件，用 <code>webpack5</code>  中的 <code>asset/resource</code>  来替代 <code>file-loader</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// // webpack.config.js -> module -> rules</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(woff2?|eot|ttf)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    type<span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    generator<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        filename<span class="token operator">:</span> <span class="token string">"font/[name].[hash:6][ext]"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Webpack" scheme="https://asuhe.fun/categories/Webpack/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础(四)</title>
    <link href="https://asuhe.fun/2022/05/02/2022-05-02-TypeScript%E5%9F%BA%E7%A1%80(%E5%9B%9B)/"/>
    <id>https://asuhe.fun/2022/05/02/2022-05-02-TypeScript%E5%9F%BA%E7%A1%80(%E5%9B%9B)/</id>
    <published>2022-05-02T08:26:03.000Z</published>
    <updated>2022-05-03T14:45:46.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数"><a class="anchor" href="#函数">#</a> 函数</h1><p>和 JavaScript 一样，TypeScript 函数可以创建有名字的函数和匿名函数，但是在此基础上<strong> Typescript 支持函数重载</strong>。</p><p><strong>TypeScript 里的每个函数参数都是必须的。</strong> 这不是指不能传递  <code>null</code>  或  <code>undefined</code>  作为参数，而是说编译器检查用户是否为每个参数都传入了值。编译器还会假设只有这些参数会被传递进函数。 <strong>简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。</strong></p><p>JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是  <code>undefined</code> 。 <strong>在 TypeScript 里我们可以在参数名旁使用  <code>?</code>  实现可选参数的功能。</strong> 比如，我们想让  <code>name</code>  是可选的：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>name<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token string">'asuhe'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="剩余参数"><a class="anchor" href="#剩余参数">#</a> 剩余参数</h2><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用  <code>arguments</code>  来访问所有传入的参数。</p><p>在 TypeScript 里，你可以把所有参数收集到一个变量里：<br />剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（  <code>...</code> ）后面给定的名字，你可以在函数体内使用这个数组。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="函数重载"><a class="anchor" href="#函数重载">#</a> 函数重载</h2><p>函数重载：函数名相同，而形参不同的多个函数<br />在 JS 中，由于弱类型的特点和形参与实参可以不匹配，是没有函数重载这一说的 但在 TS 中，与其它面向对象的语言 (如 Java) 就存在此语法</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>函数重载：函数名相同，而形参不同的多个函数</pre></td></tr><tr><td data-num="3"></td><td><pre>需求：我们有一个 add 函数，它可以接收 2 个 string 类型的参数进行拼接，也可以接收 2 个 number 类型的参数进行相加 </pre></td></tr><tr><td data-num="4"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 重载函数声明</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 定义函数实现</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 x + y</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// console.log(add(1, 'a')) // error</span></pre></td></tr></table></figure><h2 id="命名空间"><a class="anchor" href="#命名空间">#</a> 命名空间</h2><p><code>Typescript</code>  还支持类似于 <code>C++</code>  的命名空间，<strong>它最主要的作用就是防止变量冲突</strong>。每个命名空间都必须处于顶级作用域内，命名空间内的变量或函数需要对外暴露时仅需要在前面加上 <code>export</code>  关键字。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// index.ts</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">namespace</span> <span class="token constant">K</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"aushe"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">namespace</span> <span class="token constant">N</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">export</span> <span class="token keyword">const</span> name  <span class="token operator">=</span> <span class="token string">"sphinx"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">K</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// asuhe</span></pre></td></tr><tr><td data-num="9"></td><td><pre>consoe<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// sphinx</span></pre></td></tr></table></figure><h1 id="泛型"><a class="anchor" href="#泛型">#</a> 泛型</h1><p><strong>泛型</strong>指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。</p><p>下面创建一个函数，实现功能：根据指定的数量  <code>count</code>  和数据  <code>value</code>  , 创建一个包含  <code>count</code>  个  <code>value</code>  的数组 不用泛型的话，这个函数可能是下面这样：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">createArray</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">createArray</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 不会提示 split 函数，编辑器无法推断 arr [0] 就是 string</span></pre></td></tr></table></figure><p>但我们如果使用泛型，那么就可以解决这个问题。代码如下：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">createArray</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 能够提示 split 函数可以使用</span></pre></td></tr></table></figure><p>一个函数还可以定义多个泛型参数，<strong>泛型参数的命名同其它变量一样，但是惯例来说需要大写且仅一个字母</strong>：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">swap</span> <span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">></span></span></span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token generic-function"><span class="token function">swap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="泛型接口"><a class="anchor" href="#泛型接口">#</a> 泛型接口</h2><p>在定义接口时，为接口中的属性或方法定义泛型类型</p><p>在使用接口时，再指定具体的泛型类型</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">IbaseCRUD <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function-variable function">getById</span><span class="token operator">:</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">//id 主键自增</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 姓名</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 年龄</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UserCRUD</span> <span class="token keyword">implements</span> <span class="token class-name">IbaseCRUD <span class="token operator">&lt;</span>User<span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  data<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  </pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token function">add</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>user<span class="token punctuation">,</span> id<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存user'</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>id<span class="token operator">===</span>id<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">const</span> userCRUD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserCRUD</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>userCRUD<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>userCRUD<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'tom2'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userCRUD<span class="token punctuation">.</span>data<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="泛型类"><a class="anchor" href="#泛型类">#</a> 泛型类</h2><p>在定义类时，为类中的属性或方法定义泛型类型 在创建类的实例时，再指定特定的泛型类型</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  zeroValue<span class="token operator">:</span> <span class="token constant">T</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>myGenericNumber<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">let</span> myGenericString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>myGenericString<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token string">'abc'</span></pre></td></tr><tr><td data-num="14"></td><td><pre>myGenericString<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myGenericString<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myGenericString<span class="token punctuation">.</span>zeroValue<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myGenericNumber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myGenericNumber<span class="token punctuation">.</span>zeroValue<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="泛型约束"><a class="anchor" href="#泛型约束">#</a> 泛型约束</h2><p>如果我们直接对一个泛型参数取  <code>length</code>  属性，会报错，因为这个泛型根本就不知道它有这个属性</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 没有泛型约束</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span> <span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// error</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>我们可以使用泛型约束来实现</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 指定泛型约束</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn2</span> <span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengthwise<span class="token operator">></span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 我们需要传入符合约束类型的值，必须包含必须 `length` 属性：</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">//error  number 没有 length 属性</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Typescript" scheme="https://asuhe.fun/categories/Typescript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Webpack基础(一)</title>
    <link href="https://asuhe.fun/2022/05/02/2022-05-02-Webpack%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>https://asuhe.fun/2022/05/02/2022-05-02-Webpack%E5%9F%BA%E7%A1%80(%E4%B8%80)/</id>
    <published>2022-05-02T08:25:28.000Z</published>
    <updated>2022-05-07T02:58:31.455Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="webpack简介"><a class="anchor" href="#webpack简介">#</a> webpack 简介</h1><p>官方说，webpack is a static module bundler for modern JavaScript applications.</p><p>翻译过来：webpack 是一个静态的模块化打包工具，为现代的 JavaScript 应用程序；</p><ul><li>我们来对上面的解释进行拆解： p 打包 bundler：webpack 可以将帮助我们进行打包，所以它是一个打包工具</li><li>静态的 static：这样表述的原因是我们最终可以将代码打包成最终的静态资源（部署到静态服务器）；</li><li>模块化 module：webpack 默认支持各种模块化开发，ES Module、CommonJS、AMD 等；</li><li>现代的 modern：我们前端说过，正是因为现代前端开发面临各种各样的问题，才催生了 webpack 的出现和发展；</li></ul><h1 id="基础安装"><a class="anchor" href="#基础安装">#</a> 基础安装</h1><h2 id="webpack和webpack-cli"><a class="anchor" href="#webpack和webpack-cli">#</a> webpack 和 webpack-cli</h2><p><code>webpack</code>  是执行打包的本体，它原生只支持打包 <code>Javascript</code>  和 <code>Json</code>  文件，若需要打包如 <code>html</code> 、 <code>css</code> 、 <code>image</code>  等资源则要安装相应的 <code>loader</code> 。</p><p><code>webpack-cli</code>  是调用 <code>webpack</code>  的一种手段。通常我们调用 <code>webpack</code>  都是直接在命令行里调用的，而这正是 <code>webpack-cli</code>  的功劳。如果没有安装 <code>webpack-cli</code>  那么我们将不能直接从命令行里读取参数。它起到的是一个传递命令行参数到 <code>webpack</code>  中的功能。实际上，当我们使用 Vue 或 React 的脚手架时，我们并没有安装 <code>webpack-cli</code>  这个东西。Vue 有 <code>vue-cli</code>  而 React 有 <code>creat-react-app</code> ，它们替代了 <code>webpack-cli</code>  传递命令行参数到 <code>webpack</code>  的功能。</p><h2 id="安装"><a class="anchor" href="#安装">#</a> 安装</h2><pre><code class="language-sh"># 全局安装 webpack5 和 webpack-cli4npm install -g webpack@5 webpack-cli@4# 局部安装npm install -D webpack@5 webpack-cli@4</code></pre><h1 id="基础使用"><a class="anchor" href="#基础使用">#</a> 基础使用</h1><p><strong>当我们直接使用 <code>webpack</code>  命令时，调用的是我们全局安装的 <code>webpack</code> 。</strong></p><p>如果我们需要使用当前项目中的 <code>webpack</code>  版本打包项目，有三种方式分别是：</p><p>第一种直接找到本地安装路径，调用</p><pre><code class="language-sh"># 直接找到node_modules/.bin下的webpack文件打包node_modules\.bin\webpack</code></pre><p>第二种使用 <code>npx</code></p><pre><code class="language-sh"># 使用npx，npx可以自动去node_modules文件夹下寻找文件npx webpack</code></pre><p>第三种在配置文件 <code>package.json</code>  中配置命令，该方法最常用</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 在配置文件 package.json 的 "script" 里的配置命令</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span> <span class="token comment">//package.json 会优先在本地 node_modules 中寻找，若找不到则会往上查找全局环境下的 webpack</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><pre><code class="language-sh"># 调用scripts里的命令npm run build</code></pre><h2 id="配置packagejson"><a class="anchor" href="#配置packagejson">#</a> 配置 package.json</h2><p>当我们使用 <code>webpack</code>  打包文件时，它会默认从当前目录下找到 <code>src</code>  文件夹下的 <code>index.js</code> 。所有引入或关联到 <code>index.js</code>  里的资源都会被 <code>webpack</code>  打包，否则不会被打包。</p><p>默认打包的文件会生成在当前目录的 <code>dist</code>  文件夹下，名称为 <code>main.js</code> 。</p><p><img data-src="https://s2.loli.net/2022/05/03/9EKh7lmZjntfxGq.png" alt="image-20220503175000507" /></p><p>在通常情况下，webpack 需要打包的项目是非常复杂的，并且我们需要一系列的配置来满足要求，默认配置必然是不可以的。</p><p>我们可以在根目录下创建一个 <code>webpack.config.js</code>  文件，来作为 <code>webpack</code>  的配置文件：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求：将入口文件改为 main.js ，输出文件改为 bundle.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 方法一 常用方法</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// webpack.config.js</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 导出配置信息</span></pre></td></tr><tr><td data-num="7"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>entry<span class="token operator">:</span> <span class="token string">"./scr/main.js"</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件更改为 main.js</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的名称更改为 bundle.js</span></pre></td></tr><tr><td data-num="11"></td><td><pre>         path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./dist"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><pre><code class="language-sh"># 方法二npx webpack --entry ./src/main.js --output-path ./build</code></pre><p><strong>默认情况下 <code>webpack</code>  从 <code>webpack.config.js</code>  里读取配置</strong>，当我需要更改 <code>webpack</code>  读取配置的文件时，可以通过 <code>--config</code>  来指定配置文件</p><pre><code class="language-sh"># 指定 wk.config.js 为 webpack 的配置文件webpack --config wk.config.js</code></pre><p>或者通过 <code>package.json</code>  指定</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// package.json</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --config wk.config.js"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="配置loader"><a class="anchor" href="#配置loader">#</a> 配置 Loader</h2><p>开头我们说过， <code>webpack</code>  原生只支持打包 <code>javascript</code>  文件和 <code>json</code>  文件。当我们需要打包其它资源时，就要配置相应的 <code>loader</code>  来支持，否则会报错。</p><h3 id="css-loader"><a class="anchor" href="#css-loader">#</a> css-loader</h3><p>使用 <code>loader</code>  前我们需要安装好 <code>loader</code> 。安装 <code>css-loader</code> ：</p><pre><code class="language-sh">npm install css-loader -D</code></pre><p>使用 <code>loader</code>  通常有三种方式，分别是：</p><ul><li>内联方式</li><li>cli 方式</li><li>配置文件方式</li></ul><h4 id="内联方式"><a class="anchor" href="#内联方式">#</a> 内联方式</h4><p>内联方式就是在引入的样式前加上使用的 loader，并且使用 <code>!</code>  分割每个 <code>loader</code> 。这种方式只能作用在当前文件下，若其它文件下也引入了 css 文件则需要再次配置。所以不常使用。</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//index.js 中引入 css 文件并使用 css-loader 和 style-loader</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token string">"style-loader!css-loader../css/index.css"</span> <span class="token comment">// 在路径前面加上 loader 名称</span></pre></td></tr></table></figure><h4 id="cli方式"><a class="anchor" href="#cli方式">#</a> cli 方式</h4><p>在 <code>webpack5</code>  的文档中已经没有了 <code>--module-bind</code>  命令，所以 <code>webpack5</code>  不支持该模式。具体配置方式可查找<span class="exturl" data-url="aHR0cHM6Ly92NC53ZWJwYWNrLmRvY3NjaGluYS5vcmcvY29uY2VwdHMv"> webpack4 官方文档</span></p><h4 id="配置文件方式"><a class="anchor" href="#配置文件方式">#</a> 配置文件方式</h4><p>该方式是最常见的 <code>loader</code>  使用方式。其意思是在我们的 <code>webpack.config.js</code>  文件中写明配置信息。在该文件暴露的对象中，使用 <code>module.rules</code>  来配置 <code>loader</code></p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 导出配置信息</span></pre></td></tr><tr><td data-num="4"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>entry<span class="token operator">:</span> <span class="token string">"./scr/main.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./dist"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    rules<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//rules 属性对应的值是一个数组：[Rule] 。数组中存放的是一个个的 Rule，Rule 是一个对象，对象中可以设置多个属性:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 用于对 resource（资源）进行匹配的，通常会设置成正则表达式</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">//loader:"css-loader" // 写法一</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">//use: ["css-loader"] // 写法二</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 写法三</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    use<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 对应的值时一个数组：[UseEntry] 。UseEntry 是一个对象，可以通过对象的属性来设置一些其他属性:</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span><span class="token string">"css-loader"</span><span class="token punctuation">,</span>options<span class="token operator">:</span><span class="token string">'xxx'</span><span class="token punctuation">&#125;</span> <span class="token comment">// 完整写法，options 可以对 css-loader 传入参数</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 若无需传参则可简写为写法二</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 若处理该文件仅使用一个 loader，可简写为写法一</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token comment">//loader:'css-loader' 写法四。 loader 属性： Rule.use: [&#123;loader&#125; ] 的简写。</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="style-loader"><a class="anchor" href="#style-loader">#</a> style-loader</h3><p>当我们把 css 文件打包好后，css 文件并不会生效。此时我们还需要使用 <code>style-loader</code>  将打包好的 css 插入页面。安装 <code>style-loader</code> ：</p><pre><code class="language-sh">npm install style-loader -D</code></pre><p>配置 <code>style-loader</code> 。这里需要注意的是，使用多个 <code>loader</code>  处理同一个资源时， <code>loader</code>  的调用顺序是从后往前的。所以 <code>loader</code>  的顺序需要将 <code>style-loader</code>  放在最后。配置书写如下：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>rules<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            use<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 然后再插入页面</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">&#125;</span> <span class="token comment">// 先将 css 文件解析打包</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="less-loader"><a class="anchor" href="#less-loader">#</a> less-loader</h3><p>打包 <code>less</code>  文件的步骤也和上面的文件同理，但是 <code>less-loader</code>  本身并不能处理 <code>less</code>  文件，所以安装时还需要另外安装 <code>less</code>  处理工具， <code>less-loader</code>  仅仅只是调用了 <code>less</code>  处理工具而已。安装 <code>less</code>  处理工具和 <code>less-loader</code> ：</p><pre><code class="language-sh">npm install less -D  # 安装less处理工具npm install less-loader -D # 安装less-loader</code></pre><p>配置 <code>less-loader</code> ：</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// webpack.config.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    rules<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            use<span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="browserslist"><a class="anchor" href="#browserslist">#</a> browserslist</h3><p>开发中我们经常需要去处理浏览器兼容性问题，我们不可能针对每个浏览器一个一个去配置兼容性。通常的做法是根据浏览器的市场占有率去选择性兼容。在开发中有专门的工具如 <code>autoprofixer</code> 、 <code>PostCss</code> 、 <code>postcss-preset-env</code>  去帮助我们自动生成兼容代码，而这里我们首先要解决的是关于浏览器的市场占有率等信息如何自动获取。<strong> <code>browserslist</code>  就是帮助我们获取浏览器占有率，指定要配置哪些浏览器的工具。它可以让我们在不同的前端工具之间，共享目标浏览器和 Node.js 版本的配置。</strong></p><p>安装 <code>browserslist</code> ：</p><pre><code class="language-sh">npm install browserslist -D</code></pre><p>配置 <code>browserslist</code> 。配置它有两种方式，一是通过 <code>package.json</code> ，二是单独编写 <code>.browserslistrc</code>  文件配置当有该文件时会默认读取该文件中的配置。</p><p><code>package.json</code>  配置：</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token string">"last 2 version"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token string">"not dead"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token string">"> 1%"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><p>我们还可以通过编辑 <code>.browserslistrc</code>  文件去配置：</p><pre><code>last 2 versionnot dead&gt; 1%</code></pre><p>Browserslist 编写规则：</p><ul><li>defaults：Browserslist 的默认浏览器（&gt; 0.5%, last 2 versions, Firefox ESR, not dead）</li><li>5%：通过全局使用情况统计信息选择的浏览器版本。 &gt;=，&lt; 和 &lt;= 工作过<ul><li>5% in US：使用美国使用情况统计信息。它接受两个字母的国家 / 地区代</li><li>5% in alt-AS：使用亚洲地区使用情况统计信息。有关所有区域代码的列表，请参见 caniuse-lite/data/regions</li><li>5% in my stats：使用自定义用法数据</li><li>5% in browserslist-config-mycompany stats：使用 来自的自定义使用情况数据 browserslist-config-mycompany/browserslist-stats.json</li><li>cover 99.5%：提供覆盖率的最受欢迎的浏览器</li><li>cover 99.5% in US：与上述相同，但国家 / 地区代码由两个字母组成</li><li>cover 99.5% in my stats：使用自定义用法数据。</li></ul></li><li>dead：24 个月内没有官方支持或更新的浏览器</li><li>last 2 versions：每个浏览器的最后 2 个大版本<ul><li>last 2 Chrome versions：最近 2 个版本的 Chrome 浏览器</li><li>last 2 major versions 或 last 2 iOS major versions：最近 2 个主要版本的所有次要 / 补丁版本</li></ul></li><li>node 10 和 node 10.4：选择最新的 Node.js10.x.x 或 10.4.x 版本</li><li>current node：Browserslist 现在使用的 Node.js 版本</li><li>maintained node versions：所有 Node.js 版本，仍由 Node.js Foundation 维护</li><li>iOS 7：直接使用 iOS 浏览器版本 7<ul><li>Firefox &gt; 20：Firefox 的版本高于 20 &gt;=，&lt; 并且 &lt;= 也可以使用。它也可以与 Node.js 一起使用</li><li>ie 6-8：选择一个包含范围的版本</li><li>Firefox ESR：最新的 [Firefox ESR] 版本</li><li>PhantomJS 2.1 和 PhantomJS 1.9：选择类似于 PhantomJS 运行时的 Safari 版本</li></ul></li><li>extends browserslist-config-mycompany：从 browserslist-config-mycompanynpm 包中查询</li><li>supports es6-module：支持特定功能的浏览器。 es6-module 这是 “我可以使用” 页面 feat 的 URL 上的参数。有关所有可用功能的列表，请参见 。caniuse- lite/data/features</li><li>browserslist config：在 Browserslist 配置中定义的浏览器。在差异服务中很有用，可用于修改用户的配置，例如 browserslist config and supports es6-module</li><li>since 2015 或 last 2 years：自 2015 年以来发布的所有版本（since 2015-03 以及 since 2015-03-10)</li><li>unreleased versions 或 unreleased Chrome versions：Alpha 和 Beta 版本</li><li>not ie &lt;= 8：排除先前查询选择的浏览器</li></ul><p>根据上述编写规则，我们编写了多个条件之后，多个条件之间是什么关系呢？</p><p><img data-src="https://s2.loli.net/2022/05/07/2rFqXUIKdk5T1NY.png" alt="image-20220507105656473" /></p><p>刚刚我们在 <code>.browserslistrc</code>  中书写的规则没有添加关键字，默认为 <code>or</code>  的关系</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Webpack" scheme="https://asuhe.fun/categories/Webpack/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础(三)</title>
    <link href="https://asuhe.fun/2022/05/01/2022-05-01-TypeScript%E5%9F%BA%E7%A1%80(%E4%B8%89)/"/>
    <id>https://asuhe.fun/2022/05/01/2022-05-01-TypeScript%E5%9F%BA%E7%A1%80(%E4%B8%89)/</id>
    <published>2022-05-01T14:08:50.000Z</published>
    <updated>2022-05-02T10:01:12.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类"><a class="anchor" href="#类">#</a> 类</h1><p><code>typescript</code>  里的类和 <code>javascript</code>  里的类基本一样。 <code>typerscript</code>  扩展了类，它可以通过先声明的方式限制实例属性的类型，并且还引入了类似 <code>C++</code> 、 <code>Java</code>  的继承权限设定，拥有 <code>public</code> 、 <code>protect</code> 、 <code>private</code>  三种修饰符。<strong>若不声明权限则默认为 <code>public</code> </strong></p><table><thead><tr><th>修饰符</th><th>外部访问</th><th>派生类访问</th><th>自身访问</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>×</td><td>√</td><td>√</td></tr><tr><td>private</td><td>×</td><td>×</td><td>√</td></tr></tbody></table><h2 id="public"><a class="anchor" href="#public">#</a> public</h2><p><code>public</code>  修饰的属性可以在外部访问，也可以在派生类和自身实例中访问</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    course<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> course<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> course</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My course is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>course<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">let</span> man1<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'sphinx'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// sphinx</span></pre></td></tr><tr><td data-num="27"></td><td><pre>man1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is sphinx,I'm 16 years old</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">let</span> man2<span class="token operator">:</span> Student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'math'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>man2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is asuhe,I'm 16 years old </span></pre></td></tr><tr><td data-num="30"></td><td><pre>           <span class="token comment">// My course is math</span></pre></td></tr></table></figure><h2 id="protected"><a class="anchor" href="#protected">#</a> protected</h2><p><code>protected</code>  修饰的属性不可以在外部访问，但可以在派生类和自身实例中访问</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">protected</span> name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">protected</span> age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    course<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> course<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> course</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My course is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>course<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">let</span> man1<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'sphinx'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="27"></td><td><pre>man1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is sphinx,I'm 16 years old</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">let</span> man2<span class="token operator">:</span> Student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'math'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>man2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is asuhe,I'm 16 years old </span></pre></td></tr><tr><td data-num="30"></td><td><pre>           <span class="token comment">// My course is math</span></pre></td></tr></table></figure><h2 id="private"><a class="anchor" href="#private">#</a> private</h2><p><code>protected</code>  修饰的属性仅能自身实例中访问</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">let</span> man1<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'sphinx'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="16"></td><td><pre>man1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is sphinx,I'm 16 years old</span></pre></td></tr></table></figure><h2 id="readonly-vs-权限修饰符"><a class="anchor" href="#readonly-vs-权限修饰符">#</a> readonly vs 权限修饰符</h2><p>当我们希望一个属性仅可自身访问且仅可读取时，可以和 <code>readonly</code>  修饰符一起使用</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">readonly</span> id<span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>id<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id</pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="存取器"><a class="anchor" href="#存取器">#</a> 存取器</h2><p><code>TypeScript</code>  支持通过  <code>getters/setters</code>  来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。</p><p>下面来看如何把一个简单的类改写成使用  <code>get</code>  和  <code>set</code> 。 首先，我们从一个没有使用存取器的例子开始。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  firstName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'A'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  lastName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'B'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">fullName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">set</span> <span class="token function">fullName</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> names <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>p<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">'C'</span></pre></td></tr><tr><td data-num="18"></td><td><pre>p<span class="token punctuation">.</span>lastName <span class="token operator">=</span>  <span class="token string">'D'</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>p<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'E-F'</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> p<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="抽象类"><a class="anchor" href="#抽象类">#</a> 抽象类</h2><p>抽象类做为其它派生类的基类使用。 ** 它们不能被实例化。** 不同于接口，抽象类可以包含成员的实现细节。  <code>abstract</code>  关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>抽象类</pre></td></tr><tr><td data-num="3"></td><td><pre>  不能创建实例对象，只有实现类才能创建实例</pre></td></tr><tr><td data-num="4"></td><td><pre>  可以包含未实现的抽象方法</pre></td></tr><tr><td data-num="5"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">abstract</span> <span class="token function">cry</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">run</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run()'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">cry</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Dog cry()'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>dog<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Dog cry()</span></pre></td></tr><tr><td data-num="21"></td><td><pre>dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// run()</span></pre></td></tr></table></figure><h2 id="抽象类-vs-接口"><a class="anchor" href="#抽象类-vs-接口">#</a> 抽象类 vs 接口</h2><p>接口可以理解为里面所有属性都是 <code>abstract</code> ，而且使用了接口的类必须按接口的规格实现。接口的函数只能是定义，不能有函数体不能实现。</p><p>抽象类里的函数方法可以为 <code>abstract</code>  也可以不为 <code>abstract</code> ，而且抽象类的函数方法可以有函数体能够去实现。若抽象类的函数方法被实现类重写了，那么在实现类调用该方法时会调用实现类重写的那个方法。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Typescript" scheme="https://asuhe.fun/categories/Typescript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础(二)</title>
    <link href="https://asuhe.fun/2022/04/30/2022-04-30-TypeScript%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
    <id>https://asuhe.fun/2022/04/30/2022-04-30-TypeScript%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</id>
    <published>2022-04-30T10:56:33.000Z</published>
    <updated>2022-05-02T10:01:01.981Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="接口"><a class="anchor" href="#接口">#</a> 接口</h1><p>接口是对象的状态 (属性) 和行为 (方法) 的抽象 (描述)，<strong>本质上是一种对对象的约束</strong>。例如我们要求一个对象必须要有 <code>id</code>  这个属性，且属性值必须为 <code>number</code> 。这在 <code>javascript</code>  上是做不到的，但在 <code>typescript</code>  中我们可以利用接口来实现。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求：对象里必须要有 id 这个属性，且属性值为 number 类型</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 声明一个接口</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">IObj</span><span class="token punctuation">&#123;</span> <span class="token comment">// 用 I 开头表示这是一个接口</span></pre></td></tr><tr><td data-num="4"></td><td><pre>id<span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">let</span> obj1<span class="token operator">:</span>IObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    name<span class="token operator">:</span><span class="token string">'asuhe'</span> <span class="token comment">//error 接口中未声明 name 属性</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">let</span> obj2<span class="token operator">:</span>IObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    id<span class="token operator">:</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token comment">//error 数据类型错误</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="可选属性-参数"><a class="anchor" href="#可选属性-参数">#</a> 可选属性 | 参数</h2><p>在接口里约定的属性或参数都是必选的，若我们要求在接口中约定一些属性为可选属性那么只需要在后面加上 <code>?</code></p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求：要求一个人的信息必须有名字，身高体重可选填</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    height<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    weight<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">let</span> obj<span class="token operator">:</span>IPerson <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>name<span class="token operator">:</span><span class="token string">'asuhe'</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="只读属性-参数"><a class="anchor" href="#只读属性-参数">#</a> 只读属性 | 参数</h2><p>若我们想对象里某个参数只能读取不能修改，那么仅需在前面加上 <code>readonly</code></p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求：货物编号只能读取不能修改</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">IGoods</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">readonly</span> id<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    weight<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">let</span> obj<span class="token operator">:</span>IGoods <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    name<span class="token operator">:</span><span class="token string">'asuhe'</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>obj<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//error 不能赋值，只读属性</span></pre></td></tr></table></figure><h2 id="readonly-vs-const"><a class="anchor" href="#readonly-vs-const">#</a> readonly vs const</h2><p>最简单判断该用  <code>readonly</code>  还是  <code>const</code>  的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用  <code>const</code> ，若做为属性则使用  <code>readonly</code> 。</p><h2 id="函数类型"><a class="anchor" href="#函数类型">#</a> 函数类型</h2><p>接口能够描述  <code>JavaScript </code> 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>接口可以描述函数类型 (参数的类型与返回的类型)</pre></td></tr><tr><td data-num="3"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">ISum</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">let</span> sum<span class="token operator">:</span><span class="token function-variable function">ISum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr></table></figure><h1 id="类中使用接口"><a class="anchor" href="#类中使用接口">#</a> 类中使用接口</h1><p>与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>  类类型：实现接口</pre></td></tr><tr><td data-num="3"></td><td><pre>  1. 一个类可以实现多个接口</pre></td></tr><tr><td data-num="4"></td><td><pre>  2. 一个接口可以继承多个接口</pre></td></tr><tr><td data-num="5"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">interface</span> <span class="token class-name">IStudent</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    course<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 类实现接口</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 一个类实现多个接口</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">IPerson</span><span class="token punctuation">,</span> IStudent <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    name<span class="token operator">:</span> <span class="token builtin">string</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    age<span class="token operator">:</span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    course<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> course<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token comment">// 一个接口继承多个接口</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">interface</span> <span class="token class-name">IStudentAndPerson</span> <span class="token keyword">extends</span> <span class="token class-name">IPerson</span><span class="token punctuation">,</span>IStudent<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    </pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Typescript" scheme="https://asuhe.fun/categories/Typescript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础(一)</title>
    <link href="https://asuhe.fun/2022/04/30/2022-04-30-TypeScript%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>https://asuhe.fun/2022/04/30/2022-04-30-TypeScript%E5%9F%BA%E7%A1%80(%E4%B8%80)/</id>
    <published>2022-04-30T01:59:45.000Z</published>
    <updated>2022-05-02T10:00:48.461Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境搭建"><a class="anchor" href="#环境搭建">#</a> 环境搭建</h1><p>因为 <code>TypeScript</code>  是无法直接在浏览器上运行的，所以需要先将 <code>Typescript</code>  编译成 <code>Javascript</code>  代码后才能使用</p><h2 id="安装ts"><a class="anchor" href="#安装ts">#</a> 安装 TS</h2><p>全局安装 <code>Typescript</code> ：</p><pre><code class="language-sh">npm install -g typescript</code></pre><p>检查安装情况</p><pre><code class="language-sh">tsc -v</code></pre><h2 id="手动编译"><a class="anchor" href="#手动编译">#</a> 手动编译</h2><p>手动编译仅需在目录下 <code>tsc 文件名.ts</code> ，例如：</p><pre><code class="language-sh">tsc index.ts</code></pre><h2 id="vscode自动编译"><a class="anchor" href="#vscode自动编译">#</a> vscode 自动编译</h2><p>每次都要自行编译很麻烦，在 <code>vscode</code>  情况下我们可以使用监视任务让他自动编译。首先生成 <code>ts</code>  配置文件：</p><pre><code class="language-sh">// 生成配置文件tsconfig.jsontsc --init</code></pre><p>然后根据需要修改配置文件，常见的修改有设置输出 js 文件的目录、开启严格模式等。<strong>根据每项参数后面的注解按需修改配置</strong>。</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//tsconfig.json 内设置编译好的 js 文件输出的目录</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token property">"outDir"</span><span class="token operator">:</span><span class="token string">"./js"</span> <span class="token comment">// 输出到当前文件夹下的 js 文件夹里面</span></pre></td></tr></table></figure><p>最后启动监视任务，监视 <code>tsconfig.json</code>  文件</p><pre><code class="language-sh">终端 -&gt; 运行任务 -&gt; 监视tsconfig.json</code></pre><p><img data-src="https://s2.loli.net/2022/04/30/5bTuPGsoLtiM3Sc.png" alt="image-20220430102519183" /></p><h2 id="webpack打包编译"><a class="anchor" href="#webpack打包编译">#</a> webpack 打包编译</h2><p>下载依赖并配置使用即可</p><pre><code class="language-sh">yarn add -D typescript  // 下载ts编译包yarn add -D ts-loader   // 下载ts的loader</code></pre><h1 id="基础类型"><a class="anchor" href="#基础类型">#</a> 基础类型</h1><p><strong>TS 的基本数据类型和 JS 是一致的。</strong></p><p>除了基本数据类型，TS 新增了 <code>统一类型的数组</code> 、 <code>元组</code> 、 <code>枚举</code> 、 <code>any</code>  和 <code>void</code>  类型。</p><h2 id="变量类型指定"><a class="anchor" href="#变量类型指定">#</a> 变量类型指定</h2><p>我们可以像强类型语言一样指定变量的类型，仅需在后面 <code>:指定类型</code> 就可以完成类型检查</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> num1<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> num2<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 自动类型推断</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 根据初始赋值推断出变量类型为 number</span></pre></td></tr><tr><td data-num="5"></td><td><pre>num3 <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="6"></td><td><pre>num3 <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token comment">// error</span></pre></td></tr></table></figure><h2 id="函数返回值指定"><a class="anchor" href="#函数返回值指定">#</a> 函数返回值指定</h2><p>指定函数的返回值类型</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span> <span class="token comment">// 指定函数返回值类型为 number</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="数组"><a class="anchor" href="#数组">#</a> 数组</h2><p>TS 的数组定义像 <code>C/C++</code>  那样的强类型语言一样，指定数组内只能存同种类型的数据。可以在元素类型后面接上 <code>[]</code> ，表示由此类型元素组成的一个数组：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> numArr<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 指定只能存数字类型的数据</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> numArr<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token comment">// 能强行通过编译，但是会报错</span></pre></td></tr></table></figure><p>或者使用泛型声明：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> numArr<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr></table></figure><h2 id="元组"><a class="anchor" href="#元组">#</a> 元组</h2><p>元组类型允许表示一个已知元素数量和类型的数组， <code>各元素的类型不必相同</code> 。听起来像 <code>javascript</code>  原生的数组，但是并不一样。元组的限制很大，会固定数据的排列方式和数组大小。</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token comment">// 和 let arr = [] 不一样</span></pre></td></tr><tr><td data-num="2"></td><td><pre>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="3"></td><td><pre>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span> <span class="token comment">//error 报错</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 当访问一个已知索引的元素，能够得到正确的类型，会有智能提示.js 原生数组不具有</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// error</span></pre></td></tr></table></figure><h2 id="枚举"><a class="anchor" href="#枚举">#</a> 枚举</h2><p>枚举类型 <code>enum</code>  类似 <code>C/C++</code>  里的枚举，能够修改枚举的值。默认枚举值是 1，后续枚举值依次递增 + 1 的</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    red<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    green<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    yellow<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    blue</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 枚举值默认从 0 递增</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token comment">// 0</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment">// 1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr></table></figure><p>可以手动指定枚举值</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    red <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    green<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    yellow <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    blue</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 手动指定枚举值后，后续枚举值会在此基础上 + 1 递增</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token comment">// 100</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment">// 101</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span> <span class="token comment">// 200</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token comment">// 201</span></pre></td></tr></table></figure><p>还可以利用类似索引的方式反过来取值</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    red <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    green<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    yellow <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    blue</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 可以根据对应的枚举值反向取值</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// red</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// green</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// yellow</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// blue</span></pre></td></tr></table></figure><h2 id="any"><a class="anchor" href="#any">#</a> any</h2><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用  <code>any</code>  类型来标记这些变量：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// ok</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token comment">// ok</span></pre></td></tr></table></figure><h2 id="void"><a class="anchor" href="#void">#</a> void</h2><p>某种程度上来说， <code>void</code>  类型像是与  <code>any</code>  类型相反，它 <code>表示没有任何类型</code> 。 当一个函数没有返回值时，你通常会见到其返回值类型是  <code>void</code> ：</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 表示没有任何类型，一般用来说明函数的返回值不能是 undefined 和 null 之外的值 */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn()'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// return undefined</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// return null</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// return 1 // error</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="联合类型"><a class="anchor" href="#联合类型">#</a> 联合类型</h2><p>联合类型（Union Types）表示取值可以为多种类型中的一种</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 需求 1: 定义一个一个函数得到一个数字或字符串值的字符串形式值</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">toString2</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 需求 2: 定义一个一个函数得到一个数字或字符串值的长度</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// return x.length // error</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// error</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="类型断言"><a class="anchor" href="#类型断言">#</a> 类型断言</h2><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式。 其一是 <code>&lt;&gt;</code>  语法，另一个为  <code>as</code>  语法</p><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="2"></td><td><pre>类型断言 (Type Assertion): 可以用来手动指定一个值的类型</pre></td></tr><tr><td data-num="3"></td><td><pre>语法:</pre></td></tr><tr><td data-num="4"></td><td><pre>    方式一: &lt; 类型 > 值</pre></td></tr><tr><td data-num="5"></td><td><pre>    方式二：值 as 类型  tsx 中只能用这种方式</pre></td></tr><tr><td data-num="6"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* 需求：定义一个函数得到一个字符串或者数值数据的长度 */</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Typescript" scheme="https://asuhe.fun/categories/Typescript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>数组去重、扁平化、函数柯里化、new、instanceof</title>
    <link href="https://asuhe.fun/2022/03/05/2022-03-05-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E3%80%81%E6%89%81%E5%B9%B3%E5%8C%96%E3%80%81%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81new%E3%80%81instanceof/"/>
    <id>https://asuhe.fun/2022/03/05/2022-03-05-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E3%80%81%E6%89%81%E5%B9%B3%E5%8C%96%E3%80%81%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81new%E3%80%81instanceof/</id>
    <published>2022-03-05T04:42:11.000Z</published>
    <updated>2022-05-02T10:00:35.220Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数组去重"><a class="anchor" href="#数组去重">#</a> 数组去重</h1><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="利用set数据结构"><a class="anchor" href="#利用set数据结构">#</a> 利用 Set 数据结构</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 利用 es6 的 set 数据结构</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="利用arrayprototypefilter函数"><a class="anchor" href="#利用arrayprototypefilter函数">#</a> 利用 Array.prototype.filter 函数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment">// 判断是否有出现索引号不一致情况，若有则说明有重复</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="利用arrayprototypeincludes函数"><a class="anchor" href="#利用arrayprototypeincludes函数">#</a> 利用 Array.prototype.includes 函数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    </pre></td></tr><tr><td data-num="4"></td><td><pre>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 判断新数组里是否有该 item</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="利用arrayprototypeindexof函数"><a class="anchor" href="#利用arrayprototypeindexof函数">#</a> 利用 Array.prototype.indexOf 函数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    </pre></td></tr><tr><td data-num="4"></td><td><pre>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token comment">// 若 item 从未出现在新数组里，将 item 加入新数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// if(!newArr.includes(item)) newArr.push(item)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="数组扁平化"><a class="anchor" href="#数组扁平化">#</a> 数组扁平化</h1><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 原生</span></pre></td></tr><tr><td data-num="3"></td><td><pre>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="利用字符串转换"><a class="anchor" href="#利用字符串转换">#</a> 利用字符串转换</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">let</span> arrStr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> arrStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> newArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="完美版本不改变变量类型"><a class="anchor" href="#完美版本不改变变量类型">#</a> 完美版本，不改变变量类型</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>maxDepth <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    </pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 利用迭代</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> maxDepth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token operator">++</span>counter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span>        </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="柯里化"><a class="anchor" href="#柯里化">#</a> 柯里化</h1><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">curring</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span><span class="token operator">...</span>argsOne</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 若参数不够则继续返回函数，继续接收参数</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>argsOne<span class="token punctuation">.</span>length<span class="token operator">&lt;</span>fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>argsTwo</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">curring</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token operator">...</span>argsOne<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>argsTwo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 若参数足够则直接返回函数调用结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">...</span>argsOne<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d <span class="token operator">+</span> e<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">curring</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="new"><a class="anchor" href="#new">#</a> new</h1><p>new 操作符做的事情</p><ul><li>判断操作对象是否为函数，若是则创建一个空对象。若不是则抛出类型错误</li><li>将该空对象的原型指向构造函数的原型</li><li>执行构造函数，将 this 指向该空对象</li><li>判断构造函数执行结果，若为对象则返回对象，若不是则返回开始时创建的对象</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Constructor<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token keyword">if</span><span class="token punctuation">(</span>Constructor <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>       <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Constructor</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>       <span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>       <span class="token comment">// 值不是函数类型，抛出错误</span></pre></td></tr><tr><td data-num="8"></td><td><pre>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">TypeError:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Constructor<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is not a Constructor</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="instanceof"><a class="anchor" href="#instanceof">#</a> instanceof</h1><p><code>instanceof</code>  就是根据构造函数的原型链网上查找，找到即返回 <code>true</code> ，找不到则返回 <code>false</code></p><ul><li>判断右操作数是否为函数类型，是则继续。否则返回类型错误</li><li>左操作数的原型不是则继续获取该原型的原型</li><li>若最终找到 <code>Object.prototype</code>  的 <code>__proto</code>  则返回 false，查找失败。否则返回 true</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> right <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">let</span> Lproto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token comment">// 找到终点 null 时，直接返回 false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Lproto<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>Lproto <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            Lproto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Lproto<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Right-hand side of 'instanceof' is not callable</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础(五)</title>
    <link href="https://asuhe.fun/2022/03/04/2022-03-04-VUE%E5%9F%BA%E7%A1%80(%E4%BA%94)/"/>
    <id>https://asuhe.fun/2022/03/04/2022-03-04-VUE%E5%9F%BA%E7%A1%80(%E4%BA%94)/</id>
    <published>2022-03-04T06:16:34.000Z</published>
    <updated>2022-05-02T10:00:23.781Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue高级特性"><a class="anchor" href="#vue高级特性">#</a> Vue 高级特性</h1><h2 id="自定义v-model"><a class="anchor" href="#自定义v-model">#</a> 自定义 v-model</h2><p>当我们需要在自定义的组件上使用 <code>v-model</code>  属性时，就需要自己去实现父子组件里的 <code>v-model</code>  通信了。用 <code>props</code>  传值，子组件将需要改变的值接收，然后使用 <code>model</code>  添加自定义事件将其绑定在标签上。</p><pre><code class="language-vue">// 父组件&lt;template&gt;&lt;p&gt;        &#123;&#123;name&#125;&#125;    &lt;/p&gt;&lt;Son v-model=&quot;name&quot; /&gt;&lt;/template&gt;&lt;scirpt&gt;import Son from './Son'export default &#123;    components:&#123;    Son    &#125;,    data()&#123;        return &#123;        name:'asuhe'        &#125;    &#125;&#125;&lt;/scirpt&gt;</code></pre><pre><code class="language-vue">// 子组件&lt;template&gt;&lt;input type=&quot;text&quot; :value=&quot;text&quot; @input=&quot;$emit('change',$event.target.value)&quot; &gt;&lt;/template&gt;&lt;scirpt&gt;export default &#123;    model:&#123;    prop:'name', // 对应 props的name    event:'change'    &#125;    props:&#123;    name:&#123;            type:String,            default:1        &#125;    &#125;&#125;&lt;/scirpt&gt;</code></pre><h2 id="nexttick"><a class="anchor" href="#nexttick">#</a> $nextTick</h2><p>因为 vue 是异步渲染的。在其运作过程中，data 数据改变后不会立马渲染 DOM，而是用 <code>Document.createDocumentFragment</code>  创建文档碎片将多次 data 数据修改后的所有 DOM 操作整合成一次再去插入 DOM 中进行渲染，这也是 vue 性能优秀的原因之一。</p><p>在 DOM 渲染之后，vue 提供了一个 <code>$nextTick</code>  函数，它会在 DOM 渲染之后触发，我们可以利用它来获取最新的 DOM 节点。</p><pre><code class="language-vue">&lt;template&gt;&lt;p&gt;        &#123;&#123;name&#125;&#125;    &lt;/p&gt;&lt;/template&gt;&lt;script&gt;export default &#123;        data()&#123;            return &#123;                name:'zhangsan'            &#125;        &#125;,        mounted()&#123;this.$nextTick(()=&gt;&#123;                console.log('调用了$nextTick');            &#125;)        &#125;    &#125;&lt;/script&gt;</code></pre><h2 id="slot"><a class="anchor" href="#slot">#</a> slot</h2><p>当一个组件会被多次使用，且里面大部分内容不变仅有非常少部分的结构改变时，可以使用 slot 插槽，将其理解为占位符。该种通信方式适用于父组件给子组件传递数据，但它与其它通信不同的是，它可以传递结构给子组件，子组件中的 <code>slot</code>  标签本质上就是一个占位符。若父组件给其传递 <code>template</code>  则使用父组件传递过来的 <code>template</code> ，否则使用默认定义的 <code>template</code> 。插槽又分为默认插槽、具名插槽和作用域插槽。</p><p><strong>默认插槽约定成俗只能有一个，具名插槽就是在默认插槽的基础上加上 <code>name</code>  属性唯一标识这个插槽</strong>，这样父组件在传递数据的时候可以根据名字精准传递到指定的插槽中。</p><p>作用域插槽中子组件的 slot 可以通过 属性传递值给父组件，然后父组件可以根据不同需求改变这个 slot 内部的显示结构，把子组件的值，传给父组件固定的区域进行操作。父组件的数据是给子组件展示的。子组件展示过程当中，数据的结构由父组件决定的。</p><h3 id="默认插槽"><a class="anchor" href="#默认插槽">#</a> 默认插槽</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 子组件放置插槽</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"asu"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 父组件传递数据</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">&lt;</span>button<span class="token operator">></span>点击<span class="token operator">&lt;</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"asu"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://asuhe.fun"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr></table></figure><p>作用域插槽</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 父组件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"&#123;todo,index&#125;"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"todo.isOver"</span> style<span class="token operator">=</span><span class="token string">"color:hotpink"</span><span class="token operator">></span>√ <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">2</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token comment">// 父组件控制子组件的样式</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 子组件</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span>slot <span class="token operator">:</span>todo<span class="token operator">=</span><span class="token string">"todo"</span> <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">3</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span></pre></td></tr></table></figure><p>作用域插槽接收子组件数据时的指令：</p><ul><li><p><code>slot</code>  属性弃用，具名插槽通过指令参数 <code>v-slot:插槽名</code>  的形式传入，可以简化为  <code>#插槽名</code></p></li><li><p><code>slot-scope</code>  属性弃用，作用域插槽通过 <code>v-slot:xxx=&quot;slotProps&quot;</code>  的 slotProps 来获取子组件传出的属性</p></li><li><p><code>v-slot</code>  属性只能在 <code>&lt;template&gt;</code>  上使用，但在【<strong>只有默认插槽时</strong>】可以在组件标签上使用</p></li></ul><h4 id="注意事项"><a class="anchor" href="#注意事项">#</a> 注意事项</h4><ol><li>默认插槽名为 <code>default</code> ，可以省略 <code>default</code>  直接写 <code>v-slot</code> ，<br />缩写为 #时不能不写参数，写成 <code>#default</code> （这点所有指令都一样，v-bind、v-on）</li><li>多个插槽混用时， <code>v-slot</code>  不能省略 <code>default</code></li><li>同样可以通过解构获取 <code>v-slot=&#123;user&#125;</code> , 还可以重命名 <code>v-slot=&quot;&#123;user: newName&#125;&quot;</code>  和定义默认值 <code>v-slot=&quot;&#123;user = '默认值'&#125;&quot;</code></li><li>插槽名可以是动态变化的  <code>v-slot:[slotName]</code></li></ol><h2 id="动态组件"><a class="anchor" href="#动态组件">#</a> 动态组件</h2><p>所谓动态组件就是在一个页面中，各个组件的组成是不一样的。但是在同一个路由下，里面的二级路由组合可能经常变动。有些组件我们选择展示，有些组件我们选择不展示。这种时候就可以使用动态组件。</p><pre><code class="language-vue">// 动态组件 Son&lt;template&gt;&lt;p&gt;asuhe&lt;/p&gt;&lt;/template&gt;</code></pre><pre><code class="language-vue">// 父组件&lt;template&gt;// 用 Component 标签表示动态组件 is为动态组件的名称&lt;Component :is=&quot;NextTickName&quot;&gt;&lt;/Component&gt;/* 不能直接让 is 为具体的组件名称，必须为变量 错误用法 报错 &lt;Component is=&quot;Son&quot;&gt;&lt;/Component&gt; */&lt;/template&gt;&lt;script&gt;import Son from './Son'export default &#123;    components:&#123;        Son    &#125;,    data()&#123;        return &#123;            NextTickName:'Son'        &#125;    &#125;&#125;&lt;/script&gt;</code></pre><h2 id="异步组件"><a class="anchor" href="#异步组件">#</a> 异步组件</h2><p>在某些场景下不需要加载全部的组件，我们只需要加载部分必要组件，当某些功能被使用到了我们就可以再去加载那些组件。这时我们就可以利用异步加载组件的技术，使用 <code>import()</code>  函数来实现这个功能，可以对我们的页面有非常大的性能提升。路由懒加载就是利用这个原理</p><pre><code class="language-vue">// 异步的组件&lt;template&gt;&lt;p&gt;AsyncComponent&lt;/p&gt;&lt;/template&gt;</code></pre><pre><code class="language-vue">// 父组件&lt;template&gt;&lt;Son v-if=&quot;show&quot;&gt;&lt;/Son&gt;&lt;button @click=&quot;load&quot;&gt;点击加载子组件&lt;/button&gt;&lt;/template&gt;&lt;script&gt;// 同步引入组件 import Son from './Son'export default &#123;    components:&#123;       // 异步加载组件          Son:()=&gt; import('./Son')    &#125;,    data()&#123;      return &#123;          show:false      &#125;      &#125;,    methods:&#123;        load()&#123;            this.show = true;        &#125;    &#125;&#125;&lt;/script&gt;</code></pre><h2 id="keep-alive"><a class="anchor" href="#keep-alive">#</a> keep-alive</h2><p>正常情况下当我们切换组件时，组件对象会被销毁。有时我们不希望如此，使用 <code>keep-alive</code>  可以将组件缓存下来。当我们在组件里来回切换的时候组件实例会被保存，不会被销毁所以也不用重复渲染，能够极大提升页面性能。</p><pre><code class="language-vue">// 保活组件&lt;template&gt;&lt;p&gt;AsyncComponent&lt;/p&gt;&lt;/template&gt;</code></pre><pre><code class="language-vue">&lt;template&gt;&lt;p&gt;&lt;/p&gt;&lt;keep-alive&gt;        &lt;/keep-alive&gt;&lt;/template&gt;&lt;script&gt;import Son from './Son'export default &#123;    components:&#123;        Son    &#125;,    data()&#123;        return &#123;                    &#125;    &#125;&#125;&lt;/script&gt;</code></pre><h2 id="mixin"><a class="anchor" href="#mixin">#</a> mixin</h2><p>html、js、css 相同时我们会封装组件。单个组件里 js 代码重复我们会封装函数。当不同的组件 js 代码重复  封装混合时，我们就可以使用 <code>minx</code>  混入技术，重用 js 代码。新建一个 myminxi.js 文件 在 js 文件中暴露一个对象 对象内部可以有 data methods computed...  会将 js 文件中暴露出的数据 方法等混入到组件内部。</p><h3 id="使用"><a class="anchor" href="#使用">#</a> 使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 在组件内部引入 import myminxi from './myminxi.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 使用 mixins:[mymixin]  例如:</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mixin<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mymixin'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'Daughter'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    mixins<span class="token operator">:</span><span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        money<span class="token operator">:</span><span class="token number">1000</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// myminx.js</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> mixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">borrowMoney</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> count</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">gaveMoney</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">-=</span> count</pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 给父组件增加 count</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>money <span class="token operator">+=</span> count</pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="mixin技术的特点"><a class="anchor" href="#mixin技术的特点">#</a> mixin 技术的特点</h3><ul><li>可以提高代码复用，优化性能</li><li>变量来源不明确，不利于阅读</li><li>多 mixin 可能会造成命名冲突</li><li>mixin 的组件可能会出现多对多的关系，复杂度较高</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Vue" scheme="https://asuhe.fun/categories/Vue/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>性能优化(二)</title>
    <link href="https://asuhe.fun/2022/02/23/2022-02-23-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://asuhe.fun/2022/02/23/2022-02-23-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-02-23T05:47:57.000Z</published>
    <updated>2022-06-11T16:03:33.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="页面优化"><a class="anchor" href="#页面优化">#</a> 页面优化</h1><p>一个页面从输入 <code>url</code>  到最终呈现整个流程可以分为资源加载过程和页面渲染过程。优化页面时我们可以从这两个角度去思考得到一些性能调优的思路</p><h2 id="加载过程"><a class="anchor" href="#加载过程">#</a> 加载过程</h2><ul><li>DNS 预取：首先从地址栏输入一个 <code>url</code>  我们需要将 <code>url</code>  地址解析，获取其中的主机地址，然后再对主机地址发送请求获取资源。这里我们先需要进行 <code>DNS</code>  查询，而 <code>DNS</code>  查询这个过程我们可以让浏览器进行 <code>DNS预取</code> 加快查询，电脑主机会先从本机 DNS 缓存中查找域名映射，若没有则会默认进行 <code>DNS递归查询</code> 。</li><li>TCP preconnect：tcp 调优、HTTP/2、keep-alive</li><li>http 缓存：让本地客户端缓存一些常用资源、from cache、from disk</li><li>CND 加速：多地分布服务器资源</li><li>合并请求：如雪碧图、nignx 模块、SSR 服务端渲染</li><li>减小资源体积：减小 cookie 体积（为什么 cookie 才 4KB 容量）、图片压缩、gzip 压缩</li><li>文档加载：css 样式放在 html 文档头部，js 脚本放在 html 文档末尾、异步加载 js</li></ul><h2 id="渲染过程"><a class="anchor" href="#渲染过程">#</a> 渲染过程</h2><ul><li>合并 DOM 操作，减少 DOM 操作</li><li>尽早开始执行 js，用 DOMContentLoad</li><li>懒加载</li><li>对 DOM 查询进行缓存</li><li>SSR 服务端渲染</li><li>使用防抖和节流</li></ul><h1 id="检测页面的内存泄漏"><a class="anchor" href="#检测页面的内存泄漏">#</a> 检测页面的内存泄漏</h1><p>之前面试的时候被问到过这个问题，如何快速检测出页面存在内存泄露情况。当时完全懵了，不知道怎么样调试才能检测出。后来去网上搜找到了一篇文章讲的十分好，在此记录一下。<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uZGF0YWRyaXZlbmludmVzdG9yLmNvbS9ob3ctdG8tZmluZC1tZW1vcnktbGVha3MtaW4tamF2YXNjcmlwdC1iODk4Yzg1OTk1YTM=">How to find memory leaks in JavaScript</span></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>this指向机制</title>
    <link href="https://asuhe.fun/2022/02/22/2022-02-22-this%E6%8C%87%E5%90%91%E6%9C%BA%E5%88%B6/"/>
    <id>https://asuhe.fun/2022/02/22/2022-02-22-this%E6%8C%87%E5%90%91%E6%9C%BA%E5%88%B6/</id>
    <published>2022-02-22T03:36:05.000Z</published>
    <updated>2022-05-02T10:00:04.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="this在不同情况下的指向"><a class="anchor" href="#this在不同情况下的指向">#</a> This 在不同情况下的指向</h1><h2 id="this所处的场景"><a class="anchor" href="#this所处的场景">#</a> This 所处的场景</h2><p>使用 <code>this</code>  的场景可大致分为下面几类：</p><ul><li>普通函数调用： <code>this</code>  指向全局对象</li><li>class 调用： <code>this</code>  指向 <code>class</code>  实例</li><li>bind、call、apply 调用： <code>this</code>  指向传入的对象</li><li>作为对象方法： <code>this</code>  指向对象实例</li><li>箭头函数</li></ul><p>不同的场景 <code>this</code>  的指向会发生变化，但有它们都有一个共同点，那就是 ** <code>this</code>  是在执行时才确定其最终指向，而不是在定义时确定 **。这一点和<strong>自由变量</strong>的查找有很大不同。</p><h2 id="箭头函数的this"><a class="anchor" href="#箭头函数的this">#</a> 箭头函数的 this</h2><ul><li>箭头函数没有自己的 <code>this</code> ，它的 <code>this</code>  在<strong>定义时</strong>继承于上级作用域</li><li>箭头函数的 <code>this</code>  不能被 <code>call、apply、bind</code>  等函数改变</li><li>箭头函数没有 <code>prototype</code> 。综上它不能用作构造函数用 <code>new</code>  操作符</li><li>箭头函数没有 <code>arguments</code>  对象</li><li>箭头函数不能用作 <code>generator</code>  函数</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>重新理解html</title>
    <link href="https://asuhe.fun/2022/01/21/2022-01-21-%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3html/"/>
    <id>https://asuhe.fun/2022/01/21/2022-01-21-%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3html/</id>
    <published>2022-01-21T01:48:51.000Z</published>
    <updated>2022-05-02T09:59:50.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="html语义化"><a class="anchor" href="#html语义化">#</a> HTML 语义化</h2><p>所谓 <code>html</code>  语义化就是用语义化标签去搭建网页结构。我们可以看如下两段代码体会语义化：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>// 代码一</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>列表</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>------</pre></td></tr><tr><td data-num="12"></td><td><pre>// 代码二</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>列表</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>   </pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>通过 css 的控制，上面两种代码我们可以实现同一效果。对比这两种代码我们可以明显感觉出<strong>代码二</strong>更加符合人的阅读习惯，利于后期维护。同时语义化的代码可以更好的让搜索引擎抓取，有利于让搜索引擎分清网页内容主次，利于 SEO。由此我们可以总结出 <code>HTML</code>  语义化的优点：</p><ul><li>增加代码可读性，方便开发人员阅读</li><li>利于 SEO，方便搜索引擎匹配</li></ul><h2 id="html常用标签"><a class="anchor" href="#html常用标签">#</a> HTML 常用标签</h2><p><code>HTML</code>  标签按照其特性我们可以将其大致划分为两类，分别是块级元素和内联元素。块级元素的特点是无论其内容的多少都会独占一行，块级元素内部可以继续嵌套其它行内元素和块级元素。而内联元素的大小通常根据其内容来决定，一般情况下内联元素内部只能包含数据以及其它内联元素。</p><p>常见块级元素：h1 (所有标题标签)、div、p、form、header、footer、ul、ol...</p><p>常见内联元素：img、input、button、label、span、textarea...</p><h2 id="src-和-href-的区别"><a class="anchor" href="#src-和-href-的区别">#</a> src 和 href 的区别</h2><p>src 和 href 都是<strong>用来引用外部的资源</strong>，它们的区别如下：</p><ul><li><strong>src：</strong> 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src 会将其指向的资源下载并应⽤到⽂档内，如请求 js 脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般 js 脚本会放在页面底部。</li><li><strong>href：</strong> 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在 a、link 等标签上。</li></ul><h2 id="script-标签中-defer-和-async-的区别"><a class="anchor" href="#script-标签中-defer-和-async-的区别">#</a> script 标签中 defer 和 async 的区别</h2><p>如果没有 defer 或 async 属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。</p><p>下图可以直观的看出三者之间的区别:</p><p><img data-src="https://s2.loli.net/2022/02/28/CmN8oBEu4HzWgn6.png" alt="image.png" /></p><p>其中蓝色代表 js 脚本网络加载时间，红色代表 js 脚本执行时间，绿色代表 html 解析。</p><p><strong>defer 和 async 属性都是去异步加载外部的 JS 脚本文件，它们都不会阻塞页面的解析</strong>，其区别如下：</p><ul><li>** 执行顺序：** 多个带 async 属性的标签，不能保证加载的顺序；多个带 defer 属性的标签，按照加载顺序执行；</li><li><strong>脚本是否并行执行：<strong>async 属性，表示</strong>后续文档的加载和执行与 js 脚本的加载和执行是并行进行的</strong>，即异步执行；defer 属性，加载后续文档的过程和 js 脚本的加载 (此时仅加载不执行) 是并行进行的 (异步)，js 脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded 事件触发执行之前。</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>DOM树工作原理</title>
    <link href="https://asuhe.fun/2022/01/05/2022-01-05-DOM%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
    <id>https://asuhe.fun/2022/01/05/2022-01-05-DOM%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</id>
    <published>2022-01-05T08:56:45.000Z</published>
    <updated>2022-05-02T09:59:41.645Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是dom"><a class="anchor" href="#什么是dom">#</a> 什么是 DOM</h1><p>平时我们写的 <code>html</code>  标签本质上就是一堆字符串， <code>html</code>  文件组成的字节流实际上是无法被浏览器渲染引擎理解的。为了让渲染引擎能够解析这些字符串，并且让 <code>JavaScript</code>  能够动态操纵网页元素而不是直接操作一堆字符串，于是就有了 <code>DOM</code>  这个概念。 <code>DOM</code>  让 <code>html</code>  文档能够有结构化的表述。在渲染引擎中， <code>DOM</code>  主要有三个层面的作用：</p><ul><li>从页面的角度来看， <code>DOM</code>  就是生成页面的基本数据结构</li><li>从 <code>JavaScript</code>  的角度来看， <code>DOM</code>  提供了接口让 <code>JavaScript</code>  有能力操作页面的元素，改变页面的结构、样式和内容</li><li>从安全的角度来看， <code>DOM</code>  提供了一个安全的容器，让一些不安全的内容直接在 <code>DOM</code>  解析的阶段就被排除了</li></ul><h1 id="dom树的生成"><a class="anchor" href="#dom树的生成">#</a> DOM 树的生成</h1><p>上面我们提到渲染引擎无法直接识别 <code>html</code>  文档字节流，所以在渲染引擎渲染页面之前 <code>html</code>  文档会被交给 <code>HTML</code>  解析器，让它先把 <code>html</code>  文档转换为 <code>DOM</code>  结构，再供渲染引擎使用。</p><p><code>HTML</code>  解析器在解析 <code>html</code>  文档时是一边加载一边解析的，也就是说 <code>html</code>  文档加载了多少内容它就解析多少内容，而不是等 <code>html</code>  文档全部加载完才开始解析内容的。这就像编译型语言和解释型语言，显然 <code>HTML</code>  解析器的工作模式是同解释型语言一样的。</p><p>在加载页面时，浏览器网络进程接收到响应头后会根据响应头中 <code>content-type</code>  字段来判断文件类型，接着启动相应进程去处理接收到的文件。如 <code>html</code>  文件的 <code>content-type</code>  字段是 <code>text/html</code> ，浏览器就会启动一个渲染进程去处理它。渲染进程启动完，网络进程和渲染进程之间会建立一个共享数据的管道，网络进程接收到多少内容就同时往管道里添加多少内容，而渲染进程就一直读取管道里的数据进行解析渲染。</p><p><img data-src="https://i0.hdslb.com/bfs/album/fa20779d57737cf9ccfb482b89dfdea5766a7e34.png" alt="html响应头类型" /></p><h2 id="dom生成"><a class="anchor" href="#dom生成">#</a> DOM 生成</h2><p>将 <code>html</code>  字节流转换为 <code>DOM</code>  的过程大致分为三个阶段：</p><ol><li>通过分词器将字节流转换为 <code>Token</code> ，这一点类似 <code>JavaScript</code>  解析</li><li>生成 <code>Node</code>  节点</li><li>生成 <code>DOM</code></li></ol><p><img data-src="https://i0.hdslb.com/bfs/album/5022e9fe0d2cb27440b97e3e1b52ced0b4bd14bb.png" alt="DOM生成" /></p><p>在分词器生成 <code>Token</code>  阶段，字节流一般会被转换成两种 <code>Token</code> ： <code>Tag Token</code>  和 <code>文本 Token</code> 。经过分词器处理后 <code>Tag Token</code>  会被划分成 <code>StartTag</code>  和 <code>EndTag</code> 。如：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>            Asuhe</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p><img data-src="https://i0.hdslb.com/bfs/album/7dc0875e58654646f90e83f5c2045968e44e87b6.png" alt="Tokens" /></p><p>后续的生成 <code>Node</code>  节点和 <code>DOM</code>  是同步进行的，将 <code>Token</code>  变成 <code>Node</code>  节点再将 <code>DOM</code>  插入 <code>DOM</code>  树中，到这里文档的 <code>DOM</code>  树就基本生成完毕了。</p><p>利用上面生成的 <code>Tokens</code> , <code>HTML</code>  解析器维护了一个 <code>Token</code>  栈结构。利用栈来进行标签匹配完成 <code>TagT Token</code>  的闭合，其和括号匹配是一样的。以上面的代码为例， <code>HTML</code>  解析器首先会将 <code>html、body、div</code>  的 <code>StartTag</code>  入栈， <code>文本Token</code>  会直接拿去生成 <code>DOM</code>  加入 <code>DOM树</code> ，在遇到 <code>EndTag</code>  就弹出栈顶的 <code>StartTag</code> ，将其插入 <code>DOM</code>  树。 <code>HTML</code>  解析器开始工作时，会默认创建一个根为 <code>document</code>  的空 <code>DOM</code>  结构，同时将一个 <code>StartTag document</code>  的 <code>Token</code>  压入栈底，后面再装入分词器分类出的 <code>token</code> ，文本 <code>Token</code>  会被插入在其上一个 <code>Tag Token</code>  的后面作为其子节点</p><p><img data-src="https://i0.hdslb.com/bfs/album/9593dfafede6b5c9c2989066cc4490303d44d691.png" alt="Token栈与DOM树" /></p><p>每当 <code>Token</code>  栈里出栈一个元素的时候 <code>DOM</code>  树就会生成相应节点并插入，所以最后文档渲染完毕时 <code>Token</code>  栈为空。</p><p>分词器解析出 <code>Token</code>  后，渲染引擎的 <code>XSSAuditor</code>  模块会启动，检查词法安全。例如是否引用了外部脚本、是否符合<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSP"> <code>CSP</code>  规范</a>、是否跨域请求等等，若出现不规范的内容 <code>XSSAuditor</code>  会对该脚本或者下载任务进行拦截</p><h2 id="javascript对dom生成的影响"><a class="anchor" href="#javascript对dom生成的影响">#</a> JavaScript 对 dom 生成的影响</h2><p>当 <code>HTML</code>  解析器遇到 <code>&lt;script&gt;</code>  标签时，渲染引擎判断出这是一段脚本，此时 <code>HTML</code>  解析器会停止对 <code>DOM</code>  的解析，因为段脚本里的代码可能会对已经生成的 <code>DOM树</code> 进行操作。所以渲染引擎会先执行完脚本代码再继续启动 <code>HTML</code>  解析器进行 <code>DOM</code>  解析。也就是说当有 <code>JavaScript</code>  在文档中时， <code>DOM</code>  生成会被阻塞。同时若一个 <code>JavaScript</code>  脚本代码中对 <code>DOM</code>  进行了操作，但它操作的 <code>DOM</code>  位于该段代码的 <code>&lt;script&gt;</code>  标签之后那么这行代码就会执行失败，因为此时需要被操作的 <code>DOM</code>  并没有渲染出来。这就是为什么通常我们将 <code>JavaScript</code>  代码放在 <code>html</code>  文档最后的原因。 <code>&lt;script&gt;</code>  标签放在 <code>html</code>  文档的头部，当 <code>&lt;script&gt;</code>  中代码较多所需执行时间很长时我们的页面就会出现白屏。</p><p><strong>当我们使用外部链接来加载 <code>&lt;script&gt;</code>  代码时，浏览器需要先下载这段代码，而下载过程同样会阻塞 <code>DOM</code>  解析，此时如果源 <code>js</code>  文件站点网络较差就会导致长时间白屏。</strong></p><p>为了解决这个问题 <code>Chrome</code>  浏览器做了许多优化，主要的就是预解析操作。当渲染引擎接收到字节流以后会开启一个预解析线程用于分析 <code>html</code>  文件中包含的 <code>JavaScript、Css</code>  等相关文件，解析到了会提前下载这些文件以防止阻塞</p><p>上面我们知道 <code>JavaScript</code>  脚本会阻塞 <code>DOM</code>  的生成，对此我们也有可以采用一些方法来规避，例如当 <code>javascript</code>  代码中没有 <code>DOM</code>  操作相关的代码时，就可以将该 <code>JavaScript</code>  脚本设置为异步加载，或者使用 <code>CDN</code>  加速、代码压缩等方法。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>使用async异步加载代码</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>使用defer异步加载代码</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>虽然 <code>async</code>  和 <code>defer</code>  都是异步加载 <code>javascript</code>  文件，但是 <code>async</code>  加载完 <code>js</code>  文件后会立即执行里面的代码而 <code>defer</code>  则会在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/DOMContentLoaded_event"> <code>DOMContentLoaded</code>  事件</a>前执行</p><p>在页面的 <code>JavaScript</code>  代码中我们可能并不会增删 <code>DOM</code>  但会修改 <code>DOM</code>  的样式，操作<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSSOM"> <code>CSSOM</code> </a>。如果 <code>js</code>  代码里操作了外部的 <code>CSS</code>  那么浏览器同样要等待外部的 <code>CSS</code>  文件下载完成并解析生成 <code>CSSOM</code>  对象之后才能执行 <code>JavaScript</code>  脚本。也就是说单纯的外部 <code>css</code>  文件并不会阻塞 <code>DOM</code>  渲染，但若是 <code>js</code>  代码中操作了外部 <code>css</code>  文件则该 <code>css</code>  文件就会间接导致 <code>DOM</code>  渲染被阻塞</p><p><img data-src="https://s2.loli.net/2022/01/07/jbye6CJrHR2xLuI.png" alt="DOM渲染流程图" /></p><p>当 <code>HTML</code>  解析器发现需要 <code>css、js</code>  外部文件时，浏览器会同时发起请求进程，也就是说请求 <code>css</code>  和 <code>js</code>  文件是并行的，所以在我们计算加载时间时仅需计算最大的那个文件所需传输时长即可</p><p><img data-src="https://s2.loli.net/2022/01/07/rB93eZ1EayhqolH.png" alt="浏览器渲染进程" /></p><h1 id="首页白屏优化"><a class="anchor" href="#首页白屏优化">#</a> 首页白屏优化</h1><p>通过上面的分析我们知道一般情况下网页性能瓶颈主要体现在 <code>css</code>  下载和 <code>js</code>  文件下载和代码执行中，所以想要缩短白屏时长我们可以采取以下策略：</p><ul><li>通过内联 <code>css</code>  和 <code>js</code>  来消除文件下载时导致的进程阻塞</li><li>在不适合内联 <code>css、js</code>  的情况下尽量减小文件大小，例如 <code>webpack</code>  的 <code>Tree Shaking</code></li><li>对于未操作 <code>DOM</code>  的 <code>js</code>  文件用 <code>async</code>  或 <code>defer</code>  异步加载</li><li>对于大的 <code>css</code>  文件使用媒体查询将其拆分为多个 <code>css</code>  文件，需要用的时候再加载相关 <code>css</code>  文件</li></ul><h1 id="页面渲染全过程"><a class="anchor" href="#页面渲染全过程">#</a> 页面渲染全过程</h1><ul><li>渲染进程将 <code>html</code>  文档转换为渲染引擎能够识别的 <code>DOM树结构</code></li><li>渲染引擎将 <code>css</code>  样式表转换为可以理解的 <code>styleSheets</code> ，计算出 <code>DOM</code>  节点的样式生成 <code>CSSOM</code></li><li>创建布局树，并计算元素的分布信息</li><li>对布局树进行分层并生成分层树</li><li>为每个图层生成绘制列表，并将其提交到合成线程</li><li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图</li><li>合成线程发送绘制图块命令 <code>DrawQuad</code>  给浏览器进程</li><li>浏览器进程根据 <code>DrawQuad</code>  消息生成页面，并显示到屏幕上</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>终极原型链</title>
    <link href="https://asuhe.fun/2021/12/23/2021-12-23-%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://asuhe.fun/2021/12/23/2021-12-23-%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9A%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2021-12-23T12:24:48.000Z</published>
    <updated>2022-05-02T09:59:30.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>接 <a href="/2021/10/20/2021-10-20-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/" title="上文">上文</a> 原型链，今天我们来说说终极原型链</p><h2 id="终极原型链"><a class="anchor" href="#终极原型链">#</a> 终极原型链</h2><p>只要对 <code>js</code>  深入了解一些，你肯定听说过一句话就是函数本质上也是一个对象，当函数被当作做对象去使用时函数就被称为函数对象，当函数被 <code>()</code>  调用是一个函数。既然函数也是对象，那它肯定也有一个原型。本文讲解将一直以下面代码为例</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 创建一个 Person 构造函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"asuhe"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//new 一个 Person 实例</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>所有的函数对象都会有一个原型（ES6 箭头函数除外），且会有一个 <code>prototype</code>  属性指向该原型。当用一个函数对象当作构造函数使用 <code>new</code>  创建一个实例对象时，该构造函数所有实例对象的隐式原型即 <code>__proto__</code> 都会指向构造函数的原型对象。在上述代码中我们可以得到一个最基本的原型链结构</p><p><img data-src="https://i0.hdslb.com/bfs/album/62c7f1c36da40209459be4ff80cb91fbd5e4856d.png" alt="原型链(1)" /></p><p>函数对象的原型本质上也是一个对象，只要是对象那么必定会有一个构造函数。** 实际上除函数对象和自身指定构造函数的对象外，所有的对象都是由 <code>Object</code>  这个构造函数 <code>new</code>  出来的。** 也就是说函数对象的原型是由 <code>Object</code>  构造出来的。根据原型链查找规则，我们可以用如下代码证明</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明普通对象都是由 Object 作为构造函数 new 出来的</span></pre></td></tr></table></figure><p><img data-src="https://s2.loli.net/2021/12/24/iq6Te7YVv1pBAcl.png" alt="原型链(1)" /></p><p><code>Object</code>  作为构造函数那么它必然也有一个原型并且由 <code>prototype</code>  属性指向。上面我们说过除函数对象和自己指定构造的对象外，所有的对象都是由 <code>Object</code>  作为构造函数 <code>new</code>  出来的。所以我们可以画出更加完善一点的原型链</p><p><img data-src="https://i0.hdslb.com/bfs/album/4e1203d7ceb497b592d178fd7f4588399a3f34df.png" alt="原型链(2)" /></p><p><code>Object</code>  的原型的隐式原型 <code>__proto__</code> 应该指向其构造函数的原型 <code>prototype</code> ，而 <code>Object</code>  的原型是由它自身 <code>new</code>  出来的。这样它原型链就形成了一个环：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Object.prototype</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span></span></span> ▶ <code>(prototype of Object).__proto__</code> ▶<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>o</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Object.prototype</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span></span></span>。为了阻止原型链在这个环里无限循环查找下去，所以在底层 <code>(prototype of Object).__proto__</code> 被设置成了 <code>null</code> 。我们可以用代码证明上述的原型链</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototye<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明函数对象的原型是由 Object new 出来的</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null 说明 Object 的原型的隐式原型值为 null</span></pre></td></tr></table></figure><p><img data-src="https://i0.hdslb.com/bfs/album/5263cabaa84f7a4254ee7a51bfead99fd1950f3e.png" alt="输出" /></p><h3 id="函数对象的原型链"><a class="anchor" href="#函数对象的原型链">#</a> 函数对象的原型链</h3><p>到目前为止，我们基本搞定了普通对象的原型链结构。但是还有一个问题我们没有搞定就是，既然函数也是一个对象那么它肯定也有自己的隐式原型 <code>__proto__</code> 指向它的构造函数的原型。<strong>在 js 的底层所有的函数都是由 <code>Function</code>  作为构造函数 <code>new</code>  出来的，也就是说任何一个函数都是 <code>Function</code>  的实例</strong></p><p>** 当我们使用 <code>function</code>  关键字时本质上就是 <code>Fuction</code>  作为构造函数 <code>new</code>  了一个对象。在 js 的底层最终都是调用 <code>Function</code>  函数去创建一个函数的。** 我们可以使用如下代码证明</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 证明所有的函数对象都是由 Function 构造的</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 箭头函数没有 prototype</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">arrFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrFn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined 说明箭头函数没有原型</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrFn<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明箭头函数同样是 Function new 出来的</span></pre></td></tr></table></figure><p><img data-src="https://i0.hdslb.com/bfs/album/c7b8b125be3627b2d2c51d1bc0ef6015c3555138.png" alt="输出" /></p><p>而 <code>Function</code>  函数本身也是一个函数对象，但是 <code>Function</code>  它是由自己 new 出来的。所以它的 <code>__proto__</code> 和 <code>prototype</code>  都指向同一个原型。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Function<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明 Function 自己 new 出的自己</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 说明 Function 的原型还是 Object new 出来的</span></pre></td></tr></table></figure><p>有了以上基础我们就可以继续完善一下原型链</p><p><img data-src="https://i0.hdslb.com/bfs/album/ea5af04e95c07086eb47e2ffc44612301544cccc.png" alt="原型链(3)" /></p><p>上面这个图就是我们常说的终极原型链了</p><h1 id="自测题"><a class="anchor" href="#自测题">#</a> 自测题</h1><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 思考下列输出并说明原因</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>模块化与组件化</title>
    <link href="https://asuhe.fun/2021/12/13/2021-12-13-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    <id>https://asuhe.fun/2021/12/13/2021-12-13-%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96/</id>
    <published>2021-12-13T12:08:29.000Z</published>
    <updated>2022-05-08T10:06:09.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="es6模块化"><a class="anchor" href="#es6模块化">#</a> ES6 模块化</h2><p>在 ES6 模块化规范中，每个文件都是一个模块。它的语法只能在浏览器端运行，还要借助 <code>Babel</code>  和 <code>Browserify</code>  依次编译代码才能在浏览器端运行。</p><h3 id="默认暴露"><a class="anchor" href="#默认暴露">#</a> 默认暴露</h3><p>默认暴露暴露出去的是一个对象。默认暴露必须用一个变量去统一接收</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// request.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'asuhe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>a<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>log</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">/* 本质上暴露出去的是一个对象，以 default 为属性</pre></td></tr><tr><td data-num="12"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="13"></td><td><pre>    default:&#123;</pre></td></tr><tr><td data-num="14"></td><td><pre>a,</pre></td></tr><tr><td data-num="15"></td><td><pre>         log</pre></td></tr><tr><td data-num="16"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="17"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="18"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// index.js</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">import</span> obj <span class="token keyword">from</span> <span class="token string">'requset.js'</span><span class="token punctuation">;</span> <span class="token comment">// 这种写法为简便写法</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token keyword">as</span> obj<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'requset.js'</span><span class="token punctuation">;</span> <span class="token comment">// 完整写法 本质</span></pre></td></tr><tr><td data-num="23"></td><td><pre>exprot <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> obj <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'request.js'</span><span class="token punctuation">;</span> <span class="token comment">// 引入并同时使用部分暴露，暴露出去</span></pre></td></tr></table></figure><p>默认暴露只能暴露一次</p><h3 id="分别暴露"><a class="anchor" href="#分别暴露">#</a> 分别暴露</h3><p>分别暴露也叫部分暴露，同样是暴露出去一个对象。它在最终暴露的时候，把所有暴露的变量自动封装到对象当中</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/* 实际暴露出去的对象</pre></td></tr><tr><td data-num="5"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="6"></td><td><pre>    a:100,</pre></td></tr><tr><td data-num="7"></td><td><pre>b:200</pre></td></tr><tr><td data-num="8"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="9"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// index.js</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'test.js'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 部分暴露可以在引入的时候帮它改名</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token keyword">as</span> <span class="token constant">A</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'test.js'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 打包引入 将所有暴露的东西全部引入并封装在同一个对象里，作为属性</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> All <span class="token keyword">from</span> <span class="token string">'test.js'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="统一暴露"><a class="anchor" href="#统一暴露">#</a> 统一暴露</h3><p><strong>统一暴露就是部分暴露的一个简便写法</strong>，方便程序员少写一些 <code>export</code>  关键字。它暴露出去的也是一个对象。但它暴露出去的对象并没有被重新包装，暴露出去的对象就是它原本的那个对象</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>a<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    sum</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* 实际暴露出去的对象</pre></td></tr><tr><td data-num="9"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>    a,</pre></td></tr><tr><td data-num="11"></td><td><pre>sum</pre></td></tr><tr><td data-num="12"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="13"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 统一暴露可以在暴露前帮其改名，而不能在引入时帮他改名</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>a <span class="token keyword">as</span> <span class="token constant">A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    sum <span class="token keyword">as</span> <span class="token constant">SUM</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">/* 改名后暴露出去的对象</pre></td></tr><tr><td data-num="20"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="21"></td><td><pre>A,</pre></td></tr><tr><td data-num="22"></td><td><pre>SUM</pre></td></tr><tr><td data-num="23"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="24"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// index.js</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>sum<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'test.js'</span><span class="token punctuation">;</span> <span class="token comment">// 解构更名</span></pre></td></tr></table></figure><h3 id="总结"><a class="anchor" href="#总结">#</a> 总结</h3><p>部分暴露和默认暴露方式可以混合使用。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    a<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    b<span class="token operator">:</span><span class="token number">300</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 最终暴露出去的对象</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="9"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>    a:100,</pre></td></tr><tr><td data-num="11"></td><td><pre>    default:&#123;</pre></td></tr><tr><td data-num="12"></td><td><pre>        a:200,</pre></td></tr><tr><td data-num="13"></td><td><pre>        b:300</pre></td></tr><tr><td data-num="14"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="16"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 引入</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">TEST</span> <span class="token keyword">from</span> <span class="token string">"test.js"</span> <span class="token comment">// 将最终暴露出来的对象打包改名为 TEST 类似于 TEST = 最终暴露对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token keyword">as</span> <span class="token constant">A</span><span class="token punctuation">,</span><span class="token keyword">default</span> <span class="token keyword">as</span> <span class="token constant">D</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"test.js"</span> <span class="token comment">// 解构最终暴露对象，并将属性重新命名</span></pre></td></tr></table></figure><h2 id="commonjs模块化"><a class="anchor" href="#commonjs模块化">#</a> CommonJS 模块化</h2><p>在 <code>CommonJS</code>  模块化的规范里，每个文件都是一个模块。用它模块化的代码既可以在服务端运行也可以在浏览器端运行。但在浏览器端运行前需要用 <code>Browserify</code>  编译一遍。</p><h3 id="基本语法"><a class="anchor" href="#基本语法">#</a> 基本语法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 暴露模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 第一种方式</span></pre></td></tr><tr><td data-num="3"></td><td><pre>exports<span class="token punctuation">.</span>xxx <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 第二种方式</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 引入模块</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'模块名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入内置模块和第三方模块</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">requier</span><span class="token punctuation">(</span><span class="token string">'./xxx.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入自定义模块</span></pre></td></tr></table></figure><p>在暴露语法中若 <code>module.exports</code>  和 <code>exports</code>  指向的是不同的对象，则引入模块的得到的是最终 <code>module.exports</code>  所指向的那个对象，而 <code>exports</code>  只是一个封装起来的语法糖。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// test.js</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    a<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    b<span class="token operator">:</span><span class="token number">200</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>exprots<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>exports<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'test.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* test 得到的是 module.exports 指向的对象</pre></td></tr><tr><td data-num="11"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="12"></td><td><pre>a:100,</pre></td></tr><tr><td data-num="13"></td><td><pre>b:200</pre></td></tr><tr><td data-num="14"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr></table></figure><p><code>exports</code>  和 <code>module.exports</code>  的关系图</p><p><img data-src="https://i0.hdslb.com/bfs/album/dd021b3f8b6905f88e8bb1613f47951a3bc5f09b.png" alt="exports和module.exports的关系" /></p><h2 id="组件化"><a class="anchor" href="#组件化">#</a> 组件化</h2><p>组件就是一个 <code>html、css、js</code>  的代码集合。它可以复用代码，简化项目的编码，提高运行效率。在组件注册的语法中实际上是把一个组件文件暴露出去的变成了一个构造组件实例对象的构造函数。每当我们使用一个组件标签的时候，在内存里就用构造函数 new 出了一个实例对象。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Javascript" scheme="https://asuhe.fun/categories/Javascript/"/>
    
    
    <category term="前端" scheme="https://asuhe.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
